package golem:order-client;

interface order-client {
  use wasi:io/poll@0.2.0.{ pollable as wasi-io-pollable };
  use wasi:clocks/wall-clock@0.2.0.{ datetime as wasi-clocks-datetime };
  use golem:rpc/types@0.2.0.{ component-id as golem-rpc-component-id, worker-id as golem-rpc-worker-id, cancellation-token as golem-rpc-cancellation-token };
  use golem:order-exports/api.{ action-not-allowed-error, add-item-error, address, address-not-valid-error, billing-address-not-set-error, cancel-order-error, create-order, datetime, email-not-valid-error, empty-email-error, empty-items-error, init-order-error, item-not-found-error, order, order-item, order-status, pricing-not-found-error, product-not-found-error, remove-item-error, ship-order-error, update-address-error, update-email-error, update-item-quantity-error };
  resource future-add-item-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, add-item-error>>;
  }
  resource future-cancel-order-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, cancel-order-error>>;
  }
  resource future-get-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<option<order>>;
  }
  resource future-initialize-order-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, init-order-error>>;
  }
  resource future-remove-item-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, remove-item-error>>;
  }
  resource future-ship-order-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, ship-order-error>>;
  }
  resource future-update-billing-address-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, update-address-error>>;
  }
  resource future-update-email-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, update-email-error>>;
  }
  resource future-update-item-quantity-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, update-item-quantity-error>>;
  }
  resource future-update-shipping-address-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, update-address-error>>;
  }
  resource future-load-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, string>>;
  }
  resource future-save-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<list<u8>>;
  }
  resource api {
    constructor(worker-name: string);
    custom: static func(worker-id: golem-rpc-worker-id) -> api;
    blocking-add-item: func(product-id: string, quantity: u32) -> result<_, add-item-error>;
    add-item: func(product-id: string, quantity: u32) -> future-add-item-result;
    schedule-add-item: func(product-id: string, quantity: u32, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-cancel-order: func() -> result<_, cancel-order-error>;
    cancel-order: func() -> future-cancel-order-result;
    schedule-cancel-order: func(scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-get: func() -> option<order>;
    get: func() -> future-get-result;
    schedule-get: func(scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-initialize-order: func(data: create-order) -> result<_, init-order-error>;
    initialize-order: func(data: create-order) -> future-initialize-order-result;
    schedule-initialize-order: func(data: create-order, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-remove-item: func(product-id: string) -> result<_, remove-item-error>;
    remove-item: func(product-id: string) -> future-remove-item-result;
    schedule-remove-item: func(product-id: string, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-ship-order: func() -> result<_, ship-order-error>;
    ship-order: func() -> future-ship-order-result;
    schedule-ship-order: func(scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-update-billing-address: func(address: address) -> result<_, update-address-error>;
    update-billing-address: func(address: address) -> future-update-billing-address-result;
    schedule-update-billing-address: func(address: address, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-update-email: func(email: string) -> result<_, update-email-error>;
    update-email: func(email: string) -> future-update-email-result;
    schedule-update-email: func(email: string, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-update-item-quantity: func(product-id: string, quantity: u32) -> result<_, update-item-quantity-error>;
    update-item-quantity: func(product-id: string, quantity: u32) -> future-update-item-quantity-result;
    schedule-update-item-quantity: func(product-id: string, quantity: u32, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
    blocking-update-shipping-address: func(address: address) -> result<_, update-address-error>;
    update-shipping-address: func(address: address) -> future-update-shipping-address-result;
    schedule-update-shipping-address: func(address: address, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
  }
  resource load-snapshot {
    constructor(worker-name: string);
    custom: static func(worker-id: golem-rpc-worker-id) -> load-snapshot;
    blocking-load: func(bytes: list<u8>) -> result<_, string>;
    load: func(bytes: list<u8>) -> future-load-result;
    schedule-load: func(bytes: list<u8>, scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
  }
  resource save-snapshot {
    constructor(worker-name: string);
    custom: static func(worker-id: golem-rpc-worker-id) -> save-snapshot;
    blocking-save: func() -> list<u8>;
    save: func() -> future-save-result;
    schedule-save: func(scheduled-for: wasi-clocks-datetime) -> golem-rpc-cancellation-token;
  }
}

world wasm-rpc-client-order {
  export order-client;
}
