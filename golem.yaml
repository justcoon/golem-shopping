tempDir: target/golem-temp
components:
  golem:pricing:
    profiles:
      release:
        build:
          - command: cargo component build --release
            sources:
              - pricing/src
              - pricing/wit
            targets:
              - target/wasm32-wasip1/release/pricing.wasm
        sourceWit: pricing/src_wit
        generatedWit: pricing/wit
        componentWasm: target/wasm32-wasip1/release/pricing.wasm
        clean:
          - pricing/src/bindings.rs
    defaultProfile: release
  golem:product:
    profiles:
      release:
        build:
          - command: cargo component build --release
            sources:
              - product/src
              - product/wit
            targets:
              - target/wasm32-wasip1/release/product.wasm
        sourceWit: product/src_wit
        generatedWit: product/wit
        componentWasm: target/wasm32-wasip1/release/product.wasm
        clean:
          - product/src/bindings.rs
    defaultProfile: release
  golem:cart:
    profiles:
      release:
        build:
          - command: cargo component build --release
            sources:
              - cart/src
              - cart/wit
            targets:
              - target/wasm32-wasip1/release/cart.wasm
        sourceWit: cart/src_wit
        generatedWit: cart/wit
        componentWasm: target/wasm32-wasip1/release/cart.wasm
        clean:
          - cart/src/bindings.rs
    defaultProfile: release
  golem:order:
    profiles:
      release:
        build:
          - command: cargo component build --release
            sources:
              - order/src
              - order/wit
            targets:
              - target/wasm32-wasip1/release/order.wasm
        sourceWit: order/src_wit
        generatedWit: order/wit
        componentWasm: target/wasm32-wasip1/release/order.wasm
        clean:
          - order/src/bindings.rs
    defaultProfile: release
dependencies:
  golem:order:
    - type: wasm-rpc
      target: golem:pricing
    - type: wasm-rpc
      target: golem:product
  golem:cart:
    - type: wasm-rpc
      target: golem:pricing
    - type: wasm-rpc
      target: golem:product
    - type: wasm-rpc
      target: golem:order


httpApi:
  definitions:
    cart:
      version: 0.0.1
      routes:
        - method: Get
          path: "/v1/cart/{user-id}"
          binding:
            type: default
            componentName: "golem:cart"
            response: |-
              let id: string = request.path.user-id;
              let worker = instance(id);
              let result = worker.get();
              match result {  some(x) => {status: 200u64, body: ok(x) }, none => {status: 404u64, body: err({message: "not found"})} }
        - method: Put
          path: "/v1/cart/{user-id}/items/{product-id}"
          binding:
            type: default
            componentName: "golem:cart"
            response: "let id: string = request.path.user-id;\nlet worker = instance(id);\nlet quantity: u32 = request.body.quantity;\nlet result = worker.add-item(request.path.product-id,
            quantity);\nmatch result {  ok(_) => {status: 200u64, body: ok({message: \"item
            added\"})}, err(x) => {status: 400u64, body: err({error: x})} } "
        - method: Post
          path: "/v1/cart/{user-id}/checkout"
          binding:
            type: default
            componentName: "golem:cart"
            response: "let id: string = request.path.user-id;\nlet worker = instance(id);\nlet result = worker.checkout();\nmatch result {  ok(x)
            => {status: 200u64, body: ok(x)}, err(x) => {status: 400u64, body: err({error:
            x})} } "
        - method: Put
          path: "/v1/cart/{user-id}/email"
          binding:
            type: default
            componentName: "golem:cart"
            response: "let id: string = request.path.user-id;\nlet worker = instance(id);\nlet email: string = request.body.email;\nlet result = worker.update-email(email);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"email set\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Put
          path: "/v1/cart/{user-id}/billing-address"
          binding:
            type: default
            componentName: "golem:cart"
            response: "let id: string = request.path.user-id;\nlet worker = instance(id);\nlet result = worker.update-billing-address(request.body);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"address set\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Put
          path: "/v1/cart/{user-id}/shipping-address"
          binding:
            type: default
            componentName: "golem:cart"
            response: "let id: string = request.path.user-id;\nlet worker = instance(id);\nlet result = worker.update-shipping-address(request.body);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"address set\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Delete
          path: "/v1/cart/{user-id}/items/{product-id}"
          binding:
            type: default
            componentName: "golem:cart"
            response: "let id: string = request.path.user-id;\nlet worker = instance(id);\nlet result = worker.remove-item(request.path.product-id);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"item removed\"})},
            err(x) => {status: 400u64, body: err({error: x})} } "
    order:
      version: 0.0.1
      routes:
        - method: Get
          path: "/v1/order/{order-id}"
          binding:
            type: default
            componentName: "golem:order"
            response: |-
              let id: string = request.path.order-id;
              let worker = instance(id);
              let result = worker.get();
              match result {  some(x) => {status: 200u64, body: ok(x) }, none => {status: 404u64, body: err({message: "not found"})} }
        - method: Put
          path: "/v1/order/{order-id}/email"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet email: string = request.body.email;\nlet result = worker.update-email(email);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"email set\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "

        - method: Put
          path: "/v1/order/{order-id}/items/{product-id}"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet quantity: u32 = request.body.quantity;\nlet result = worker.add-item(request.path.product-id,
            quantity);\nmatch result {  ok(_) => {status: 200u64, body: ok({message: \"item
            added\"})}, err(x) => {status: 400u64, body: err({error: x})} } "
        - method: Post
          path: "/v1/order/{order-id}/ship-order"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet result = worker.ship-order();\nmatch result
            {  ok(_) => {status: 200u64, body: ok({message: \"order shipped\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Post
          path: "/v1/order/{order-id}/cancel-order"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet result = worker.cancel-order();\nmatch result
            {  ok(_) => {status: 200u64, body: ok({message: \"order cancelled\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Put
          path: "/v1/order/{order-id}/billing-address"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet result = worker.update-billing-address(request.body);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"address set\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Put
          path: "/v1/order/{order-id}/shipping-address"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet result = worker.update-shipping-address(request.body);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"address set\"})}, err(x)
            => {status: 400u64, body: err({error: x})} } "
        - method: Delete
          path: "/v1/order/{order-id}/items/{product-id}"
          binding:
            type: default
            componentName: "golem:order"
            response: "let id: string = request.path.order-id;\nlet worker = instance(id);\nlet result = worker.remove-item(request.path.product-id);\nmatch
            result {  ok(_) => {status: 200u64, body: ok({message: \"item removed\"})},
            err(x) => {status: 400u64, body: err({error: x})} } "
    product:
      version: 0.0.1
      routes:
        - method: Get
          path: "/v1/product/{product-id}"
          binding:
            type: default
            componentName: "golem:product"
            response: |-
              let id: string = request.path.product-id;
              let worker = instance(id);
              let result = worker.get();
              match result {  some(x) => {status: 200u64, body: ok(x) }, none => {status: 404u64, body: err({message: "not found"})} }
        - method: Post
          path: "/v1/product/{product-id}"
          binding:
            type: default
            componentName: "golem:product"
            response: |-
              let id: string = request.path.product-id;
              let worker = instance(id);
              let name: string = request.body.name;
              let brand: string = request.body.brand;
              let description: string = request.body.description;
              let tags: list<string> = request.body.tags;
              worker.initialize-product(name, brand, description, tags);
              {status: 200u64, body: {message: "created"}}
    pricing:
      version: 0.0.1
      routes:
        - method: Get
          path: "/v1/pricing/{product-id}"
          binding:
            type: default
            componentName: "golem:pricing"
            response: |-
              let id: string = request.path.product-id;
              let worker = instance(id);
              let result = worker.get();
              match result {  some(x) => {status: 200u64, body: ok(x) }, none => {status: 404u64, body: err({message: "not found"})} }
        - method: Post
          path: "/v1/pricing/{product-id}"
          binding:
            type: default
            componentName: "golem:pricing"
            response: |-
              let id: string = request.path.product-id;
              let worker = instance(id);
              worker.initialize-pricing(request.body.msrp-prices, request.body.list-prices, request.body.sale-prices);
              {status: 200u64, body: {message: "created"}}
        - method: Patch
          path: "/v1/pricing/{product-id}"
          binding:
            type: default
            componentName: "golem:pricing"
            response: |-
              let id: string = request.path.product-id;
              let worker = instance(id);
              worker.update-pricing(request.body.msrp-prices, request.body.list-prices, request.body.sale-prices);
              {status: 200u64, body: {message: "updated"}}
  deployments:
    local:
      - host: "golem-shopping.test.local"
        definitions:
        - cart
        - order
        - product
        - pricing
