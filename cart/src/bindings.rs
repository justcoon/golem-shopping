// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod golem {
    #[allow(dead_code)]
    pub mod api {
        #[allow(dead_code, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Uri = super::super::super::golem::rpc::types::Uri;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects").finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => f.debug_tuple("UpdateMode::Automatic").finish(),
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }

            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => f.debug_tuple("FilterComparator::Less").finish(),
                    }
                }
            }

            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                    }
                }
            }

            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => f.debug_tuple("WorkerStatus::Running").finish(),
                        WorkerStatus::Idle => f.debug_tuple("WorkerStatus::Idle").finish(),
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => f.debug_tuple("WorkerStatus::Retrying").finish(),
                        WorkerStatus::Failed => f.debug_tuple("WorkerStatus::Failed").finish(),
                        WorkerStatus::Exited => f.debug_tuple("WorkerStatus::Exited").finish(),
                    }
                }
            }

            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Name").field(e).finish()
                        }
                        WorkerPropertyFilter::Status(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Status").field(e).finish()
                        }
                        WorkerPropertyFilter::Version(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Version").field(e).finish()
                        }
                        WorkerPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("WorkerPropertyFilter::CreatedAt").field(e).finish()
                        }
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter").field("filters", &self.filters).finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter").field("filters", &self.filters).finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }

            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid { high_bits: high_bits1, low_bits: low_bits1 } = uuid0;
                        let (result14_0, result14_1, result14_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec13 = filters2;
                                let len13 = vec13.len();
                                let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec13.len() * 8,
                                    4,
                                );
                                let result13 = if layout13.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout13);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec13.into_iter().enumerate() {
                                    let base = result13.add(i * 8);
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec12 = filters3;
                                        let len12 = vec12.len();
                                        let layout12 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec12.len() * 32,
                                                8,
                                            );
                                        let result12 = if layout12.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout12);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec12.into_iter().enumerate() {
                                            let base = result12.add(i * 32);
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator4.clone() as i32) as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base.add(16).cast::<usize>() = len5;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator6.clone() as i32) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator7.clone() as i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (comparator8.clone() as i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr10.cast_mut();
                                                        *base.add(16).cast::<u8>() =
                                                            (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(24).cast::<usize>() = len11;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr11.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(4).cast::<usize>() = len12;
                                        *base.add(0).cast::<*mut u8>() = result12;
                                        cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result13, layout13)]);

                                (1i32, result13, len13)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@0.2.0")]
                        extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: i32, _: *mut u8, _: usize, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits1),
                            _rt::as_i64(low_bits1),
                            result14_0,
                            result14_1,
                            result14_2,
                            match &precise {
                                true => 1,
                                false => 0,
                            },
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        GetWorkers::from_handle(ret as u32)
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base27 = l2;
                                    let len27 = l3;
                                    let mut result27 = _rt::Vec::with_capacity(len27);
                                    for i in 0..len27 {
                                        let base = base27.add(i * 64);
                                        let e27 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = *base.add(8).cast::<i64>();
                                            let l6 = *base.add(16).cast::<*mut u8>();
                                            let l7 = *base.add(20).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                                            let l9 = *base.add(24).cast::<*mut u8>();
                                            let l10 = *base.add(28).cast::<usize>();
                                            let base14 = l9;
                                            let len14 = l10;
                                            let mut result14 = _rt::Vec::with_capacity(len14);
                                            for i in 0..len14 {
                                                let base = base14.add(i * 8);
                                                let e14 = {
                                                    let l11 = *base.add(0).cast::<*mut u8>();
                                                    let l12 = *base.add(4).cast::<usize>();
                                                    let len13 = l12;
                                                    let bytes13 = _rt::Vec::from_raw_parts(
                                                        l11.cast(),
                                                        len13,
                                                        len13,
                                                    );

                                                    _rt::string_lift(bytes13)
                                                };
                                                result14.push(e14);
                                            }
                                            _rt::cabi_dealloc(base14, len14 * 8, 4);
                                            let l15 = *base.add(32).cast::<*mut u8>();
                                            let l16 = *base.add(36).cast::<usize>();
                                            let base23 = l15;
                                            let len23 = l16;
                                            let mut result23 = _rt::Vec::with_capacity(len23);
                                            for i in 0..len23 {
                                                let base = base23.add(i * 16);
                                                let e23 = {
                                                    let l17 = *base.add(0).cast::<*mut u8>();
                                                    let l18 = *base.add(4).cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                    let l21 = *base.add(12).cast::<usize>();
                                                    let len22 = l21;
                                                    let bytes22 = _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    );

                                                    (
                                                        _rt::string_lift(bytes19),
                                                        _rt::string_lift(bytes22),
                                                    )
                                                };
                                                result23.push(e23);
                                            }
                                            _rt::cabi_dealloc(base23, len23 * 16, 4);
                                            let l24 = i32::from(*base.add(40).cast::<u8>());
                                            let l25 = *base.add(48).cast::<i64>();
                                            let l26 = *base.add(56).cast::<i64>();

                                            WorkerMetadata {
                                                worker_id: WorkerId {
                                                    component_id: ComponentId {
                                                        uuid: Uuid {
                                                            high_bits: l4 as u64,
                                                            low_bits: l5 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes8),
                                                },
                                                args: result14,
                                                env: result23,
                                                status: WorkerStatus::_lift(l24 as u8),
                                                component_version: l25 as u64,
                                                retry_count: l26 as u64,
                                            }
                                        };
                                        result27.push(e27);
                                    }
                                    _rt::cabi_dealloc(base27, len27 * 64, 8);

                                    result27
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<i64>();
                    PromiseId {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid { high_bits: l1 as u64, low_bits: l2 as u64 },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        oplog_idx: l6 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId { component_id: component_id1, worker_name: worker_name1 } =
                        worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5,
                    );
                    let l6 = *ptr5.add(0).cast::<*mut u8>();
                    let l7 = *ptr5.add(4).cast::<usize>();
                    let len8 = l7;
                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId { component_id: component_id1, worker_name: worker_name1 } =
                        worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5.cast_mut(),
                        len5,
                    );
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId { component_id: component_id1, worker_name: worker_name1 } =
                        worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns a Golem worker URI that can be used to invoke a given function on the current worker
            pub fn get_self_uri(function_name: &str) -> Uri {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = function_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-self-uri"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                    super::super::super::golem::rpc::types::Uri { value: _rt::string_lift(bytes4) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import(_: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(oplog_idx));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i32(&replicas));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import(_: i64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(begin));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i32>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<i64>();
                    let l4 = *ptr0.add(24).cast::<f64>();
                    RetryPolicy {
                        max_attempts: l1 as u32,
                        min_delay: l2 as u64,
                        max_delay: l3 as u64,
                        multiplier: l4,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                    } = new_retry_policy;

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import(_: i32, _: i64, _: i64, _: f64);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i64, _: i64, _: f64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i32(max_attempts0),
                        _rt::as_i64(min_delay0),
                        _rt::as_i64(max_delay0),
                        _rt::as_f64(multiplier0),
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    let v0 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v0
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(new_persistence_level: PersistenceLevel) {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(result0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(match &idempotent {
                        true => 1,
                        false => 0,
                    });
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    Uuid { high_bits: l1 as u64, low_bits: l2 as u64 }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) {
                unsafe {
                    let WorkerId { component_id: component_id0, worker_name: worker_name0 } =
                        worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: i32) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        _rt::as_i64(target_version),
                        mode.clone() as i32,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 64]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<*mut u8>();
                    let l7 = *ptr0.add(28).cast::<usize>();
                    let base11 = l6;
                    let len11 = l7;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 8);
                        let e11 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                            _rt::string_lift(bytes10)
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 8, 4);
                    let l12 = *ptr0.add(32).cast::<*mut u8>();
                    let l13 = *ptr0.add(36).cast::<usize>();
                    let base20 = l12;
                    let len20 = l13;
                    let mut result20 = _rt::Vec::with_capacity(len20);
                    for i in 0..len20 {
                        let base = base20.add(i * 16);
                        let e20 = {
                            let l14 = *base.add(0).cast::<*mut u8>();
                            let l15 = *base.add(4).cast::<usize>();
                            let len16 = l15;
                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                            let l17 = *base.add(8).cast::<*mut u8>();
                            let l18 = *base.add(12).cast::<usize>();
                            let len19 = l18;
                            let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);

                            (_rt::string_lift(bytes16), _rt::string_lift(bytes19))
                        };
                        result20.push(e20);
                    }
                    _rt::cabi_dealloc(base20, len20 * 16, 4);
                    let l21 = i32::from(*ptr0.add(40).cast::<u8>());
                    let l22 = *ptr0.add(48).cast::<i64>();
                    let l23 = *ptr0.add(56).cast::<i64>();
                    WorkerMetadata {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid { high_bits: l1 as u64, low_bits: l2 as u64 },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        args: result11,
                        env: result20,
                        status: WorkerStatus::_lift(l21 as u8),
                        component_version: l22 as u64,
                        retry_count: l23 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 72]);
                    let WorkerId { component_id: component_id0, worker_name: worker_name0 } =
                        worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@0.2.0")]
                    extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => None,
                        1 => {
                            let e = {
                                let l6 = *ptr4.add(8).cast::<i64>();
                                let l7 = *ptr4.add(16).cast::<i64>();
                                let l8 = *ptr4.add(24).cast::<*mut u8>();
                                let l9 = *ptr4.add(28).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                                let l11 = *ptr4.add(32).cast::<*mut u8>();
                                let l12 = *ptr4.add(36).cast::<usize>();
                                let base16 = l11;
                                let len16 = l12;
                                let mut result16 = _rt::Vec::with_capacity(len16);
                                for i in 0..len16 {
                                    let base = base16.add(i * 8);
                                    let e16 = {
                                        let l13 = *base.add(0).cast::<*mut u8>();
                                        let l14 = *base.add(4).cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 =
                                            _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                        _rt::string_lift(bytes15)
                                    };
                                    result16.push(e16);
                                }
                                _rt::cabi_dealloc(base16, len16 * 8, 4);
                                let l17 = *ptr4.add(40).cast::<*mut u8>();
                                let l18 = *ptr4.add(44).cast::<usize>();
                                let base25 = l17;
                                let len25 = l18;
                                let mut result25 = _rt::Vec::with_capacity(len25);
                                for i in 0..len25 {
                                    let base = base25.add(i * 16);
                                    let e25 = {
                                        let l19 = *base.add(0).cast::<*mut u8>();
                                        let l20 = *base.add(4).cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 =
                                            _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                                        let l22 = *base.add(8).cast::<*mut u8>();
                                        let l23 = *base.add(12).cast::<usize>();
                                        let len24 = l23;
                                        let bytes24 =
                                            _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                        (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                                    };
                                    result25.push(e25);
                                }
                                _rt::cabi_dealloc(base25, len25 * 16, 4);
                                let l26 = i32::from(*ptr4.add(48).cast::<u8>());
                                let l27 = *ptr4.add(56).cast::<i64>();
                                let l28 = *ptr4.add(64).cast::<i64>();

                                WorkerMetadata {
                                    worker_id: WorkerId {
                                        component_id: ComponentId {
                                            uuid: Uuid {
                                                high_bits: l6 as u64,
                                                low_bits: l7 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes10),
                                    },
                                    args: result16,
                                    env: result25,
                                    status: WorkerStatus::_lift(l26 as u8),
                                    component_version: l27 as u64,
                                    retry_count: l28 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod order {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum OrderStatus {
                New,
                Shipped,
                Cancelled,
            }
            impl ::core::fmt::Debug for OrderStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        OrderStatus::New => f.debug_tuple("OrderStatus::New").finish(),
                        OrderStatus::Shipped => f.debug_tuple("OrderStatus::Shipped").finish(),
                        OrderStatus::Cancelled => f.debug_tuple("OrderStatus::Cancelled").finish(),
                    }
                }
            }

            impl OrderStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> OrderStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => OrderStatus::New,
                        1 => OrderStatus::Shipped,
                        2 => OrderStatus::Cancelled,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Address {
                pub street1: _rt::String,
                pub street2: Option<_rt::String>,
                pub city: _rt::String,
                pub state_or_region: _rt::String,
                pub country: _rt::String,
                pub postal_code: _rt::String,
                pub name: Option<_rt::String>,
                pub business_name: Option<_rt::String>,
                pub phone_number: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Address {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Address")
                        .field("street1", &self.street1)
                        .field("street2", &self.street2)
                        .field("city", &self.city)
                        .field("state-or-region", &self.state_or_region)
                        .field("country", &self.country)
                        .field("postal-code", &self.postal_code)
                        .field("name", &self.name)
                        .field("business-name", &self.business_name)
                        .field("phone-number", &self.phone_number)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct OrderItem {
                pub product_id: _rt::String,
                pub name: _rt::String,
                pub price: f32,
                pub quantity: u32,
            }
            impl ::core::fmt::Debug for OrderItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("OrderItem")
                        .field("product-id", &self.product_id)
                        .field("name", &self.name)
                        .field("price", &self.price)
                        .field("quantity", &self.quantity)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Order {
                pub order_id: _rt::String,
                pub user_id: _rt::String,
                pub order_status: OrderStatus,
                pub items: _rt::Vec<OrderItem>,
                pub billing_address: Option<Address>,
                pub shipping_address: Option<Address>,
                pub total: f32,
                pub currency: _rt::String,
                pub timestamp: u64,
            }
            impl ::core::fmt::Debug for Order {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Order")
                        .field("order-id", &self.order_id)
                        .field("user-id", &self.user_id)
                        .field("order-status", &self.order_status)
                        .field("items", &self.items)
                        .field("billing-address", &self.billing_address)
                        .field("shipping-address", &self.shipping_address)
                        .field("total", &self.total)
                        .field("currency", &self.currency)
                        .field("timestamp", &self.timestamp)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateOrder {
                pub user_id: _rt::String,
                pub items: _rt::Vec<OrderItem>,
                pub billing_address: Option<Address>,
                pub shipping_address: Option<Address>,
                pub total: f32,
                pub currency: _rt::String,
                pub timestamp: u64,
            }
            impl ::core::fmt::Debug for CreateOrder {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("CreateOrder")
                        .field("user-id", &self.user_id)
                        .field("items", &self.items)
                        .field("billing-address", &self.billing_address)
                        .field("shipping-address", &self.shipping_address)
                        .field("total", &self.total)
                        .field("currency", &self.currency)
                        .field("timestamp", &self.timestamp)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ProductNotFoundError {
                pub message: _rt::String,
                pub product_id: _rt::String,
            }
            impl ::core::fmt::Debug for ProductNotFoundError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ProductNotFoundError")
                        .field("message", &self.message)
                        .field("product-id", &self.product_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct PricingNotFoundError {
                pub message: _rt::String,
                pub product_id: _rt::String,
            }
            impl ::core::fmt::Debug for PricingNotFoundError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PricingNotFoundError")
                        .field("message", &self.message)
                        .field("product-id", &self.product_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AddressNotValidError {
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for AddressNotValidError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("AddressNotValidError").field("message", &self.message).finish()
                }
            }
            #[derive(Clone)]
            pub struct ItemNotFoundError {
                pub message: _rt::String,
                pub product_id: _rt::String,
            }
            impl ::core::fmt::Debug for ItemNotFoundError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ItemNotFoundError")
                        .field("message", &self.message)
                        .field("product-id", &self.product_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct EmptyItemsError {
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for EmptyItemsError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EmptyItemsError").field("message", &self.message).finish()
                }
            }
            #[derive(Clone)]
            pub struct ActionNotAllowedError {
                pub message: _rt::String,
                pub status: OrderStatus,
            }
            impl ::core::fmt::Debug for ActionNotAllowedError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ActionNotAllowedError")
                        .field("message", &self.message)
                        .field("status", &self.status)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum Error {
                ProductNotFound(ProductNotFoundError),
                PricingNotFound(PricingNotFoundError),
                AddressNotValid(AddressNotValidError),
                ItemNotFound(ItemNotFoundError),
                EmptyItems(EmptyItemsError),
                ActionNotAllowed(ActionNotAllowedError),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ProductNotFound(e) => {
                            f.debug_tuple("Error::ProductNotFound").field(e).finish()
                        }
                        Error::PricingNotFound(e) => {
                            f.debug_tuple("Error::PricingNotFound").field(e).finish()
                        }
                        Error::AddressNotValid(e) => {
                            f.debug_tuple("Error::AddressNotValid").field(e).finish()
                        }
                        Error::ItemNotFound(e) => {
                            f.debug_tuple("Error::ItemNotFound").field(e).finish()
                        }
                        Error::EmptyItems(e) => {
                            f.debug_tuple("Error::EmptyItems").field(e).finish()
                        }
                        Error::ActionNotAllowed(e) => {
                            f.debug_tuple("Error::ActionNotAllowed").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_order(data: &CreateOrder) {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 224]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 224]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let CreateOrder {
                        user_id: user_id1,
                        items: items1,
                        billing_address: billing_address1,
                        shipping_address: shipping_address1,
                        total: total1,
                        currency: currency1,
                        timestamp: timestamp1,
                    } = data;
                    let vec2 = user_id1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(4).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    let vec6 = items1;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 24, 4);
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6.add(i * 24);
                        {
                            let OrderItem {
                                product_id: product_id3,
                                name: name3,
                                price: price3,
                                quantity: quantity3,
                            } = e;
                            let vec4 = product_id3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base.add(4).cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = name3;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(12).cast::<usize>() = len5;
                            *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                            *base.add(16).cast::<f32>() = _rt::as_f32(price3);
                            *base.add(20).cast::<i32>() = _rt::as_i32(quantity3);
                        }
                    }
                    *ptr0.add(12).cast::<usize>() = len6;
                    *ptr0.add(8).cast::<*mut u8>() = result6;
                    match billing_address1 {
                        Some(e) => {
                            *ptr0.add(16).cast::<u8>() = (1i32) as u8;
                            let Address {
                                street1: street17,
                                street2: street27,
                                city: city7,
                                state_or_region: state_or_region7,
                                country: country7,
                                postal_code: postal_code7,
                                name: name7,
                                business_name: business_name7,
                                phone_number: phone_number7,
                            } = e;
                            let vec8 = street17;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *ptr0.add(24).cast::<usize>() = len8;
                            *ptr0.add(20).cast::<*mut u8>() = ptr8.cast_mut();
                            match street27 {
                                Some(e) => {
                                    *ptr0.add(28).cast::<u8>() = (1i32) as u8;
                                    let vec9 = e;
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    *ptr0.add(36).cast::<usize>() = len9;
                                    *ptr0.add(32).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr0.add(28).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec10 = city7;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0.add(44).cast::<usize>() = len10;
                            *ptr0.add(40).cast::<*mut u8>() = ptr10.cast_mut();
                            let vec11 = state_or_region7;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            *ptr0.add(52).cast::<usize>() = len11;
                            *ptr0.add(48).cast::<*mut u8>() = ptr11.cast_mut();
                            let vec12 = country7;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            *ptr0.add(60).cast::<usize>() = len12;
                            *ptr0.add(56).cast::<*mut u8>() = ptr12.cast_mut();
                            let vec13 = postal_code7;
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            *ptr0.add(68).cast::<usize>() = len13;
                            *ptr0.add(64).cast::<*mut u8>() = ptr13.cast_mut();
                            match name7 {
                                Some(e) => {
                                    *ptr0.add(72).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *ptr0.add(80).cast::<usize>() = len14;
                                    *ptr0.add(76).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *ptr0.add(72).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match business_name7 {
                                Some(e) => {
                                    *ptr0.add(84).cast::<u8>() = (1i32) as u8;
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *ptr0.add(92).cast::<usize>() = len15;
                                    *ptr0.add(88).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                None => {
                                    *ptr0.add(84).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match phone_number7 {
                                Some(e) => {
                                    *ptr0.add(96).cast::<u8>() = (1i32) as u8;
                                    let vec16 = e;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *ptr0.add(104).cast::<usize>() = len16;
                                    *ptr0.add(100).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                None => {
                                    *ptr0.add(96).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(16).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match shipping_address1 {
                        Some(e) => {
                            *ptr0.add(108).cast::<u8>() = (1i32) as u8;
                            let Address {
                                street1: street117,
                                street2: street217,
                                city: city17,
                                state_or_region: state_or_region17,
                                country: country17,
                                postal_code: postal_code17,
                                name: name17,
                                business_name: business_name17,
                                phone_number: phone_number17,
                            } = e;
                            let vec18 = street117;
                            let ptr18 = vec18.as_ptr().cast::<u8>();
                            let len18 = vec18.len();
                            *ptr0.add(116).cast::<usize>() = len18;
                            *ptr0.add(112).cast::<*mut u8>() = ptr18.cast_mut();
                            match street217 {
                                Some(e) => {
                                    *ptr0.add(120).cast::<u8>() = (1i32) as u8;
                                    let vec19 = e;
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    *ptr0.add(128).cast::<usize>() = len19;
                                    *ptr0.add(124).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                None => {
                                    *ptr0.add(120).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec20 = city17;
                            let ptr20 = vec20.as_ptr().cast::<u8>();
                            let len20 = vec20.len();
                            *ptr0.add(136).cast::<usize>() = len20;
                            *ptr0.add(132).cast::<*mut u8>() = ptr20.cast_mut();
                            let vec21 = state_or_region17;
                            let ptr21 = vec21.as_ptr().cast::<u8>();
                            let len21 = vec21.len();
                            *ptr0.add(144).cast::<usize>() = len21;
                            *ptr0.add(140).cast::<*mut u8>() = ptr21.cast_mut();
                            let vec22 = country17;
                            let ptr22 = vec22.as_ptr().cast::<u8>();
                            let len22 = vec22.len();
                            *ptr0.add(152).cast::<usize>() = len22;
                            *ptr0.add(148).cast::<*mut u8>() = ptr22.cast_mut();
                            let vec23 = postal_code17;
                            let ptr23 = vec23.as_ptr().cast::<u8>();
                            let len23 = vec23.len();
                            *ptr0.add(160).cast::<usize>() = len23;
                            *ptr0.add(156).cast::<*mut u8>() = ptr23.cast_mut();
                            match name17 {
                                Some(e) => {
                                    *ptr0.add(164).cast::<u8>() = (1i32) as u8;
                                    let vec24 = e;
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    *ptr0.add(172).cast::<usize>() = len24;
                                    *ptr0.add(168).cast::<*mut u8>() = ptr24.cast_mut();
                                }
                                None => {
                                    *ptr0.add(164).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match business_name17 {
                                Some(e) => {
                                    *ptr0.add(176).cast::<u8>() = (1i32) as u8;
                                    let vec25 = e;
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    *ptr0.add(184).cast::<usize>() = len25;
                                    *ptr0.add(180).cast::<*mut u8>() = ptr25.cast_mut();
                                }
                                None => {
                                    *ptr0.add(176).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match phone_number17 {
                                Some(e) => {
                                    *ptr0.add(188).cast::<u8>() = (1i32) as u8;
                                    let vec26 = e;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *ptr0.add(196).cast::<usize>() = len26;
                                    *ptr0.add(192).cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                None => {
                                    *ptr0.add(188).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(108).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    *ptr0.add(200).cast::<f32>() = _rt::as_f32(total1);
                    let vec27 = currency1;
                    let ptr27 = vec27.as_ptr().cast::<u8>();
                    let len27 = vec27.len();
                    *ptr0.add(208).cast::<usize>() = len27;
                    *ptr0.add(204).cast::<*mut u8>() = ptr27.cast_mut();
                    *ptr0.add(216).cast::<i64>() = _rt::as_i64(timestamp1);

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "initialize-order"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_item(product_id: &str, quantity: u32) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = product_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "add-item"]
                        fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, _rt::as_i32(&quantity), ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v32 = match l3 {
                                    0 => {
                                        let e32 = {
                                            let l4 = *ptr1.add(8).cast::<*mut u8>();
                                            let l5 = *ptr1.add(12).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 =
                                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                            let l7 = *ptr1.add(16).cast::<*mut u8>();
                                            let l8 = *ptr1.add(20).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes6),
                                                product_id: _rt::string_lift(bytes9),
                                            }
                                        };
                                        Error::ProductNotFound(e32)
                                    }
                                    1 => {
                                        let e32 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                                            let l13 = *ptr1.add(16).cast::<*mut u8>();
                                            let l14 = *ptr1.add(20).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes12),
                                                product_id: _rt::string_lift(bytes15),
                                            }
                                        };
                                        Error::PricingNotFound(e32)
                                    }
                                    2 => {
                                        let e32 = {
                                            let l16 = *ptr1.add(8).cast::<*mut u8>();
                                            let l17 = *ptr1.add(12).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes18),
                                            }
                                        };
                                        Error::AddressNotValid(e32)
                                    }
                                    3 => {
                                        let e32 = {
                                            let l19 = *ptr1.add(8).cast::<*mut u8>();
                                            let l20 = *ptr1.add(12).cast::<usize>();
                                            let len21 = l20;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                                            let l22 = *ptr1.add(16).cast::<*mut u8>();
                                            let l23 = *ptr1.add(20).cast::<usize>();
                                            let len24 = l23;
                                            let bytes24 =
                                                _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes21),
                                                product_id: _rt::string_lift(bytes24),
                                            }
                                        };
                                        Error::ItemNotFound(e32)
                                    }
                                    4 => {
                                        let e32 = {
                                            let l25 = *ptr1.add(8).cast::<*mut u8>();
                                            let l26 = *ptr1.add(12).cast::<usize>();
                                            let len27 = l26;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                            EmptyItemsError { message: _rt::string_lift(bytes27) }
                                        };
                                        Error::EmptyItems(e32)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e32 = {
                                            let l28 = *ptr1.add(8).cast::<*mut u8>();
                                            let l29 = *ptr1.add(12).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 =
                                                _rt::Vec::from_raw_parts(l28.cast(), len30, len30);
                                            let l31 = i32::from(*ptr1.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes30),
                                                status: OrderStatus::_lift(l31 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e32)
                                    }
                                };

                                v32
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_item(product_id: &str) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = product_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "remove-item"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v32 = match l3 {
                                    0 => {
                                        let e32 = {
                                            let l4 = *ptr1.add(8).cast::<*mut u8>();
                                            let l5 = *ptr1.add(12).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 =
                                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                            let l7 = *ptr1.add(16).cast::<*mut u8>();
                                            let l8 = *ptr1.add(20).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes6),
                                                product_id: _rt::string_lift(bytes9),
                                            }
                                        };
                                        Error::ProductNotFound(e32)
                                    }
                                    1 => {
                                        let e32 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                                            let l13 = *ptr1.add(16).cast::<*mut u8>();
                                            let l14 = *ptr1.add(20).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes12),
                                                product_id: _rt::string_lift(bytes15),
                                            }
                                        };
                                        Error::PricingNotFound(e32)
                                    }
                                    2 => {
                                        let e32 = {
                                            let l16 = *ptr1.add(8).cast::<*mut u8>();
                                            let l17 = *ptr1.add(12).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes18),
                                            }
                                        };
                                        Error::AddressNotValid(e32)
                                    }
                                    3 => {
                                        let e32 = {
                                            let l19 = *ptr1.add(8).cast::<*mut u8>();
                                            let l20 = *ptr1.add(12).cast::<usize>();
                                            let len21 = l20;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                                            let l22 = *ptr1.add(16).cast::<*mut u8>();
                                            let l23 = *ptr1.add(20).cast::<usize>();
                                            let len24 = l23;
                                            let bytes24 =
                                                _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes21),
                                                product_id: _rt::string_lift(bytes24),
                                            }
                                        };
                                        Error::ItemNotFound(e32)
                                    }
                                    4 => {
                                        let e32 = {
                                            let l25 = *ptr1.add(8).cast::<*mut u8>();
                                            let l26 = *ptr1.add(12).cast::<usize>();
                                            let len27 = l26;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                            EmptyItemsError { message: _rt::string_lift(bytes27) }
                                        };
                                        Error::EmptyItems(e32)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e32 = {
                                            let l28 = *ptr1.add(8).cast::<*mut u8>();
                                            let l29 = *ptr1.add(12).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 =
                                                _rt::Vec::from_raw_parts(l28.cast(), len30, len30);
                                            let l31 = i32::from(*ptr1.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes30),
                                                status: OrderStatus::_lift(l31 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e32)
                                    }
                                };

                                v32
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_item_quantity(product_id: &str, quantity: u32) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = product_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "update-item-quantity"]
                        fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, _rt::as_i32(&quantity), ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let v32 = match l3 {
                                    0 => {
                                        let e32 = {
                                            let l4 = *ptr1.add(8).cast::<*mut u8>();
                                            let l5 = *ptr1.add(12).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 =
                                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                            let l7 = *ptr1.add(16).cast::<*mut u8>();
                                            let l8 = *ptr1.add(20).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes6),
                                                product_id: _rt::string_lift(bytes9),
                                            }
                                        };
                                        Error::ProductNotFound(e32)
                                    }
                                    1 => {
                                        let e32 = {
                                            let l10 = *ptr1.add(8).cast::<*mut u8>();
                                            let l11 = *ptr1.add(12).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                                            let l13 = *ptr1.add(16).cast::<*mut u8>();
                                            let l14 = *ptr1.add(20).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes12),
                                                product_id: _rt::string_lift(bytes15),
                                            }
                                        };
                                        Error::PricingNotFound(e32)
                                    }
                                    2 => {
                                        let e32 = {
                                            let l16 = *ptr1.add(8).cast::<*mut u8>();
                                            let l17 = *ptr1.add(12).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes18),
                                            }
                                        };
                                        Error::AddressNotValid(e32)
                                    }
                                    3 => {
                                        let e32 = {
                                            let l19 = *ptr1.add(8).cast::<*mut u8>();
                                            let l20 = *ptr1.add(12).cast::<usize>();
                                            let len21 = l20;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                                            let l22 = *ptr1.add(16).cast::<*mut u8>();
                                            let l23 = *ptr1.add(20).cast::<usize>();
                                            let len24 = l23;
                                            let bytes24 =
                                                _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes21),
                                                product_id: _rt::string_lift(bytes24),
                                            }
                                        };
                                        Error::ItemNotFound(e32)
                                    }
                                    4 => {
                                        let e32 = {
                                            let l25 = *ptr1.add(8).cast::<*mut u8>();
                                            let l26 = *ptr1.add(12).cast::<usize>();
                                            let len27 = l26;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                            EmptyItemsError { message: _rt::string_lift(bytes27) }
                                        };
                                        Error::EmptyItems(e32)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e32 = {
                                            let l28 = *ptr1.add(8).cast::<*mut u8>();
                                            let l29 = *ptr1.add(12).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 =
                                                _rt::Vec::from_raw_parts(l28.cast(), len30, len30);
                                            let l31 = i32::from(*ptr1.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes30),
                                                status: OrderStatus::_lift(l31 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e32)
                                    }
                                };

                                v32
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_shipping_address(address: &Address) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 88]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 88]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let Address {
                        street1: street11,
                        street2: street21,
                        city: city1,
                        state_or_region: state_or_region1,
                        country: country1,
                        postal_code: postal_code1,
                        name: name1,
                        business_name: business_name1,
                        phone_number: phone_number1,
                    } = address;
                    let vec2 = street11;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(4).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match street21 {
                        Some(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0.add(16).cast::<usize>() = len3;
                            *ptr0.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec4 = city1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    *ptr0.add(24).cast::<usize>() = len4;
                    *ptr0.add(20).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec5 = state_or_region1;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    *ptr0.add(32).cast::<usize>() = len5;
                    *ptr0.add(28).cast::<*mut u8>() = ptr5.cast_mut();
                    let vec6 = country1;
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    *ptr0.add(40).cast::<usize>() = len6;
                    *ptr0.add(36).cast::<*mut u8>() = ptr6.cast_mut();
                    let vec7 = postal_code1;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    *ptr0.add(48).cast::<usize>() = len7;
                    *ptr0.add(44).cast::<*mut u8>() = ptr7.cast_mut();
                    match name1 {
                        Some(e) => {
                            *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                            let vec8 = e;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *ptr0.add(60).cast::<usize>() = len8;
                            *ptr0.add(56).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match business_name1 {
                        Some(e) => {
                            *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                            let vec9 = e;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *ptr0.add(72).cast::<usize>() = len9;
                            *ptr0.add(68).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                        None => {
                            *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match phone_number1 {
                        Some(e) => {
                            *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                            let vec10 = e;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0.add(84).cast::<usize>() = len10;
                            *ptr0.add(80).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "update-shipping-address"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr11);
                    let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                    match l12 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l13 = i32::from(*ptr11.add(4).cast::<u8>());
                                let v42 = match l13 {
                                    0 => {
                                        let e42 = {
                                            let l14 = *ptr11.add(8).cast::<*mut u8>();
                                            let l15 = *ptr11.add(12).cast::<usize>();
                                            let len16 = l15;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                                            let l17 = *ptr11.add(16).cast::<*mut u8>();
                                            let l18 = *ptr11.add(20).cast::<usize>();
                                            let len19 = l18;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(l17.cast(), len19, len19);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes16),
                                                product_id: _rt::string_lift(bytes19),
                                            }
                                        };
                                        Error::ProductNotFound(e42)
                                    }
                                    1 => {
                                        let e42 = {
                                            let l20 = *ptr11.add(8).cast::<*mut u8>();
                                            let l21 = *ptr11.add(12).cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(l20.cast(), len22, len22);
                                            let l23 = *ptr11.add(16).cast::<*mut u8>();
                                            let l24 = *ptr11.add(20).cast::<usize>();
                                            let len25 = l24;
                                            let bytes25 =
                                                _rt::Vec::from_raw_parts(l23.cast(), len25, len25);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes22),
                                                product_id: _rt::string_lift(bytes25),
                                            }
                                        };
                                        Error::PricingNotFound(e42)
                                    }
                                    2 => {
                                        let e42 = {
                                            let l26 = *ptr11.add(8).cast::<*mut u8>();
                                            let l27 = *ptr11.add(12).cast::<usize>();
                                            let len28 = l27;
                                            let bytes28 =
                                                _rt::Vec::from_raw_parts(l26.cast(), len28, len28);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes28),
                                            }
                                        };
                                        Error::AddressNotValid(e42)
                                    }
                                    3 => {
                                        let e42 = {
                                            let l29 = *ptr11.add(8).cast::<*mut u8>();
                                            let l30 = *ptr11.add(12).cast::<usize>();
                                            let len31 = l30;
                                            let bytes31 =
                                                _rt::Vec::from_raw_parts(l29.cast(), len31, len31);
                                            let l32 = *ptr11.add(16).cast::<*mut u8>();
                                            let l33 = *ptr11.add(20).cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 =
                                                _rt::Vec::from_raw_parts(l32.cast(), len34, len34);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes31),
                                                product_id: _rt::string_lift(bytes34),
                                            }
                                        };
                                        Error::ItemNotFound(e42)
                                    }
                                    4 => {
                                        let e42 = {
                                            let l35 = *ptr11.add(8).cast::<*mut u8>();
                                            let l36 = *ptr11.add(12).cast::<usize>();
                                            let len37 = l36;
                                            let bytes37 =
                                                _rt::Vec::from_raw_parts(l35.cast(), len37, len37);

                                            EmptyItemsError { message: _rt::string_lift(bytes37) }
                                        };
                                        Error::EmptyItems(e42)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e42 = {
                                            let l38 = *ptr11.add(8).cast::<*mut u8>();
                                            let l39 = *ptr11.add(12).cast::<usize>();
                                            let len40 = l39;
                                            let bytes40 =
                                                _rt::Vec::from_raw_parts(l38.cast(), len40, len40);
                                            let l41 = i32::from(*ptr11.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes40),
                                                status: OrderStatus::_lift(l41 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e42)
                                    }
                                };

                                v42
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_billing_address(address: &Address) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 88]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 88]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let Address {
                        street1: street11,
                        street2: street21,
                        city: city1,
                        state_or_region: state_or_region1,
                        country: country1,
                        postal_code: postal_code1,
                        name: name1,
                        business_name: business_name1,
                        phone_number: phone_number1,
                    } = address;
                    let vec2 = street11;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(4).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match street21 {
                        Some(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0.add(16).cast::<usize>() = len3;
                            *ptr0.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec4 = city1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    *ptr0.add(24).cast::<usize>() = len4;
                    *ptr0.add(20).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec5 = state_or_region1;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    *ptr0.add(32).cast::<usize>() = len5;
                    *ptr0.add(28).cast::<*mut u8>() = ptr5.cast_mut();
                    let vec6 = country1;
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    *ptr0.add(40).cast::<usize>() = len6;
                    *ptr0.add(36).cast::<*mut u8>() = ptr6.cast_mut();
                    let vec7 = postal_code1;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    *ptr0.add(48).cast::<usize>() = len7;
                    *ptr0.add(44).cast::<*mut u8>() = ptr7.cast_mut();
                    match name1 {
                        Some(e) => {
                            *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                            let vec8 = e;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *ptr0.add(60).cast::<usize>() = len8;
                            *ptr0.add(56).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match business_name1 {
                        Some(e) => {
                            *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                            let vec9 = e;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *ptr0.add(72).cast::<usize>() = len9;
                            *ptr0.add(68).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                        None => {
                            *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match phone_number1 {
                        Some(e) => {
                            *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                            let vec10 = e;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0.add(84).cast::<usize>() = len10;
                            *ptr0.add(80).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "update-billing-address"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr11);
                    let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                    match l12 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l13 = i32::from(*ptr11.add(4).cast::<u8>());
                                let v42 = match l13 {
                                    0 => {
                                        let e42 = {
                                            let l14 = *ptr11.add(8).cast::<*mut u8>();
                                            let l15 = *ptr11.add(12).cast::<usize>();
                                            let len16 = l15;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                                            let l17 = *ptr11.add(16).cast::<*mut u8>();
                                            let l18 = *ptr11.add(20).cast::<usize>();
                                            let len19 = l18;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(l17.cast(), len19, len19);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes16),
                                                product_id: _rt::string_lift(bytes19),
                                            }
                                        };
                                        Error::ProductNotFound(e42)
                                    }
                                    1 => {
                                        let e42 = {
                                            let l20 = *ptr11.add(8).cast::<*mut u8>();
                                            let l21 = *ptr11.add(12).cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(l20.cast(), len22, len22);
                                            let l23 = *ptr11.add(16).cast::<*mut u8>();
                                            let l24 = *ptr11.add(20).cast::<usize>();
                                            let len25 = l24;
                                            let bytes25 =
                                                _rt::Vec::from_raw_parts(l23.cast(), len25, len25);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes22),
                                                product_id: _rt::string_lift(bytes25),
                                            }
                                        };
                                        Error::PricingNotFound(e42)
                                    }
                                    2 => {
                                        let e42 = {
                                            let l26 = *ptr11.add(8).cast::<*mut u8>();
                                            let l27 = *ptr11.add(12).cast::<usize>();
                                            let len28 = l27;
                                            let bytes28 =
                                                _rt::Vec::from_raw_parts(l26.cast(), len28, len28);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes28),
                                            }
                                        };
                                        Error::AddressNotValid(e42)
                                    }
                                    3 => {
                                        let e42 = {
                                            let l29 = *ptr11.add(8).cast::<*mut u8>();
                                            let l30 = *ptr11.add(12).cast::<usize>();
                                            let len31 = l30;
                                            let bytes31 =
                                                _rt::Vec::from_raw_parts(l29.cast(), len31, len31);
                                            let l32 = *ptr11.add(16).cast::<*mut u8>();
                                            let l33 = *ptr11.add(20).cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 =
                                                _rt::Vec::from_raw_parts(l32.cast(), len34, len34);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes31),
                                                product_id: _rt::string_lift(bytes34),
                                            }
                                        };
                                        Error::ItemNotFound(e42)
                                    }
                                    4 => {
                                        let e42 = {
                                            let l35 = *ptr11.add(8).cast::<*mut u8>();
                                            let l36 = *ptr11.add(12).cast::<usize>();
                                            let len37 = l36;
                                            let bytes37 =
                                                _rt::Vec::from_raw_parts(l35.cast(), len37, len37);

                                            EmptyItemsError { message: _rt::string_lift(bytes37) }
                                        };
                                        Error::EmptyItems(e42)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e42 = {
                                            let l38 = *ptr11.add(8).cast::<*mut u8>();
                                            let l39 = *ptr11.add(12).cast::<usize>();
                                            let len40 = l39;
                                            let bytes40 =
                                                _rt::Vec::from_raw_parts(l38.cast(), len40, len40);
                                            let l41 = i32::from(*ptr11.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes40),
                                                status: OrderStatus::_lift(l41 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e42)
                                    }
                                };

                                v42
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn ship_order() -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "ship-order"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                let v31 = match l2 {
                                    0 => {
                                        let e31 = {
                                            let l3 = *ptr0.add(8).cast::<*mut u8>();
                                            let l4 = *ptr0.add(12).cast::<usize>();
                                            let len5 = l4;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                            let l6 = *ptr0.add(16).cast::<*mut u8>();
                                            let l7 = *ptr0.add(20).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes5),
                                                product_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        Error::ProductNotFound(e31)
                                    }
                                    1 => {
                                        let e31 = {
                                            let l9 = *ptr0.add(8).cast::<*mut u8>();
                                            let l10 = *ptr0.add(12).cast::<usize>();
                                            let len11 = l10;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                                            let l12 = *ptr0.add(16).cast::<*mut u8>();
                                            let l13 = *ptr0.add(20).cast::<usize>();
                                            let len14 = l13;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes11),
                                                product_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        Error::PricingNotFound(e31)
                                    }
                                    2 => {
                                        let e31 = {
                                            let l15 = *ptr0.add(8).cast::<*mut u8>();
                                            let l16 = *ptr0.add(12).cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes17),
                                            }
                                        };
                                        Error::AddressNotValid(e31)
                                    }
                                    3 => {
                                        let e31 = {
                                            let l18 = *ptr0.add(8).cast::<*mut u8>();
                                            let l19 = *ptr0.add(12).cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(l18.cast(), len20, len20);
                                            let l21 = *ptr0.add(16).cast::<*mut u8>();
                                            let l22 = *ptr0.add(20).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 =
                                                _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes20),
                                                product_id: _rt::string_lift(bytes23),
                                            }
                                        };
                                        Error::ItemNotFound(e31)
                                    }
                                    4 => {
                                        let e31 = {
                                            let l24 = *ptr0.add(8).cast::<*mut u8>();
                                            let l25 = *ptr0.add(12).cast::<usize>();
                                            let len26 = l25;
                                            let bytes26 =
                                                _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                            EmptyItemsError { message: _rt::string_lift(bytes26) }
                                        };
                                        Error::EmptyItems(e31)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e31 = {
                                            let l27 = *ptr0.add(8).cast::<*mut u8>();
                                            let l28 = *ptr0.add(12).cast::<usize>();
                                            let len29 = l28;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(l27.cast(), len29, len29);
                                            let l30 = i32::from(*ptr0.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes29),
                                                status: OrderStatus::_lift(l30 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e31)
                                    }
                                };

                                v31
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn cancel_order() -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "cancel-order"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                let v31 = match l2 {
                                    0 => {
                                        let e31 = {
                                            let l3 = *ptr0.add(8).cast::<*mut u8>();
                                            let l4 = *ptr0.add(12).cast::<usize>();
                                            let len5 = l4;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                            let l6 = *ptr0.add(16).cast::<*mut u8>();
                                            let l7 = *ptr0.add(20).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                            ProductNotFoundError {
                                                message: _rt::string_lift(bytes5),
                                                product_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        Error::ProductNotFound(e31)
                                    }
                                    1 => {
                                        let e31 = {
                                            let l9 = *ptr0.add(8).cast::<*mut u8>();
                                            let l10 = *ptr0.add(12).cast::<usize>();
                                            let len11 = l10;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                                            let l12 = *ptr0.add(16).cast::<*mut u8>();
                                            let l13 = *ptr0.add(20).cast::<usize>();
                                            let len14 = l13;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                                            PricingNotFoundError {
                                                message: _rt::string_lift(bytes11),
                                                product_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        Error::PricingNotFound(e31)
                                    }
                                    2 => {
                                        let e31 = {
                                            let l15 = *ptr0.add(8).cast::<*mut u8>();
                                            let l16 = *ptr0.add(12).cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                            AddressNotValidError {
                                                message: _rt::string_lift(bytes17),
                                            }
                                        };
                                        Error::AddressNotValid(e31)
                                    }
                                    3 => {
                                        let e31 = {
                                            let l18 = *ptr0.add(8).cast::<*mut u8>();
                                            let l19 = *ptr0.add(12).cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(l18.cast(), len20, len20);
                                            let l21 = *ptr0.add(16).cast::<*mut u8>();
                                            let l22 = *ptr0.add(20).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 =
                                                _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                            ItemNotFoundError {
                                                message: _rt::string_lift(bytes20),
                                                product_id: _rt::string_lift(bytes23),
                                            }
                                        };
                                        Error::ItemNotFound(e31)
                                    }
                                    4 => {
                                        let e31 = {
                                            let l24 = *ptr0.add(8).cast::<*mut u8>();
                                            let l25 = *ptr0.add(12).cast::<usize>();
                                            let len26 = l25;
                                            let bytes26 =
                                                _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                            EmptyItemsError { message: _rt::string_lift(bytes26) }
                                        };
                                        Error::EmptyItems(e31)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e31 = {
                                            let l27 = *ptr0.add(8).cast::<*mut u8>();
                                            let l28 = *ptr0.add(12).cast::<usize>();
                                            let len29 = l28;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(l27.cast(), len29, len29);
                                            let l30 = i32::from(*ptr0.add(16).cast::<u8>());

                                            ActionNotAllowedError {
                                                message: _rt::string_lift(bytes29),
                                                status: OrderStatus::_lift(l30 as u8),
                                            }
                                        };
                                        Error::ActionNotAllowed(e31)
                                    }
                                };

                                v31
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Order> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 240]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 240]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(8).cast::<*mut u8>();
                                let l3 = *ptr0.add(12).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                let l5 = *ptr0.add(16).cast::<*mut u8>();
                                let l6 = *ptr0.add(20).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                let l8 = i32::from(*ptr0.add(24).cast::<u8>());
                                let l9 = *ptr0.add(28).cast::<*mut u8>();
                                let l10 = *ptr0.add(32).cast::<usize>();
                                let base19 = l9;
                                let len19 = l10;
                                let mut result19 = _rt::Vec::with_capacity(len19);
                                for i in 0..len19 {
                                    let base = base19.add(i * 24);
                                    let e19 = {
                                        let l11 = *base.add(0).cast::<*mut u8>();
                                        let l12 = *base.add(4).cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 =
                                            _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                                        let l14 = *base.add(8).cast::<*mut u8>();
                                        let l15 = *base.add(12).cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 =
                                            _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                                        let l17 = *base.add(16).cast::<f32>();
                                        let l18 = *base.add(20).cast::<i32>();

                                        OrderItem {
                                            product_id: _rt::string_lift(bytes13),
                                            name: _rt::string_lift(bytes16),
                                            price: l17,
                                            quantity: l18 as u32,
                                        }
                                    };
                                    result19.push(e19);
                                }
                                _rt::cabi_dealloc(base19, len19 * 24, 4);
                                let l20 = i32::from(*ptr0.add(36).cast::<u8>());
                                let l52 = i32::from(*ptr0.add(128).cast::<u8>());
                                let l84 = *ptr0.add(220).cast::<f32>();
                                let l85 = *ptr0.add(224).cast::<*mut u8>();
                                let l86 = *ptr0.add(228).cast::<usize>();
                                let len87 = l86;
                                let bytes87 = _rt::Vec::from_raw_parts(l85.cast(), len87, len87);
                                let l88 = *ptr0.add(232).cast::<i64>();

                                Order {
                                    order_id: _rt::string_lift(bytes4),
                                    user_id: _rt::string_lift(bytes7),
                                    order_status: OrderStatus::_lift(l8 as u8),
                                    items: result19,
                                    billing_address: match l20 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l21 = *ptr0.add(40).cast::<*mut u8>();
                                                let l22 = *ptr0.add(44).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                let l24 = i32::from(*ptr0.add(48).cast::<u8>());
                                                let l28 = *ptr0.add(60).cast::<*mut u8>();
                                                let l29 = *ptr0.add(64).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                let l31 = *ptr0.add(68).cast::<*mut u8>();
                                                let l32 = *ptr0.add(72).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                let l34 = *ptr0.add(76).cast::<*mut u8>();
                                                let l35 = *ptr0.add(80).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                let l37 = *ptr0.add(84).cast::<*mut u8>();
                                                let l38 = *ptr0.add(88).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                let l40 = i32::from(*ptr0.add(92).cast::<u8>());
                                                let l44 = i32::from(*ptr0.add(104).cast::<u8>());
                                                let l48 = i32::from(*ptr0.add(116).cast::<u8>());

                                                Address {
                                                    street1: _rt::string_lift(bytes23),
                                                    street2: match l24 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l25 =
                                                                    *ptr0.add(52).cast::<*mut u8>();
                                                                let l26 =
                                                                    *ptr0.add(56).cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l25.cast(),
                                                                        len27,
                                                                        len27,
                                                                    );

                                                                _rt::string_lift(bytes27)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    city: _rt::string_lift(bytes30),
                                                    state_or_region: _rt::string_lift(bytes33),
                                                    country: _rt::string_lift(bytes36),
                                                    postal_code: _rt::string_lift(bytes39),
                                                    name: match l40 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l41 =
                                                                    *ptr0.add(96).cast::<*mut u8>();
                                                                let l42 =
                                                                    *ptr0.add(100).cast::<usize>();
                                                                let len43 = l42;
                                                                let bytes43 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l41.cast(),
                                                                        len43,
                                                                        len43,
                                                                    );

                                                                _rt::string_lift(bytes43)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    business_name: match l44 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l45 = *ptr0
                                                                    .add(108)
                                                                    .cast::<*mut u8>();
                                                                let l46 =
                                                                    *ptr0.add(112).cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );

                                                                _rt::string_lift(bytes47)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    phone_number: match l48 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l49 = *ptr0
                                                                    .add(120)
                                                                    .cast::<*mut u8>();
                                                                let l50 =
                                                                    *ptr0.add(124).cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l49.cast(),
                                                                        len51,
                                                                        len51,
                                                                    );

                                                                _rt::string_lift(bytes51)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    shipping_address: match l52 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l53 = *ptr0.add(132).cast::<*mut u8>();
                                                let l54 = *ptr0.add(136).cast::<usize>();
                                                let len55 = l54;
                                                let bytes55 = _rt::Vec::from_raw_parts(
                                                    l53.cast(),
                                                    len55,
                                                    len55,
                                                );
                                                let l56 = i32::from(*ptr0.add(140).cast::<u8>());
                                                let l60 = *ptr0.add(152).cast::<*mut u8>();
                                                let l61 = *ptr0.add(156).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                let l63 = *ptr0.add(160).cast::<*mut u8>();
                                                let l64 = *ptr0.add(164).cast::<usize>();
                                                let len65 = l64;
                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                    l63.cast(),
                                                    len65,
                                                    len65,
                                                );
                                                let l66 = *ptr0.add(168).cast::<*mut u8>();
                                                let l67 = *ptr0.add(172).cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                let l69 = *ptr0.add(176).cast::<*mut u8>();
                                                let l70 = *ptr0.add(180).cast::<usize>();
                                                let len71 = l70;
                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                    l69.cast(),
                                                    len71,
                                                    len71,
                                                );
                                                let l72 = i32::from(*ptr0.add(184).cast::<u8>());
                                                let l76 = i32::from(*ptr0.add(196).cast::<u8>());
                                                let l80 = i32::from(*ptr0.add(208).cast::<u8>());

                                                Address {
                                                    street1: _rt::string_lift(bytes55),
                                                    street2: match l56 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l57 = *ptr0
                                                                    .add(144)
                                                                    .cast::<*mut u8>();
                                                                let l58 =
                                                                    *ptr0.add(148).cast::<usize>();
                                                                let len59 = l58;
                                                                let bytes59 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l57.cast(),
                                                                        len59,
                                                                        len59,
                                                                    );

                                                                _rt::string_lift(bytes59)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    city: _rt::string_lift(bytes62),
                                                    state_or_region: _rt::string_lift(bytes65),
                                                    country: _rt::string_lift(bytes68),
                                                    postal_code: _rt::string_lift(bytes71),
                                                    name: match l72 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l73 = *ptr0
                                                                    .add(188)
                                                                    .cast::<*mut u8>();
                                                                let l74 =
                                                                    *ptr0.add(192).cast::<usize>();
                                                                let len75 = l74;
                                                                let bytes75 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l73.cast(),
                                                                        len75,
                                                                        len75,
                                                                    );

                                                                _rt::string_lift(bytes75)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    business_name: match l76 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l77 = *ptr0
                                                                    .add(200)
                                                                    .cast::<*mut u8>();
                                                                let l78 =
                                                                    *ptr0.add(204).cast::<usize>();
                                                                let len79 = l78;
                                                                let bytes79 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l77.cast(),
                                                                        len79,
                                                                        len79,
                                                                    );

                                                                _rt::string_lift(bytes79)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    phone_number: match l80 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l81 = *ptr0
                                                                    .add(212)
                                                                    .cast::<*mut u8>();
                                                                let l82 =
                                                                    *ptr0.add(216).cast::<usize>();
                                                                let len83 = l82;
                                                                let bytes83 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l81.cast(),
                                                                        len83,
                                                                        len83,
                                                                    );

                                                                _rt::string_lift(bytes83)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    total: l84,
                                    currency: _rt::string_lift(bytes87),
                                    timestamp: l88 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod order_stub {
        #[allow(dead_code, clippy::all)]
        pub mod stub_order {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type GolemRpcUri = super::super::super::golem::rpc::types::Uri;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type Address = super::super::super::golem::order::api::Address;
            pub type Order = super::super::super::golem::order::api::Order;
            pub type CreateOrder = super::super::super::golem::order::api::CreateOrder;
            pub type Error = super::super::super::golem::order::api::Error;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureAddItemResult {
                handle: _rt::Resource<FutureAddItemResult>,
            }

            impl FutureAddItemResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureAddItemResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-add-item-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureRemoveItemResult {
                handle: _rt::Resource<FutureRemoveItemResult>,
            }

            impl FutureRemoveItemResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureRemoveItemResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-remove-item-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureUpdateItemQuantityResult {
                handle: _rt::Resource<FutureUpdateItemQuantityResult>,
            }

            impl FutureUpdateItemQuantityResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureUpdateItemQuantityResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-update-item-quantity-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureUpdateShippingAddressResult {
                handle: _rt::Resource<FutureUpdateShippingAddressResult>,
            }

            impl FutureUpdateShippingAddressResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureUpdateShippingAddressResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-update-shipping-address-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureUpdateBillingAddressResult {
                handle: _rt::Resource<FutureUpdateBillingAddressResult>,
            }

            impl FutureUpdateBillingAddressResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureUpdateBillingAddressResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-update-billing-address-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureShipOrderResult {
                handle: _rt::Resource<FutureShipOrderResult>,
            }

            impl FutureShipOrderResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureShipOrderResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-ship-order-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureCancelOrderResult {
                handle: _rt::Resource<FutureCancelOrderResult>,
            }

            impl FutureCancelOrderResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureCancelOrderResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-cancel-order-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetResult {
                handle: _rt::Resource<FutureGetResult>,
            }

            impl FutureGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }

            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl FutureAddItemResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-add-item-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureAddItemResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-add-item-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureRemoveItemResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-remove-item-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureRemoveItemResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-remove-item-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureUpdateItemQuantityResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-update-item-quantity-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureUpdateItemQuantityResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-update-item-quantity-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureUpdateShippingAddressResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-update-shipping-address-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureUpdateShippingAddressResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-update-shipping-address-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureUpdateBillingAddressResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-update-billing-address-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureUpdateBillingAddressResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-update-billing-address-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureShipOrderResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-ship-order-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureShipOrderResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-ship-order-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureCancelOrderResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-cancel-order-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureCancelOrderResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), Error>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-cancel-order-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                use super::super::super::golem::order::api::Error as V32;
                                                let v32 = match l3 {
                                                    0 => {
                                                        let e32 = {
                                                            let l4 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l5 = *ptr0.add(16).cast::<usize>();
                                                            let len6 = l5;
                                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                                l4.cast(),
                                                                len6,
                                                                len6,
                                                            );
                                                            let l7 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l8 = *ptr0.add(24).cast::<usize>();
                                                            let len9 = l8;
                                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                                l7.cast(),
                                                                len9,
                                                                len9,
                                                            );

                                                            super::super::super::golem::order::api::ProductNotFoundError{
                                    message: _rt::string_lift(bytes6),
                                    product_id: _rt::string_lift(bytes9),
                                  }
                                                        };
                                                        V32::ProductNotFound(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l10 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l11 = *ptr0.add(16).cast::<usize>();
                                                            let len12 = l11;
                                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                                l10.cast(),
                                                                len12,
                                                                len12,
                                                            );
                                                            let l13 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l14 = *ptr0.add(24).cast::<usize>();
                                                            let len15 = l14;
                                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                                l13.cast(),
                                                                len15,
                                                                len15,
                                                            );

                                                            super::super::super::golem::order::api::PricingNotFoundError{
                                    message: _rt::string_lift(bytes12),
                                    product_id: _rt::string_lift(bytes15),
                                  }
                                                        };
                                                        V32::PricingNotFound(e32)
                                                    }
                                                    2 => {
                                                        let e32 = {
                                                            let l16 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(16).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );

                                                            super::super::super::golem::order::api::AddressNotValidError{
                                    message: _rt::string_lift(bytes18),
                                  }
                                                        };
                                                        V32::AddressNotValid(e32)
                                                    }
                                                    3 => {
                                                        let e32 = {
                                                            let l19 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l20 = *ptr0.add(16).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            let l22 =
                                                                *ptr0.add(20).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(24).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );

                                                            super::super::super::golem::order::api::ItemNotFoundError{
                                    message: _rt::string_lift(bytes21),
                                    product_id: _rt::string_lift(bytes24),
                                  }
                                                        };
                                                        V32::ItemNotFound(e32)
                                                    }
                                                    4 => {
                                                        let e32 = {
                                                            let l25 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(16).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );

                                                            super::super::super::golem::order::api::EmptyItemsError{
                                    message: _rt::string_lift(bytes27),
                                  }
                                                        };
                                                        V32::EmptyItems(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 5,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e32 = {
                                                            let l28 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(16).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            let l31 = i32::from(
                                                                *ptr0.add(20).cast::<u8>(),
                                                            );

                                                            super::super::super::golem::order::api::ActionNotAllowedError{
                                    message: _rt::string_lift(bytes30),
                                    status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                  }
                                                        };
                                                        V32::ActionNotAllowed(e32)
                                                    }
                                                };

                                                v32
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<Order>> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 248]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 248]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]future-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());

                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                                let l6 = *ptr0.add(24).cast::<*mut u8>();
                                                let l7 = *ptr0.add(28).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                                                let l9 = i32::from(*ptr0.add(32).cast::<u8>());
                                                let l10 = *ptr0.add(36).cast::<*mut u8>();
                                                let l11 = *ptr0.add(40).cast::<usize>();
                                                let base20 = l10;
                                                let len20 = l11;
                                                let mut result20 = _rt::Vec::with_capacity(len20);
                                                for i in 0..len20 {
                                                    let base = base20.add(i * 24);
                                                    let e20 = {
                                                        let l12 = *base.add(0).cast::<*mut u8>();
                                                        let l13 = *base.add(4).cast::<usize>();
                                                        let len14 = l13;
                                                        let bytes14 = _rt::Vec::from_raw_parts(
                                                            l12.cast(),
                                                            len14,
                                                            len14,
                                                        );
                                                        let l15 = *base.add(8).cast::<*mut u8>();
                                                        let l16 = *base.add(12).cast::<usize>();
                                                        let len17 = l16;
                                                        let bytes17 = _rt::Vec::from_raw_parts(
                                                            l15.cast(),
                                                            len17,
                                                            len17,
                                                        );
                                                        let l18 = *base.add(16).cast::<f32>();
                                                        let l19 = *base.add(20).cast::<i32>();

                                                        super::super::super::golem::order::api::OrderItem{
                                  product_id: _rt::string_lift(bytes14),
                                  name: _rt::string_lift(bytes17),
                                  price: l18,
                                  quantity: l19 as u32,
                                }
                                                    };
                                                    result20.push(e20);
                                                }
                                                _rt::cabi_dealloc(base20, len20 * 24, 4);
                                                let l21 = i32::from(*ptr0.add(44).cast::<u8>());
                                                let l53 = i32::from(*ptr0.add(136).cast::<u8>());
                                                let l85 = *ptr0.add(228).cast::<f32>();
                                                let l86 = *ptr0.add(232).cast::<*mut u8>();
                                                let l87 = *ptr0.add(236).cast::<usize>();
                                                let len88 = l87;
                                                let bytes88 = _rt::Vec::from_raw_parts(
                                                    l86.cast(),
                                                    len88,
                                                    len88,
                                                );
                                                let l89 = *ptr0.add(240).cast::<i64>();

                                                super::super::super::golem::order::api::Order{
                              order_id: _rt::string_lift(bytes5),
                              user_id: _rt::string_lift(bytes8),
                              order_status: super::super::super::golem::order::api::OrderStatus::_lift(l9 as u8),
                              items: result20,
                              billing_address: match l21 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l22 = *ptr0.add(48).cast::<*mut u8>();
                                    let l23 = *ptr0.add(52).cast::<usize>();
                                    let len24 = l23;
                                    let bytes24 = _rt::Vec::from_raw_parts(l22.cast(), len24, len24);
                                    let l25 = i32::from(*ptr0.add(56).cast::<u8>());
                                    let l29 = *ptr0.add(68).cast::<*mut u8>();
                                    let l30 = *ptr0.add(72).cast::<usize>();
                                    let len31 = l30;
                                    let bytes31 = _rt::Vec::from_raw_parts(l29.cast(), len31, len31);
                                    let l32 = *ptr0.add(76).cast::<*mut u8>();
                                    let l33 = *ptr0.add(80).cast::<usize>();
                                    let len34 = l33;
                                    let bytes34 = _rt::Vec::from_raw_parts(l32.cast(), len34, len34);
                                    let l35 = *ptr0.add(84).cast::<*mut u8>();
                                    let l36 = *ptr0.add(88).cast::<usize>();
                                    let len37 = l36;
                                    let bytes37 = _rt::Vec::from_raw_parts(l35.cast(), len37, len37);
                                    let l38 = *ptr0.add(92).cast::<*mut u8>();
                                    let l39 = *ptr0.add(96).cast::<usize>();
                                    let len40 = l39;
                                    let bytes40 = _rt::Vec::from_raw_parts(l38.cast(), len40, len40);
                                    let l41 = i32::from(*ptr0.add(100).cast::<u8>());
                                    let l45 = i32::from(*ptr0.add(112).cast::<u8>());
                                    let l49 = i32::from(*ptr0.add(124).cast::<u8>());

                                    super::super::super::golem::order::api::Address{
                                      street1: _rt::string_lift(bytes24),
                                      street2: match l25 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l26 = *ptr0.add(60).cast::<*mut u8>();
                                            let l27 = *ptr0.add(64).cast::<usize>();
                                            let len28 = l27;
                                            let bytes28 = _rt::Vec::from_raw_parts(l26.cast(), len28, len28);

                                            _rt::string_lift(bytes28)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                      city: _rt::string_lift(bytes31),
                                      state_or_region: _rt::string_lift(bytes34),
                                      country: _rt::string_lift(bytes37),
                                      postal_code: _rt::string_lift(bytes40),
                                      name: match l41 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l42 = *ptr0.add(104).cast::<*mut u8>();
                                            let l43 = *ptr0.add(108).cast::<usize>();
                                            let len44 = l43;
                                            let bytes44 = _rt::Vec::from_raw_parts(l42.cast(), len44, len44);

                                            _rt::string_lift(bytes44)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                      business_name: match l45 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l46 = *ptr0.add(116).cast::<*mut u8>();
                                            let l47 = *ptr0.add(120).cast::<usize>();
                                            let len48 = l47;
                                            let bytes48 = _rt::Vec::from_raw_parts(l46.cast(), len48, len48);

                                            _rt::string_lift(bytes48)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                      phone_number: match l49 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l50 = *ptr0.add(128).cast::<*mut u8>();
                                            let l51 = *ptr0.add(132).cast::<usize>();
                                            let len52 = l51;
                                            let bytes52 = _rt::Vec::from_raw_parts(l50.cast(), len52, len52);

                                            _rt::string_lift(bytes52)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                    }
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                              shipping_address: match l53 {
                                0 => None,
                                1 => {
                                  let e = {
                                    let l54 = *ptr0.add(140).cast::<*mut u8>();
                                    let l55 = *ptr0.add(144).cast::<usize>();
                                    let len56 = l55;
                                    let bytes56 = _rt::Vec::from_raw_parts(l54.cast(), len56, len56);
                                    let l57 = i32::from(*ptr0.add(148).cast::<u8>());
                                    let l61 = *ptr0.add(160).cast::<*mut u8>();
                                    let l62 = *ptr0.add(164).cast::<usize>();
                                    let len63 = l62;
                                    let bytes63 = _rt::Vec::from_raw_parts(l61.cast(), len63, len63);
                                    let l64 = *ptr0.add(168).cast::<*mut u8>();
                                    let l65 = *ptr0.add(172).cast::<usize>();
                                    let len66 = l65;
                                    let bytes66 = _rt::Vec::from_raw_parts(l64.cast(), len66, len66);
                                    let l67 = *ptr0.add(176).cast::<*mut u8>();
                                    let l68 = *ptr0.add(180).cast::<usize>();
                                    let len69 = l68;
                                    let bytes69 = _rt::Vec::from_raw_parts(l67.cast(), len69, len69);
                                    let l70 = *ptr0.add(184).cast::<*mut u8>();
                                    let l71 = *ptr0.add(188).cast::<usize>();
                                    let len72 = l71;
                                    let bytes72 = _rt::Vec::from_raw_parts(l70.cast(), len72, len72);
                                    let l73 = i32::from(*ptr0.add(192).cast::<u8>());
                                    let l77 = i32::from(*ptr0.add(204).cast::<u8>());
                                    let l81 = i32::from(*ptr0.add(216).cast::<u8>());

                                    super::super::super::golem::order::api::Address{
                                      street1: _rt::string_lift(bytes56),
                                      street2: match l57 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l58 = *ptr0.add(152).cast::<*mut u8>();
                                            let l59 = *ptr0.add(156).cast::<usize>();
                                            let len60 = l59;
                                            let bytes60 = _rt::Vec::from_raw_parts(l58.cast(), len60, len60);

                                            _rt::string_lift(bytes60)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                      city: _rt::string_lift(bytes63),
                                      state_or_region: _rt::string_lift(bytes66),
                                      country: _rt::string_lift(bytes69),
                                      postal_code: _rt::string_lift(bytes72),
                                      name: match l73 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l74 = *ptr0.add(196).cast::<*mut u8>();
                                            let l75 = *ptr0.add(200).cast::<usize>();
                                            let len76 = l75;
                                            let bytes76 = _rt::Vec::from_raw_parts(l74.cast(), len76, len76);

                                            _rt::string_lift(bytes76)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                      business_name: match l77 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l78 = *ptr0.add(208).cast::<*mut u8>();
                                            let l79 = *ptr0.add(212).cast::<usize>();
                                            let len80 = l79;
                                            let bytes80 = _rt::Vec::from_raw_parts(l78.cast(), len80, len80);

                                            _rt::string_lift(bytes80)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                      phone_number: match l81 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l82 = *ptr0.add(220).cast::<*mut u8>();
                                            let l83 = *ptr0.add(224).cast::<usize>();
                                            let len84 = l83;
                                            let bytes84 = _rt::Vec::from_raw_parts(l82.cast(), len84, len84);

                                            _rt::string_lift(bytes84)
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      },
                                    }
                                  };
                                  Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                              },
                              total: l85,
                              currency: _rt::string_lift(bytes88),
                              timestamp: l89 as u64,
                            }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &GolemRpcUri) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::Uri { value: value0 } =
                            location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_order(&self, data: &CreateOrder) {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 232]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 232]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let super::super::super::golem::order::api::CreateOrder {
                            user_id: user_id1,
                            items: items1,
                            billing_address: billing_address1,
                            shipping_address: shipping_address1,
                            total: total1,
                            currency: currency1,
                            timestamp: timestamp1,
                        } = data;
                        let vec2 = user_id1;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(12).cast::<usize>() = len2;
                        *ptr0.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                        let vec6 = items1;
                        let len6 = vec6.len();
                        let layout6 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 24, 4);
                        let result6 = if layout6.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout6);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec6.into_iter().enumerate() {
                            let base = result6.add(i * 24);
                            {
                                let super::super::super::golem::order::api::OrderItem {
                                    product_id: product_id3,
                                    name: name3,
                                    price: price3,
                                    quantity: quantity3,
                                } = e;
                                let vec4 = product_id3;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                *base.add(4).cast::<usize>() = len4;
                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                let vec5 = name3;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(12).cast::<usize>() = len5;
                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                *base.add(16).cast::<f32>() = _rt::as_f32(price3);
                                *base.add(20).cast::<i32>() = _rt::as_i32(quantity3);
                            }
                        }
                        *ptr0.add(20).cast::<usize>() = len6;
                        *ptr0.add(16).cast::<*mut u8>() = result6;
                        match billing_address1 {
                            Some(e) => {
                                *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                                let super::super::super::golem::order::api::Address {
                                    street1: street17,
                                    street2: street27,
                                    city: city7,
                                    state_or_region: state_or_region7,
                                    country: country7,
                                    postal_code: postal_code7,
                                    name: name7,
                                    business_name: business_name7,
                                    phone_number: phone_number7,
                                } = e;
                                let vec8 = street17;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(32).cast::<usize>() = len8;
                                *ptr0.add(28).cast::<*mut u8>() = ptr8.cast_mut();
                                match street27 {
                                    Some(e) => {
                                        *ptr0.add(36).cast::<u8>() = (1i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *ptr0.add(44).cast::<usize>() = len9;
                                        *ptr0.add(40).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(36).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                let vec10 = city7;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(52).cast::<usize>() = len10;
                                *ptr0.add(48).cast::<*mut u8>() = ptr10.cast_mut();
                                let vec11 = state_or_region7;
                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                let len11 = vec11.len();
                                *ptr0.add(60).cast::<usize>() = len11;
                                *ptr0.add(56).cast::<*mut u8>() = ptr11.cast_mut();
                                let vec12 = country7;
                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                let len12 = vec12.len();
                                *ptr0.add(68).cast::<usize>() = len12;
                                *ptr0.add(64).cast::<*mut u8>() = ptr12.cast_mut();
                                let vec13 = postal_code7;
                                let ptr13 = vec13.as_ptr().cast::<u8>();
                                let len13 = vec13.len();
                                *ptr0.add(76).cast::<usize>() = len13;
                                *ptr0.add(72).cast::<*mut u8>() = ptr13.cast_mut();
                                match name7 {
                                    Some(e) => {
                                        *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *ptr0.add(88).cast::<usize>() = len14;
                                        *ptr0.add(84).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match business_name7 {
                                    Some(e) => {
                                        *ptr0.add(92).cast::<u8>() = (1i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *ptr0.add(100).cast::<usize>() = len15;
                                        *ptr0.add(96).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(92).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match phone_number7 {
                                    Some(e) => {
                                        *ptr0.add(104).cast::<u8>() = (1i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *ptr0.add(112).cast::<usize>() = len16;
                                        *ptr0.add(108).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(104).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            None => {
                                *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match shipping_address1 {
                            Some(e) => {
                                *ptr0.add(116).cast::<u8>() = (1i32) as u8;
                                let super::super::super::golem::order::api::Address {
                                    street1: street117,
                                    street2: street217,
                                    city: city17,
                                    state_or_region: state_or_region17,
                                    country: country17,
                                    postal_code: postal_code17,
                                    name: name17,
                                    business_name: business_name17,
                                    phone_number: phone_number17,
                                } = e;
                                let vec18 = street117;
                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                let len18 = vec18.len();
                                *ptr0.add(124).cast::<usize>() = len18;
                                *ptr0.add(120).cast::<*mut u8>() = ptr18.cast_mut();
                                match street217 {
                                    Some(e) => {
                                        *ptr0.add(128).cast::<u8>() = (1i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *ptr0.add(136).cast::<usize>() = len19;
                                        *ptr0.add(132).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(128).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                let vec20 = city17;
                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                let len20 = vec20.len();
                                *ptr0.add(144).cast::<usize>() = len20;
                                *ptr0.add(140).cast::<*mut u8>() = ptr20.cast_mut();
                                let vec21 = state_or_region17;
                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                let len21 = vec21.len();
                                *ptr0.add(152).cast::<usize>() = len21;
                                *ptr0.add(148).cast::<*mut u8>() = ptr21.cast_mut();
                                let vec22 = country17;
                                let ptr22 = vec22.as_ptr().cast::<u8>();
                                let len22 = vec22.len();
                                *ptr0.add(160).cast::<usize>() = len22;
                                *ptr0.add(156).cast::<*mut u8>() = ptr22.cast_mut();
                                let vec23 = postal_code17;
                                let ptr23 = vec23.as_ptr().cast::<u8>();
                                let len23 = vec23.len();
                                *ptr0.add(168).cast::<usize>() = len23;
                                *ptr0.add(164).cast::<*mut u8>() = ptr23.cast_mut();
                                match name17 {
                                    Some(e) => {
                                        *ptr0.add(172).cast::<u8>() = (1i32) as u8;
                                        let vec24 = e;
                                        let ptr24 = vec24.as_ptr().cast::<u8>();
                                        let len24 = vec24.len();
                                        *ptr0.add(180).cast::<usize>() = len24;
                                        *ptr0.add(176).cast::<*mut u8>() = ptr24.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(172).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match business_name17 {
                                    Some(e) => {
                                        *ptr0.add(184).cast::<u8>() = (1i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *ptr0.add(192).cast::<usize>() = len25;
                                        *ptr0.add(188).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(184).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match phone_number17 {
                                    Some(e) => {
                                        *ptr0.add(196).cast::<u8>() = (1i32) as u8;
                                        let vec26 = e;
                                        let ptr26 = vec26.as_ptr().cast::<u8>();
                                        let len26 = vec26.len();
                                        *ptr0.add(204).cast::<usize>() = len26;
                                        *ptr0.add(200).cast::<*mut u8>() = ptr26.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(196).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            None => {
                                *ptr0.add(116).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        *ptr0.add(208).cast::<f32>() = _rt::as_f32(total1);
                        let vec27 = currency1;
                        let ptr27 = vec27.as_ptr().cast::<u8>();
                        let len27 = vec27.len();
                        *ptr0.add(216).cast::<usize>() = len27;
                        *ptr0.add(212).cast::<*mut u8>() = ptr27.cast_mut();
                        *ptr0.add(224).cast::<i64>() = _rt::as_i64(timestamp1);

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-order"]
                            fn wit_import(_: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0);
                        if layout6.size() != 0 {
                            _rt::alloc::dealloc(result6.cast(), layout6);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_order(&self, data: &CreateOrder) {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 232]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 232]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let super::super::super::golem::order::api::CreateOrder {
                            user_id: user_id1,
                            items: items1,
                            billing_address: billing_address1,
                            shipping_address: shipping_address1,
                            total: total1,
                            currency: currency1,
                            timestamp: timestamp1,
                        } = data;
                        let vec2 = user_id1;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(12).cast::<usize>() = len2;
                        *ptr0.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                        let vec6 = items1;
                        let len6 = vec6.len();
                        let layout6 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 24, 4);
                        let result6 = if layout6.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout6);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec6.into_iter().enumerate() {
                            let base = result6.add(i * 24);
                            {
                                let super::super::super::golem::order::api::OrderItem {
                                    product_id: product_id3,
                                    name: name3,
                                    price: price3,
                                    quantity: quantity3,
                                } = e;
                                let vec4 = product_id3;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                *base.add(4).cast::<usize>() = len4;
                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                let vec5 = name3;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(12).cast::<usize>() = len5;
                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                *base.add(16).cast::<f32>() = _rt::as_f32(price3);
                                *base.add(20).cast::<i32>() = _rt::as_i32(quantity3);
                            }
                        }
                        *ptr0.add(20).cast::<usize>() = len6;
                        *ptr0.add(16).cast::<*mut u8>() = result6;
                        match billing_address1 {
                            Some(e) => {
                                *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                                let super::super::super::golem::order::api::Address {
                                    street1: street17,
                                    street2: street27,
                                    city: city7,
                                    state_or_region: state_or_region7,
                                    country: country7,
                                    postal_code: postal_code7,
                                    name: name7,
                                    business_name: business_name7,
                                    phone_number: phone_number7,
                                } = e;
                                let vec8 = street17;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(32).cast::<usize>() = len8;
                                *ptr0.add(28).cast::<*mut u8>() = ptr8.cast_mut();
                                match street27 {
                                    Some(e) => {
                                        *ptr0.add(36).cast::<u8>() = (1i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *ptr0.add(44).cast::<usize>() = len9;
                                        *ptr0.add(40).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(36).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                let vec10 = city7;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(52).cast::<usize>() = len10;
                                *ptr0.add(48).cast::<*mut u8>() = ptr10.cast_mut();
                                let vec11 = state_or_region7;
                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                let len11 = vec11.len();
                                *ptr0.add(60).cast::<usize>() = len11;
                                *ptr0.add(56).cast::<*mut u8>() = ptr11.cast_mut();
                                let vec12 = country7;
                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                let len12 = vec12.len();
                                *ptr0.add(68).cast::<usize>() = len12;
                                *ptr0.add(64).cast::<*mut u8>() = ptr12.cast_mut();
                                let vec13 = postal_code7;
                                let ptr13 = vec13.as_ptr().cast::<u8>();
                                let len13 = vec13.len();
                                *ptr0.add(76).cast::<usize>() = len13;
                                *ptr0.add(72).cast::<*mut u8>() = ptr13.cast_mut();
                                match name7 {
                                    Some(e) => {
                                        *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *ptr0.add(88).cast::<usize>() = len14;
                                        *ptr0.add(84).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match business_name7 {
                                    Some(e) => {
                                        *ptr0.add(92).cast::<u8>() = (1i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *ptr0.add(100).cast::<usize>() = len15;
                                        *ptr0.add(96).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(92).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match phone_number7 {
                                    Some(e) => {
                                        *ptr0.add(104).cast::<u8>() = (1i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *ptr0.add(112).cast::<usize>() = len16;
                                        *ptr0.add(108).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(104).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            None => {
                                *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match shipping_address1 {
                            Some(e) => {
                                *ptr0.add(116).cast::<u8>() = (1i32) as u8;
                                let super::super::super::golem::order::api::Address {
                                    street1: street117,
                                    street2: street217,
                                    city: city17,
                                    state_or_region: state_or_region17,
                                    country: country17,
                                    postal_code: postal_code17,
                                    name: name17,
                                    business_name: business_name17,
                                    phone_number: phone_number17,
                                } = e;
                                let vec18 = street117;
                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                let len18 = vec18.len();
                                *ptr0.add(124).cast::<usize>() = len18;
                                *ptr0.add(120).cast::<*mut u8>() = ptr18.cast_mut();
                                match street217 {
                                    Some(e) => {
                                        *ptr0.add(128).cast::<u8>() = (1i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *ptr0.add(136).cast::<usize>() = len19;
                                        *ptr0.add(132).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(128).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                let vec20 = city17;
                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                let len20 = vec20.len();
                                *ptr0.add(144).cast::<usize>() = len20;
                                *ptr0.add(140).cast::<*mut u8>() = ptr20.cast_mut();
                                let vec21 = state_or_region17;
                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                let len21 = vec21.len();
                                *ptr0.add(152).cast::<usize>() = len21;
                                *ptr0.add(148).cast::<*mut u8>() = ptr21.cast_mut();
                                let vec22 = country17;
                                let ptr22 = vec22.as_ptr().cast::<u8>();
                                let len22 = vec22.len();
                                *ptr0.add(160).cast::<usize>() = len22;
                                *ptr0.add(156).cast::<*mut u8>() = ptr22.cast_mut();
                                let vec23 = postal_code17;
                                let ptr23 = vec23.as_ptr().cast::<u8>();
                                let len23 = vec23.len();
                                *ptr0.add(168).cast::<usize>() = len23;
                                *ptr0.add(164).cast::<*mut u8>() = ptr23.cast_mut();
                                match name17 {
                                    Some(e) => {
                                        *ptr0.add(172).cast::<u8>() = (1i32) as u8;
                                        let vec24 = e;
                                        let ptr24 = vec24.as_ptr().cast::<u8>();
                                        let len24 = vec24.len();
                                        *ptr0.add(180).cast::<usize>() = len24;
                                        *ptr0.add(176).cast::<*mut u8>() = ptr24.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(172).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match business_name17 {
                                    Some(e) => {
                                        *ptr0.add(184).cast::<u8>() = (1i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *ptr0.add(192).cast::<usize>() = len25;
                                        *ptr0.add(188).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(184).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match phone_number17 {
                                    Some(e) => {
                                        *ptr0.add(196).cast::<u8>() = (1i32) as u8;
                                        let vec26 = e;
                                        let ptr26 = vec26.as_ptr().cast::<u8>();
                                        let len26 = vec26.len();
                                        *ptr0.add(204).cast::<usize>() = len26;
                                        *ptr0.add(200).cast::<*mut u8>() = ptr26.cast_mut();
                                    }
                                    None => {
                                        *ptr0.add(196).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                            None => {
                                *ptr0.add(116).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        *ptr0.add(208).cast::<f32>() = _rt::as_f32(total1);
                        let vec27 = currency1;
                        let ptr27 = vec27.as_ptr().cast::<u8>();
                        let len27 = vec27.len();
                        *ptr0.add(216).cast::<usize>() = len27;
                        *ptr0.add(212).cast::<*mut u8>() = ptr27.cast_mut();
                        *ptr0.add(224).cast::<i64>() = _rt::as_i64(timestamp1);

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.initialize-order"]
                            fn wit_import(_: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0);
                        if layout6.size() != 0 {
                            _rt::alloc::dealloc(result6.cast(), layout6);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_add_item(
                    &self,
                    product_id: &str,
                    quantity: u32,
                ) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = product_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-add-item"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i32(&quantity),
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V32;
                                    let v32 = match l3 {
                                        0 => {
                                            let e32 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                                let l7 = *ptr1.add(16).cast::<*mut u8>();
                                                let l8 = *ptr1.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes6),
                                      product_id: _rt::string_lift(bytes9),
                                    }
                                            };
                                            V32::ProductNotFound(e32)
                                        }
                                        1 => {
                                            let e32 = {
                                                let l10 = *ptr1.add(8).cast::<*mut u8>();
                                                let l11 = *ptr1.add(12).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                let l13 = *ptr1.add(16).cast::<*mut u8>();
                                                let l14 = *ptr1.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes12),
                                      product_id: _rt::string_lift(bytes15),
                                    }
                                            };
                                            V32::PricingNotFound(e32)
                                        }
                                        2 => {
                                            let e32 = {
                                                let l16 = *ptr1.add(8).cast::<*mut u8>();
                                                let l17 = *ptr1.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes18),
                                    }
                                            };
                                            V32::AddressNotValid(e32)
                                        }
                                        3 => {
                                            let e32 = {
                                                let l19 = *ptr1.add(8).cast::<*mut u8>();
                                                let l20 = *ptr1.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                let l22 = *ptr1.add(16).cast::<*mut u8>();
                                                let l23 = *ptr1.add(20).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes21),
                                      product_id: _rt::string_lift(bytes24),
                                    }
                                            };
                                            V32::ItemNotFound(e32)
                                        }
                                        4 => {
                                            let e32 = {
                                                let l25 = *ptr1.add(8).cast::<*mut u8>();
                                                let l26 = *ptr1.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes27),
                                    }
                                            };
                                            V32::EmptyItems(e32)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e32 = {
                                                let l28 = *ptr1.add(8).cast::<*mut u8>();
                                                let l29 = *ptr1.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                let l31 = i32::from(*ptr1.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes30),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                    }
                                            };
                                            V32::ActionNotAllowed(e32)
                                        }
                                    };

                                    v32
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_item(&self, product_id: &str, quantity: u32) -> FutureAddItemResult {
                    unsafe {
                        let vec0 = product_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.add-item"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i32(&quantity),
                        );
                        FutureAddItemResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_remove_item(&self, product_id: &str) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = product_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-remove-item"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V32;
                                    let v32 = match l3 {
                                        0 => {
                                            let e32 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                                let l7 = *ptr1.add(16).cast::<*mut u8>();
                                                let l8 = *ptr1.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes6),
                                      product_id: _rt::string_lift(bytes9),
                                    }
                                            };
                                            V32::ProductNotFound(e32)
                                        }
                                        1 => {
                                            let e32 = {
                                                let l10 = *ptr1.add(8).cast::<*mut u8>();
                                                let l11 = *ptr1.add(12).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                let l13 = *ptr1.add(16).cast::<*mut u8>();
                                                let l14 = *ptr1.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes12),
                                      product_id: _rt::string_lift(bytes15),
                                    }
                                            };
                                            V32::PricingNotFound(e32)
                                        }
                                        2 => {
                                            let e32 = {
                                                let l16 = *ptr1.add(8).cast::<*mut u8>();
                                                let l17 = *ptr1.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes18),
                                    }
                                            };
                                            V32::AddressNotValid(e32)
                                        }
                                        3 => {
                                            let e32 = {
                                                let l19 = *ptr1.add(8).cast::<*mut u8>();
                                                let l20 = *ptr1.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                let l22 = *ptr1.add(16).cast::<*mut u8>();
                                                let l23 = *ptr1.add(20).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes21),
                                      product_id: _rt::string_lift(bytes24),
                                    }
                                            };
                                            V32::ItemNotFound(e32)
                                        }
                                        4 => {
                                            let e32 = {
                                                let l25 = *ptr1.add(8).cast::<*mut u8>();
                                                let l26 = *ptr1.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes27),
                                    }
                                            };
                                            V32::EmptyItems(e32)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e32 = {
                                                let l28 = *ptr1.add(8).cast::<*mut u8>();
                                                let l29 = *ptr1.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                let l31 = i32::from(*ptr1.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes30),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                    }
                                            };
                                            V32::ActionNotAllowed(e32)
                                        }
                                    };

                                    v32
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_item(&self, product_id: &str) -> FutureRemoveItemResult {
                    unsafe {
                        let vec0 = product_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.remove-item"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                        FutureRemoveItemResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_update_item_quantity(
                    &self,
                    product_id: &str,
                    quantity: u32,
                ) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = product_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-update-item-quantity"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i32(&quantity),
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V32;
                                    let v32 = match l3 {
                                        0 => {
                                            let e32 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                                let l7 = *ptr1.add(16).cast::<*mut u8>();
                                                let l8 = *ptr1.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes6),
                                      product_id: _rt::string_lift(bytes9),
                                    }
                                            };
                                            V32::ProductNotFound(e32)
                                        }
                                        1 => {
                                            let e32 = {
                                                let l10 = *ptr1.add(8).cast::<*mut u8>();
                                                let l11 = *ptr1.add(12).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                let l13 = *ptr1.add(16).cast::<*mut u8>();
                                                let l14 = *ptr1.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes12),
                                      product_id: _rt::string_lift(bytes15),
                                    }
                                            };
                                            V32::PricingNotFound(e32)
                                        }
                                        2 => {
                                            let e32 = {
                                                let l16 = *ptr1.add(8).cast::<*mut u8>();
                                                let l17 = *ptr1.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes18),
                                    }
                                            };
                                            V32::AddressNotValid(e32)
                                        }
                                        3 => {
                                            let e32 = {
                                                let l19 = *ptr1.add(8).cast::<*mut u8>();
                                                let l20 = *ptr1.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                let l22 = *ptr1.add(16).cast::<*mut u8>();
                                                let l23 = *ptr1.add(20).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes21),
                                      product_id: _rt::string_lift(bytes24),
                                    }
                                            };
                                            V32::ItemNotFound(e32)
                                        }
                                        4 => {
                                            let e32 = {
                                                let l25 = *ptr1.add(8).cast::<*mut u8>();
                                                let l26 = *ptr1.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes27),
                                    }
                                            };
                                            V32::EmptyItems(e32)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e32 = {
                                                let l28 = *ptr1.add(8).cast::<*mut u8>();
                                                let l29 = *ptr1.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                let l31 = i32::from(*ptr1.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes30),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l31 as u8),
                                    }
                                            };
                                            V32::ActionNotAllowed(e32)
                                        }
                                    };

                                    v32
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update_item_quantity(
                    &self,
                    product_id: &str,
                    quantity: u32,
                ) -> FutureUpdateItemQuantityResult {
                    unsafe {
                        let vec0 = product_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.update-item-quantity"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i32(&quantity),
                        );
                        FutureUpdateItemQuantityResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_update_shipping_address(
                    &self,
                    address: &Address,
                ) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 92]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 92]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let super::super::super::golem::order::api::Address {
                            street1: street11,
                            street2: street21,
                            city: city1,
                            state_or_region: state_or_region1,
                            country: country1,
                            postal_code: postal_code1,
                            name: name1,
                            business_name: business_name1,
                            phone_number: phone_number1,
                        } = address;
                        let vec2 = street11;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(8).cast::<usize>() = len2;
                        *ptr0.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        match street21 {
                            Some(e) => {
                                *ptr0.add(12).cast::<u8>() = (1i32) as u8;
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *ptr0.add(20).cast::<usize>() = len3;
                                *ptr0.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                            None => {
                                *ptr0.add(12).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let vec4 = city1;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        *ptr0.add(28).cast::<usize>() = len4;
                        *ptr0.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                        let vec5 = state_or_region1;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        *ptr0.add(36).cast::<usize>() = len5;
                        *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        let vec6 = country1;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        *ptr0.add(44).cast::<usize>() = len6;
                        *ptr0.add(40).cast::<*mut u8>() = ptr6.cast_mut();
                        let vec7 = postal_code1;
                        let ptr7 = vec7.as_ptr().cast::<u8>();
                        let len7 = vec7.len();
                        *ptr0.add(52).cast::<usize>() = len7;
                        *ptr0.add(48).cast::<*mut u8>() = ptr7.cast_mut();
                        match name1 {
                            Some(e) => {
                                *ptr0.add(56).cast::<u8>() = (1i32) as u8;
                                let vec8 = e;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(64).cast::<usize>() = len8;
                                *ptr0.add(60).cast::<*mut u8>() = ptr8.cast_mut();
                            }
                            None => {
                                *ptr0.add(56).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match business_name1 {
                            Some(e) => {
                                *ptr0.add(68).cast::<u8>() = (1i32) as u8;
                                let vec9 = e;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *ptr0.add(76).cast::<usize>() = len9;
                                *ptr0.add(72).cast::<*mut u8>() = ptr9.cast_mut();
                            }
                            None => {
                                *ptr0.add(68).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match phone_number1 {
                            Some(e) => {
                                *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                let vec10 = e;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(88).cast::<usize>() = len10;
                                *ptr0.add(84).cast::<*mut u8>() = ptr10.cast_mut();
                            }
                            None => {
                                *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-update-shipping-address"]
                            fn wit_import(_: *mut u8, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0, ptr11);
                        let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                        match l12 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l13 = i32::from(*ptr11.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V42;
                                    let v42 = match l13 {
                                        0 => {
                                            let e42 = {
                                                let l14 = *ptr11.add(8).cast::<*mut u8>();
                                                let l15 = *ptr11.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                let l17 = *ptr11.add(16).cast::<*mut u8>();
                                                let l18 = *ptr11.add(20).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes16),
                                      product_id: _rt::string_lift(bytes19),
                                    }
                                            };
                                            V42::ProductNotFound(e42)
                                        }
                                        1 => {
                                            let e42 = {
                                                let l20 = *ptr11.add(8).cast::<*mut u8>();
                                                let l21 = *ptr11.add(12).cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                let l23 = *ptr11.add(16).cast::<*mut u8>();
                                                let l24 = *ptr11.add(20).cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes22),
                                      product_id: _rt::string_lift(bytes25),
                                    }
                                            };
                                            V42::PricingNotFound(e42)
                                        }
                                        2 => {
                                            let e42 = {
                                                let l26 = *ptr11.add(8).cast::<*mut u8>();
                                                let l27 = *ptr11.add(12).cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes28),
                                    }
                                            };
                                            V42::AddressNotValid(e42)
                                        }
                                        3 => {
                                            let e42 = {
                                                let l29 = *ptr11.add(8).cast::<*mut u8>();
                                                let l30 = *ptr11.add(12).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                let l32 = *ptr11.add(16).cast::<*mut u8>();
                                                let l33 = *ptr11.add(20).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes31),
                                      product_id: _rt::string_lift(bytes34),
                                    }
                                            };
                                            V42::ItemNotFound(e42)
                                        }
                                        4 => {
                                            let e42 = {
                                                let l35 = *ptr11.add(8).cast::<*mut u8>();
                                                let l36 = *ptr11.add(12).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes37),
                                    }
                                            };
                                            V42::EmptyItems(e42)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e42 = {
                                                let l38 = *ptr11.add(8).cast::<*mut u8>();
                                                let l39 = *ptr11.add(12).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                let l41 = i32::from(*ptr11.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes40),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l41 as u8),
                                    }
                                            };
                                            V42::ActionNotAllowed(e42)
                                        }
                                    };

                                    v42
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update_shipping_address(
                    &self,
                    address: &Address,
                ) -> FutureUpdateShippingAddressResult {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 92]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 92]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let super::super::super::golem::order::api::Address {
                            street1: street11,
                            street2: street21,
                            city: city1,
                            state_or_region: state_or_region1,
                            country: country1,
                            postal_code: postal_code1,
                            name: name1,
                            business_name: business_name1,
                            phone_number: phone_number1,
                        } = address;
                        let vec2 = street11;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(8).cast::<usize>() = len2;
                        *ptr0.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        match street21 {
                            Some(e) => {
                                *ptr0.add(12).cast::<u8>() = (1i32) as u8;
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *ptr0.add(20).cast::<usize>() = len3;
                                *ptr0.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                            None => {
                                *ptr0.add(12).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let vec4 = city1;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        *ptr0.add(28).cast::<usize>() = len4;
                        *ptr0.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                        let vec5 = state_or_region1;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        *ptr0.add(36).cast::<usize>() = len5;
                        *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        let vec6 = country1;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        *ptr0.add(44).cast::<usize>() = len6;
                        *ptr0.add(40).cast::<*mut u8>() = ptr6.cast_mut();
                        let vec7 = postal_code1;
                        let ptr7 = vec7.as_ptr().cast::<u8>();
                        let len7 = vec7.len();
                        *ptr0.add(52).cast::<usize>() = len7;
                        *ptr0.add(48).cast::<*mut u8>() = ptr7.cast_mut();
                        match name1 {
                            Some(e) => {
                                *ptr0.add(56).cast::<u8>() = (1i32) as u8;
                                let vec8 = e;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(64).cast::<usize>() = len8;
                                *ptr0.add(60).cast::<*mut u8>() = ptr8.cast_mut();
                            }
                            None => {
                                *ptr0.add(56).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match business_name1 {
                            Some(e) => {
                                *ptr0.add(68).cast::<u8>() = (1i32) as u8;
                                let vec9 = e;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *ptr0.add(76).cast::<usize>() = len9;
                                *ptr0.add(72).cast::<*mut u8>() = ptr9.cast_mut();
                            }
                            None => {
                                *ptr0.add(68).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match phone_number1 {
                            Some(e) => {
                                *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                let vec10 = e;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(88).cast::<usize>() = len10;
                                *ptr0.add(84).cast::<*mut u8>() = ptr10.cast_mut();
                            }
                            None => {
                                *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.update-shipping-address"]
                            fn wit_import(_: *mut u8) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0);
                        FutureUpdateShippingAddressResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_update_billing_address(
                    &self,
                    address: &Address,
                ) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 92]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 92]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let super::super::super::golem::order::api::Address {
                            street1: street11,
                            street2: street21,
                            city: city1,
                            state_or_region: state_or_region1,
                            country: country1,
                            postal_code: postal_code1,
                            name: name1,
                            business_name: business_name1,
                            phone_number: phone_number1,
                        } = address;
                        let vec2 = street11;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(8).cast::<usize>() = len2;
                        *ptr0.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        match street21 {
                            Some(e) => {
                                *ptr0.add(12).cast::<u8>() = (1i32) as u8;
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *ptr0.add(20).cast::<usize>() = len3;
                                *ptr0.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                            None => {
                                *ptr0.add(12).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let vec4 = city1;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        *ptr0.add(28).cast::<usize>() = len4;
                        *ptr0.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                        let vec5 = state_or_region1;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        *ptr0.add(36).cast::<usize>() = len5;
                        *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        let vec6 = country1;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        *ptr0.add(44).cast::<usize>() = len6;
                        *ptr0.add(40).cast::<*mut u8>() = ptr6.cast_mut();
                        let vec7 = postal_code1;
                        let ptr7 = vec7.as_ptr().cast::<u8>();
                        let len7 = vec7.len();
                        *ptr0.add(52).cast::<usize>() = len7;
                        *ptr0.add(48).cast::<*mut u8>() = ptr7.cast_mut();
                        match name1 {
                            Some(e) => {
                                *ptr0.add(56).cast::<u8>() = (1i32) as u8;
                                let vec8 = e;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(64).cast::<usize>() = len8;
                                *ptr0.add(60).cast::<*mut u8>() = ptr8.cast_mut();
                            }
                            None => {
                                *ptr0.add(56).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match business_name1 {
                            Some(e) => {
                                *ptr0.add(68).cast::<u8>() = (1i32) as u8;
                                let vec9 = e;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *ptr0.add(76).cast::<usize>() = len9;
                                *ptr0.add(72).cast::<*mut u8>() = ptr9.cast_mut();
                            }
                            None => {
                                *ptr0.add(68).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match phone_number1 {
                            Some(e) => {
                                *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                let vec10 = e;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(88).cast::<usize>() = len10;
                                *ptr0.add(84).cast::<*mut u8>() = ptr10.cast_mut();
                            }
                            None => {
                                *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-update-billing-address"]
                            fn wit_import(_: *mut u8, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0, ptr11);
                        let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                        match l12 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l13 = i32::from(*ptr11.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V42;
                                    let v42 = match l13 {
                                        0 => {
                                            let e42 = {
                                                let l14 = *ptr11.add(8).cast::<*mut u8>();
                                                let l15 = *ptr11.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                let l17 = *ptr11.add(16).cast::<*mut u8>();
                                                let l18 = *ptr11.add(20).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes16),
                                      product_id: _rt::string_lift(bytes19),
                                    }
                                            };
                                            V42::ProductNotFound(e42)
                                        }
                                        1 => {
                                            let e42 = {
                                                let l20 = *ptr11.add(8).cast::<*mut u8>();
                                                let l21 = *ptr11.add(12).cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                let l23 = *ptr11.add(16).cast::<*mut u8>();
                                                let l24 = *ptr11.add(20).cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes22),
                                      product_id: _rt::string_lift(bytes25),
                                    }
                                            };
                                            V42::PricingNotFound(e42)
                                        }
                                        2 => {
                                            let e42 = {
                                                let l26 = *ptr11.add(8).cast::<*mut u8>();
                                                let l27 = *ptr11.add(12).cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes28),
                                    }
                                            };
                                            V42::AddressNotValid(e42)
                                        }
                                        3 => {
                                            let e42 = {
                                                let l29 = *ptr11.add(8).cast::<*mut u8>();
                                                let l30 = *ptr11.add(12).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                let l32 = *ptr11.add(16).cast::<*mut u8>();
                                                let l33 = *ptr11.add(20).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes31),
                                      product_id: _rt::string_lift(bytes34),
                                    }
                                            };
                                            V42::ItemNotFound(e42)
                                        }
                                        4 => {
                                            let e42 = {
                                                let l35 = *ptr11.add(8).cast::<*mut u8>();
                                                let l36 = *ptr11.add(12).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes37),
                                    }
                                            };
                                            V42::EmptyItems(e42)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e42 = {
                                                let l38 = *ptr11.add(8).cast::<*mut u8>();
                                                let l39 = *ptr11.add(12).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                let l41 = i32::from(*ptr11.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes40),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l41 as u8),
                                    }
                                            };
                                            V42::ActionNotAllowed(e42)
                                        }
                                    };

                                    v42
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update_billing_address(
                    &self,
                    address: &Address,
                ) -> FutureUpdateBillingAddressResult {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 92]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 92]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        *ptr0.add(0).cast::<i32>() = (self).handle() as i32;
                        let super::super::super::golem::order::api::Address {
                            street1: street11,
                            street2: street21,
                            city: city1,
                            state_or_region: state_or_region1,
                            country: country1,
                            postal_code: postal_code1,
                            name: name1,
                            business_name: business_name1,
                            phone_number: phone_number1,
                        } = address;
                        let vec2 = street11;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(8).cast::<usize>() = len2;
                        *ptr0.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        match street21 {
                            Some(e) => {
                                *ptr0.add(12).cast::<u8>() = (1i32) as u8;
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *ptr0.add(20).cast::<usize>() = len3;
                                *ptr0.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                            None => {
                                *ptr0.add(12).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        let vec4 = city1;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        *ptr0.add(28).cast::<usize>() = len4;
                        *ptr0.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                        let vec5 = state_or_region1;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        *ptr0.add(36).cast::<usize>() = len5;
                        *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        let vec6 = country1;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        *ptr0.add(44).cast::<usize>() = len6;
                        *ptr0.add(40).cast::<*mut u8>() = ptr6.cast_mut();
                        let vec7 = postal_code1;
                        let ptr7 = vec7.as_ptr().cast::<u8>();
                        let len7 = vec7.len();
                        *ptr0.add(52).cast::<usize>() = len7;
                        *ptr0.add(48).cast::<*mut u8>() = ptr7.cast_mut();
                        match name1 {
                            Some(e) => {
                                *ptr0.add(56).cast::<u8>() = (1i32) as u8;
                                let vec8 = e;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(64).cast::<usize>() = len8;
                                *ptr0.add(60).cast::<*mut u8>() = ptr8.cast_mut();
                            }
                            None => {
                                *ptr0.add(56).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match business_name1 {
                            Some(e) => {
                                *ptr0.add(68).cast::<u8>() = (1i32) as u8;
                                let vec9 = e;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *ptr0.add(76).cast::<usize>() = len9;
                                *ptr0.add(72).cast::<*mut u8>() = ptr9.cast_mut();
                            }
                            None => {
                                *ptr0.add(68).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        match phone_number1 {
                            Some(e) => {
                                *ptr0.add(80).cast::<u8>() = (1i32) as u8;
                                let vec10 = e;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(88).cast::<usize>() = len10;
                                *ptr0.add(84).cast::<*mut u8>() = ptr10.cast_mut();
                            }
                            None => {
                                *ptr0.add(80).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.update-billing-address"]
                            fn wit_import(_: *mut u8) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0);
                        FutureUpdateBillingAddressResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_ship_order(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-ship-order"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V31;
                                    let v31 = match l2 {
                                        0 => {
                                            let e31 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes5),
                                      product_id: _rt::string_lift(bytes8),
                                    }
                                            };
                                            V31::ProductNotFound(e31)
                                        }
                                        1 => {
                                            let e31 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes11),
                                      product_id: _rt::string_lift(bytes14),
                                    }
                                            };
                                            V31::PricingNotFound(e31)
                                        }
                                        2 => {
                                            let e31 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes17),
                                    }
                                            };
                                            V31::AddressNotValid(e31)
                                        }
                                        3 => {
                                            let e31 = {
                                                let l18 = *ptr0.add(8).cast::<*mut u8>();
                                                let l19 = *ptr0.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                let l21 = *ptr0.add(16).cast::<*mut u8>();
                                                let l22 = *ptr0.add(20).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes20),
                                      product_id: _rt::string_lift(bytes23),
                                    }
                                            };
                                            V31::ItemNotFound(e31)
                                        }
                                        4 => {
                                            let e31 = {
                                                let l24 = *ptr0.add(8).cast::<*mut u8>();
                                                let l25 = *ptr0.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes26),
                                    }
                                            };
                                            V31::EmptyItems(e31)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e31 = {
                                                let l27 = *ptr0.add(8).cast::<*mut u8>();
                                                let l28 = *ptr0.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                let l30 = i32::from(*ptr0.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes29),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l30 as u8),
                                    }
                                            };
                                            V31::ActionNotAllowed(e31)
                                        }
                                    };

                                    v31
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ship_order(&self) -> FutureShipOrderResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.ship-order"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureShipOrderResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_cancel_order(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-cancel-order"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::golem::order::api::Error as V31;
                                    let v31 = match l2 {
                                        0 => {
                                            let e31 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                super::super::super::golem::order::api::ProductNotFoundError{
                                      message: _rt::string_lift(bytes5),
                                      product_id: _rt::string_lift(bytes8),
                                    }
                                            };
                                            V31::ProductNotFound(e31)
                                        }
                                        1 => {
                                            let e31 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );

                                                super::super::super::golem::order::api::PricingNotFoundError{
                                      message: _rt::string_lift(bytes11),
                                      product_id: _rt::string_lift(bytes14),
                                    }
                                            };
                                            V31::PricingNotFound(e31)
                                        }
                                        2 => {
                                            let e31 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );

                                                super::super::super::golem::order::api::AddressNotValidError{
                                      message: _rt::string_lift(bytes17),
                                    }
                                            };
                                            V31::AddressNotValid(e31)
                                        }
                                        3 => {
                                            let e31 = {
                                                let l18 = *ptr0.add(8).cast::<*mut u8>();
                                                let l19 = *ptr0.add(12).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                let l21 = *ptr0.add(16).cast::<*mut u8>();
                                                let l22 = *ptr0.add(20).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );

                                                super::super::super::golem::order::api::ItemNotFoundError{
                                      message: _rt::string_lift(bytes20),
                                      product_id: _rt::string_lift(bytes23),
                                    }
                                            };
                                            V31::ItemNotFound(e31)
                                        }
                                        4 => {
                                            let e31 = {
                                                let l24 = *ptr0.add(8).cast::<*mut u8>();
                                                let l25 = *ptr0.add(12).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );

                                                super::super::super::golem::order::api::EmptyItemsError{
                                      message: _rt::string_lift(bytes26),
                                    }
                                            };
                                            V31::EmptyItems(e31)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e31 = {
                                                let l27 = *ptr0.add(8).cast::<*mut u8>();
                                                let l28 = *ptr0.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                let l30 = i32::from(*ptr0.add(16).cast::<u8>());

                                                super::super::super::golem::order::api::ActionNotAllowedError{
                                      message: _rt::string_lift(bytes29),
                                      status: super::super::super::golem::order::api::OrderStatus::_lift(l30 as u8),
                                    }
                                            };
                                            V31::ActionNotAllowed(e31)
                                        }
                                    };

                                    v31
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cancel_order(&self) -> FutureCancelOrderResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.cancel-order"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureCancelOrderResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get(&self) -> Option<Order> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 240]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 240]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                    let l5 = *ptr0.add(16).cast::<*mut u8>();
                                    let l6 = *ptr0.add(20).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                    let l8 = i32::from(*ptr0.add(24).cast::<u8>());
                                    let l9 = *ptr0.add(28).cast::<*mut u8>();
                                    let l10 = *ptr0.add(32).cast::<usize>();
                                    let base19 = l9;
                                    let len19 = l10;
                                    let mut result19 = _rt::Vec::with_capacity(len19);
                                    for i in 0..len19 {
                                        let base = base19.add(i * 24);
                                        let e19 = {
                                            let l11 = *base.add(0).cast::<*mut u8>();
                                            let l12 = *base.add(4).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                                            let l14 = *base.add(8).cast::<*mut u8>();
                                            let l15 = *base.add(12).cast::<usize>();
                                            let len16 = l15;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                                            let l17 = *base.add(16).cast::<f32>();
                                            let l18 = *base.add(20).cast::<i32>();

                                            super::super::super::golem::order::api::OrderItem {
                                                product_id: _rt::string_lift(bytes13),
                                                name: _rt::string_lift(bytes16),
                                                price: l17,
                                                quantity: l18 as u32,
                                            }
                                        };
                                        result19.push(e19);
                                    }
                                    _rt::cabi_dealloc(base19, len19 * 24, 4);
                                    let l20 = i32::from(*ptr0.add(36).cast::<u8>());
                                    let l52 = i32::from(*ptr0.add(128).cast::<u8>());
                                    let l84 = *ptr0.add(220).cast::<f32>();
                                    let l85 = *ptr0.add(224).cast::<*mut u8>();
                                    let l86 = *ptr0.add(228).cast::<usize>();
                                    let len87 = l86;
                                    let bytes87 =
                                        _rt::Vec::from_raw_parts(l85.cast(), len87, len87);
                                    let l88 = *ptr0.add(232).cast::<i64>();

                                    super::super::super::golem::order::api::Order{
                                order_id: _rt::string_lift(bytes4),
                                user_id: _rt::string_lift(bytes7),
                                order_status: super::super::super::golem::order::api::OrderStatus::_lift(l8 as u8),
                                items: result19,
                                billing_address: match l20 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l21 = *ptr0.add(40).cast::<*mut u8>();
                                      let l22 = *ptr0.add(44).cast::<usize>();
                                      let len23 = l22;
                                      let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);
                                      let l24 = i32::from(*ptr0.add(48).cast::<u8>());
                                      let l28 = *ptr0.add(60).cast::<*mut u8>();
                                      let l29 = *ptr0.add(64).cast::<usize>();
                                      let len30 = l29;
                                      let bytes30 = _rt::Vec::from_raw_parts(l28.cast(), len30, len30);
                                      let l31 = *ptr0.add(68).cast::<*mut u8>();
                                      let l32 = *ptr0.add(72).cast::<usize>();
                                      let len33 = l32;
                                      let bytes33 = _rt::Vec::from_raw_parts(l31.cast(), len33, len33);
                                      let l34 = *ptr0.add(76).cast::<*mut u8>();
                                      let l35 = *ptr0.add(80).cast::<usize>();
                                      let len36 = l35;
                                      let bytes36 = _rt::Vec::from_raw_parts(l34.cast(), len36, len36);
                                      let l37 = *ptr0.add(84).cast::<*mut u8>();
                                      let l38 = *ptr0.add(88).cast::<usize>();
                                      let len39 = l38;
                                      let bytes39 = _rt::Vec::from_raw_parts(l37.cast(), len39, len39);
                                      let l40 = i32::from(*ptr0.add(92).cast::<u8>());
                                      let l44 = i32::from(*ptr0.add(104).cast::<u8>());
                                      let l48 = i32::from(*ptr0.add(116).cast::<u8>());

                                      super::super::super::golem::order::api::Address{
                                        street1: _rt::string_lift(bytes23),
                                        street2: match l24 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l25 = *ptr0.add(52).cast::<*mut u8>();
                                              let l26 = *ptr0.add(56).cast::<usize>();
                                              let len27 = l26;
                                              let bytes27 = _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                              _rt::string_lift(bytes27)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                        city: _rt::string_lift(bytes30),
                                        state_or_region: _rt::string_lift(bytes33),
                                        country: _rt::string_lift(bytes36),
                                        postal_code: _rt::string_lift(bytes39),
                                        name: match l40 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l41 = *ptr0.add(96).cast::<*mut u8>();
                                              let l42 = *ptr0.add(100).cast::<usize>();
                                              let len43 = l42;
                                              let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                              _rt::string_lift(bytes43)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                        business_name: match l44 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l45 = *ptr0.add(108).cast::<*mut u8>();
                                              let l46 = *ptr0.add(112).cast::<usize>();
                                              let len47 = l46;
                                              let bytes47 = _rt::Vec::from_raw_parts(l45.cast(), len47, len47);

                                              _rt::string_lift(bytes47)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                        phone_number: match l48 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l49 = *ptr0.add(120).cast::<*mut u8>();
                                              let l50 = *ptr0.add(124).cast::<usize>();
                                              let len51 = l50;
                                              let bytes51 = _rt::Vec::from_raw_parts(l49.cast(), len51, len51);

                                              _rt::string_lift(bytes51)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => _rt::invalid_enum_discriminant(),
                                },
                                shipping_address: match l52 {
                                  0 => None,
                                  1 => {
                                    let e = {
                                      let l53 = *ptr0.add(132).cast::<*mut u8>();
                                      let l54 = *ptr0.add(136).cast::<usize>();
                                      let len55 = l54;
                                      let bytes55 = _rt::Vec::from_raw_parts(l53.cast(), len55, len55);
                                      let l56 = i32::from(*ptr0.add(140).cast::<u8>());
                                      let l60 = *ptr0.add(152).cast::<*mut u8>();
                                      let l61 = *ptr0.add(156).cast::<usize>();
                                      let len62 = l61;
                                      let bytes62 = _rt::Vec::from_raw_parts(l60.cast(), len62, len62);
                                      let l63 = *ptr0.add(160).cast::<*mut u8>();
                                      let l64 = *ptr0.add(164).cast::<usize>();
                                      let len65 = l64;
                                      let bytes65 = _rt::Vec::from_raw_parts(l63.cast(), len65, len65);
                                      let l66 = *ptr0.add(168).cast::<*mut u8>();
                                      let l67 = *ptr0.add(172).cast::<usize>();
                                      let len68 = l67;
                                      let bytes68 = _rt::Vec::from_raw_parts(l66.cast(), len68, len68);
                                      let l69 = *ptr0.add(176).cast::<*mut u8>();
                                      let l70 = *ptr0.add(180).cast::<usize>();
                                      let len71 = l70;
                                      let bytes71 = _rt::Vec::from_raw_parts(l69.cast(), len71, len71);
                                      let l72 = i32::from(*ptr0.add(184).cast::<u8>());
                                      let l76 = i32::from(*ptr0.add(196).cast::<u8>());
                                      let l80 = i32::from(*ptr0.add(208).cast::<u8>());

                                      super::super::super::golem::order::api::Address{
                                        street1: _rt::string_lift(bytes55),
                                        street2: match l56 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l57 = *ptr0.add(144).cast::<*mut u8>();
                                              let l58 = *ptr0.add(148).cast::<usize>();
                                              let len59 = l58;
                                              let bytes59 = _rt::Vec::from_raw_parts(l57.cast(), len59, len59);

                                              _rt::string_lift(bytes59)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                        city: _rt::string_lift(bytes62),
                                        state_or_region: _rt::string_lift(bytes65),
                                        country: _rt::string_lift(bytes68),
                                        postal_code: _rt::string_lift(bytes71),
                                        name: match l72 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l73 = *ptr0.add(188).cast::<*mut u8>();
                                              let l74 = *ptr0.add(192).cast::<usize>();
                                              let len75 = l74;
                                              let bytes75 = _rt::Vec::from_raw_parts(l73.cast(), len75, len75);

                                              _rt::string_lift(bytes75)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                        business_name: match l76 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l77 = *ptr0.add(200).cast::<*mut u8>();
                                              let l78 = *ptr0.add(204).cast::<usize>();
                                              let len79 = l78;
                                              let bytes79 = _rt::Vec::from_raw_parts(l77.cast(), len79, len79);

                                              _rt::string_lift(bytes79)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                        phone_number: match l80 {
                                          0 => None,
                                          1 => {
                                            let e = {
                                              let l81 = *ptr0.add(212).cast::<*mut u8>();
                                              let l82 = *ptr0.add(216).cast::<usize>();
                                              let len83 = l82;
                                              let bytes83 = _rt::Vec::from_raw_parts(l81.cast(), len83, len83);

                                              _rt::string_lift(bytes83)
                                            };
                                            Some(e)
                                          }
                                          _ => _rt::invalid_enum_discriminant(),
                                        },
                                      }
                                    };
                                    Some(e)
                                  }
                                  _ => _rt::invalid_enum_discriminant(),
                                },
                                total: l84,
                                currency: _rt::string_lift(bytes87),
                                timestamp: l88 as u64,
                              }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> FutureGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:order-stub/stub-order")]
                        extern "C" {
                            #[link_name = "[method]api.get"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureGetResult::from_handle(ret as u32)
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod pricing {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct PricingItem {
                pub price: f32,
                pub currency: _rt::String,
                pub zone: _rt::String,
            }
            impl ::core::fmt::Debug for PricingItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PricingItem")
                        .field("price", &self.price)
                        .field("currency", &self.currency)
                        .field("zone", &self.zone)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Pricing {
                pub asset_id: _rt::String,
                pub msrp_prices: _rt::Vec<PricingItem>,
                pub list_prices: _rt::Vec<PricingItem>,
            }
            impl ::core::fmt::Debug for Pricing {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Pricing")
                        .field("asset-id", &self.asset_id)
                        .field("msrp-prices", &self.msrp_prices)
                        .field("list-prices", &self.list_prices)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_pricing(msrp_prices: &[PricingItem], list_prices: &[PricingItem]) {
                unsafe {
                    let vec3 = msrp_prices;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 20, 4);
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 20);
                        {
                            let PricingItem { price: price0, currency: currency0, zone: zone0 } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                            let vec1 = currency0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(8).cast::<usize>() = len1;
                            *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                            let vec2 = zone0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(16).cast::<usize>() = len2;
                            *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    let vec7 = list_prices;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 20, 4);
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7.add(i * 20);
                        {
                            let PricingItem { price: price4, currency: currency4, zone: zone4 } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                            let vec5 = currency4;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(8).cast::<usize>() = len5;
                            *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = zone4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *base.add(16).cast::<usize>() = len6;
                            *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    }

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing/api")]
                    extern "C" {
                        #[link_name = "initialize-pricing"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(result3, len3, result7, len7);
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    if layout7.size() != 0 {
                        _rt::alloc::dealloc(result7.cast(), layout7);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_price(currency: &str, zone: &str) -> Option<PricingItem> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = currency;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = zone;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing/api")]
                    extern "C" {
                        #[link_name = "get-price"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<f32>();
                                let l5 = *ptr2.add(8).cast::<*mut u8>();
                                let l6 = *ptr2.add(12).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                let l8 = *ptr2.add(16).cast::<*mut u8>();
                                let l9 = *ptr2.add(20).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                PricingItem {
                                    price: l4,
                                    currency: _rt::string_lift(bytes7),
                                    zone: _rt::string_lift(bytes10),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_pricing(msrp_prices: &[PricingItem], list_prices: &[PricingItem]) {
                unsafe {
                    let vec3 = msrp_prices;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 20, 4);
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 20);
                        {
                            let PricingItem { price: price0, currency: currency0, zone: zone0 } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                            let vec1 = currency0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(8).cast::<usize>() = len1;
                            *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                            let vec2 = zone0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(16).cast::<usize>() = len2;
                            *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    let vec7 = list_prices;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 20, 4);
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7.add(i * 20);
                        {
                            let PricingItem { price: price4, currency: currency4, zone: zone4 } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                            let vec5 = currency4;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(8).cast::<usize>() = len5;
                            *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = zone4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *base.add(16).cast::<usize>() = len6;
                            *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    }

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing/api")]
                    extern "C" {
                        #[link_name = "update-pricing"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(result3, len3, result7, len7);
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    if layout7.size() != 0 {
                        _rt::alloc::dealloc(result7.cast(), layout7);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Pricing> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                let l5 = *ptr0.add(12).cast::<*mut u8>();
                                let l6 = *ptr0.add(16).cast::<usize>();
                                let base14 = l5;
                                let len14 = l6;
                                let mut result14 = _rt::Vec::with_capacity(len14);
                                for i in 0..len14 {
                                    let base = base14.add(i * 20);
                                    let e14 = {
                                        let l7 = *base.add(0).cast::<f32>();
                                        let l8 = *base.add(4).cast::<*mut u8>();
                                        let l9 = *base.add(8).cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 =
                                            _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                                        let l11 = *base.add(12).cast::<*mut u8>();
                                        let l12 = *base.add(16).cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 =
                                            _rt::Vec::from_raw_parts(l11.cast(), len13, len13);

                                        PricingItem {
                                            price: l7,
                                            currency: _rt::string_lift(bytes10),
                                            zone: _rt::string_lift(bytes13),
                                        }
                                    };
                                    result14.push(e14);
                                }
                                _rt::cabi_dealloc(base14, len14 * 20, 4);
                                let l15 = *ptr0.add(20).cast::<*mut u8>();
                                let l16 = *ptr0.add(24).cast::<usize>();
                                let base24 = l15;
                                let len24 = l16;
                                let mut result24 = _rt::Vec::with_capacity(len24);
                                for i in 0..len24 {
                                    let base = base24.add(i * 20);
                                    let e24 = {
                                        let l17 = *base.add(0).cast::<f32>();
                                        let l18 = *base.add(4).cast::<*mut u8>();
                                        let l19 = *base.add(8).cast::<usize>();
                                        let len20 = l19;
                                        let bytes20 =
                                            _rt::Vec::from_raw_parts(l18.cast(), len20, len20);
                                        let l21 = *base.add(12).cast::<*mut u8>();
                                        let l22 = *base.add(16).cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 =
                                            _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                        PricingItem {
                                            price: l17,
                                            currency: _rt::string_lift(bytes20),
                                            zone: _rt::string_lift(bytes23),
                                        }
                                    };
                                    result24.push(e24);
                                }
                                _rt::cabi_dealloc(base24, len24 * 20, 4);

                                Pricing {
                                    asset_id: _rt::string_lift(bytes4),
                                    msrp_prices: result14,
                                    list_prices: result24,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod pricing_stub {
        #[allow(dead_code, clippy::all)]
        pub mod stub_pricing {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type GolemRpcUri = super::super::super::golem::rpc::types::Uri;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type PricingItem = super::super::super::golem::pricing::api::PricingItem;
            pub type Pricing = super::super::super::golem::pricing::api::Pricing;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetPriceResult {
                handle: _rt::Resource<FutureGetPriceResult>,
            }

            impl FutureGetPriceResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureGetPriceResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-price-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetResult {
                handle: _rt::Resource<FutureGetResult>,
            }

            impl FutureGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }

            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl FutureGetPriceResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]future-get-price-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureGetPriceResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<PricingItem>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]future-get-price-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<f32>();
                                                let l4 = *ptr0.add(12).cast::<*mut u8>();
                                                let l5 = *ptr0.add(16).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                                let l7 = *ptr0.add(20).cast::<*mut u8>();
                                                let l8 = *ptr0.add(24).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                super::super::super::golem::pricing::api::PricingItem{
                                      price: l3,
                                      currency: _rt::string_lift(bytes6),
                                      zone: _rt::string_lift(bytes9),
                                    }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]future-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<Pricing>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]future-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let base15 = l6;
                                                let len15 = l7;
                                                let mut result15 = _rt::Vec::with_capacity(len15);
                                                for i in 0..len15 {
                                                    let base = base15.add(i * 20);
                                                    let e15 = {
                                                        let l8 = *base.add(0).cast::<f32>();
                                                        let l9 = *base.add(4).cast::<*mut u8>();
                                                        let l10 = *base.add(8).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = *base.add(12).cast::<*mut u8>();
                                                        let l13 = *base.add(16).cast::<usize>();
                                                        let len14 = l13;
                                                        let bytes14 = _rt::Vec::from_raw_parts(
                                                            l12.cast(),
                                                            len14,
                                                            len14,
                                                        );

                                                        super::super::super::golem::pricing::api::PricingItem{
                                          price: l8,
                                          currency: _rt::string_lift(bytes11),
                                          zone: _rt::string_lift(bytes14),
                                        }
                                                    };
                                                    result15.push(e15);
                                                }
                                                _rt::cabi_dealloc(base15, len15 * 20, 4);
                                                let l16 = *ptr0.add(24).cast::<*mut u8>();
                                                let l17 = *ptr0.add(28).cast::<usize>();
                                                let base25 = l16;
                                                let len25 = l17;
                                                let mut result25 = _rt::Vec::with_capacity(len25);
                                                for i in 0..len25 {
                                                    let base = base25.add(i * 20);
                                                    let e25 = {
                                                        let l18 = *base.add(0).cast::<f32>();
                                                        let l19 = *base.add(4).cast::<*mut u8>();
                                                        let l20 = *base.add(8).cast::<usize>();
                                                        let len21 = l20;
                                                        let bytes21 = _rt::Vec::from_raw_parts(
                                                            l19.cast(),
                                                            len21,
                                                            len21,
                                                        );
                                                        let l22 = *base.add(12).cast::<*mut u8>();
                                                        let l23 = *base.add(16).cast::<usize>();
                                                        let len24 = l23;
                                                        let bytes24 = _rt::Vec::from_raw_parts(
                                                            l22.cast(),
                                                            len24,
                                                            len24,
                                                        );

                                                        super::super::super::golem::pricing::api::PricingItem{
                                          price: l18,
                                          currency: _rt::string_lift(bytes21),
                                          zone: _rt::string_lift(bytes24),
                                        }
                                                    };
                                                    result25.push(e25);
                                                }
                                                _rt::cabi_dealloc(base25, len25 * 20, 4);

                                                super::super::super::golem::pricing::api::Pricing {
                                                    asset_id: _rt::string_lift(bytes5),
                                                    msrp_prices: result15,
                                                    list_prices: result25,
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &GolemRpcUri) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::Uri { value: value0 } =
                            location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 20, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 20, 4);
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-pricing"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3, result7, len7);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 20, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 20, 4);
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.initialize-pricing"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3, result7, len7);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get_price(
                    &self,
                    currency: &str,
                    zone: &str,
                ) -> Option<PricingItem> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = currency;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = zone;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get-price"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = *ptr2.add(4).cast::<f32>();
                                    let l5 = *ptr2.add(8).cast::<*mut u8>();
                                    let l6 = *ptr2.add(12).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                    let l8 = *ptr2.add(16).cast::<*mut u8>();
                                    let l9 = *ptr2.add(20).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                    super::super::super::golem::pricing::api::PricingItem {
                                        price: l4,
                                        currency: _rt::string_lift(bytes7),
                                        zone: _rt::string_lift(bytes10),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_price(&self, currency: &str, zone: &str) -> FutureGetPriceResult {
                    unsafe {
                        let vec0 = currency;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = zone;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.get-price"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                        );
                        FutureGetPriceResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_update_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 20, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 20, 4);
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-update-pricing"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3, result7, len7);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 20, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 20, 4);
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.update-pricing"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3, result7, len7);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get(&self) -> Option<Pricing> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                    let l5 = *ptr0.add(12).cast::<*mut u8>();
                                    let l6 = *ptr0.add(16).cast::<usize>();
                                    let base14 = l5;
                                    let len14 = l6;
                                    let mut result14 = _rt::Vec::with_capacity(len14);
                                    for i in 0..len14 {
                                        let base = base14.add(i * 20);
                                        let e14 = {
                                            let l7 = *base.add(0).cast::<f32>();
                                            let l8 = *base.add(4).cast::<*mut u8>();
                                            let l9 = *base.add(8).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                                            let l11 = *base.add(12).cast::<*mut u8>();
                                            let l12 = *base.add(16).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(l11.cast(), len13, len13);

                                            super::super::super::golem::pricing::api::PricingItem {
                                                price: l7,
                                                currency: _rt::string_lift(bytes10),
                                                zone: _rt::string_lift(bytes13),
                                            }
                                        };
                                        result14.push(e14);
                                    }
                                    _rt::cabi_dealloc(base14, len14 * 20, 4);
                                    let l15 = *ptr0.add(20).cast::<*mut u8>();
                                    let l16 = *ptr0.add(24).cast::<usize>();
                                    let base24 = l15;
                                    let len24 = l16;
                                    let mut result24 = _rt::Vec::with_capacity(len24);
                                    for i in 0..len24 {
                                        let base = base24.add(i * 20);
                                        let e24 = {
                                            let l17 = *base.add(0).cast::<f32>();
                                            let l18 = *base.add(4).cast::<*mut u8>();
                                            let l19 = *base.add(8).cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(l18.cast(), len20, len20);
                                            let l21 = *base.add(12).cast::<*mut u8>();
                                            let l22 = *base.add(16).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 =
                                                _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                            super::super::super::golem::pricing::api::PricingItem {
                                                price: l17,
                                                currency: _rt::string_lift(bytes20),
                                                zone: _rt::string_lift(bytes23),
                                            }
                                        };
                                        result24.push(e24);
                                    }
                                    _rt::cabi_dealloc(base24, len24 * 20, 4);

                                    super::super::super::golem::pricing::api::Pricing {
                                        asset_id: _rt::string_lift(bytes4),
                                        msrp_prices: result14,
                                        list_prices: result24,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> FutureGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:pricing-stub/stub-pricing")]
                        extern "C" {
                            #[link_name = "[method]api.get"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureGetResult::from_handle(ret as u32)
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod product {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Product {
                pub product_id: _rt::String,
                pub name: _rt::String,
                pub description: _rt::String,
            }
            impl ::core::fmt::Debug for Product {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Product")
                        .field("product-id", &self.product_id)
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_product(name: &str, description: &str) {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = description;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:product/api")]
                    extern "C" {
                        #[link_name = "initialize-product"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Product> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:product/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                let l5 = *ptr0.add(12).cast::<*mut u8>();
                                let l6 = *ptr0.add(16).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                let l8 = *ptr0.add(20).cast::<*mut u8>();
                                let l9 = *ptr0.add(24).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                Product {
                                    product_id: _rt::string_lift(bytes4),
                                    name: _rt::string_lift(bytes7),
                                    description: _rt::string_lift(bytes10),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod product_stub {
        #[allow(dead_code, clippy::all)]
        pub mod stub_product {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type GolemRpcUri = super::super::super::golem::rpc::types::Uri;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type Product = super::super::super::golem::product::api::Product;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetResult {
                handle: _rt::Resource<FutureGetResult>,
            }

            impl FutureGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }

            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[method]future-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<Product>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[method]future-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                                                let l9 = *ptr0.add(24).cast::<*mut u8>();
                                                let l10 = *ptr0.add(28).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );

                                                super::super::super::golem::product::api::Product {
                                                    product_id: _rt::string_lift(bytes5),
                                                    name: _rt::string_lift(bytes8),
                                                    description: _rt::string_lift(bytes11),
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &GolemRpcUri) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::Uri { value: value0 } =
                            location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_product(&self, name: &str, description: &str) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = description;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-product"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                        );
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_product(&self, name: &str, description: &str) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = description;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[method]api.initialize-product"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                        );
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get(&self) -> Option<Product> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 28]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                    let l5 = *ptr0.add(12).cast::<*mut u8>();
                                    let l6 = *ptr0.add(16).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                    let l8 = *ptr0.add(20).cast::<*mut u8>();
                                    let l9 = *ptr0.add(24).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                    super::super::super::golem::product::api::Product {
                                        product_id: _rt::string_lift(bytes4),
                                        name: _rt::string_lift(bytes7),
                                        description: _rt::string_lift(bytes10),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> FutureGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:product-stub/stub-product")]
                        extern "C" {
                            #[link_name = "[method]api.get"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureGetResult::from_handle(ret as u32)
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => f.debug_tuple("WitNode::PrimU8").field(e).finish(),
                        WitNode::PrimU16(e) => f.debug_tuple("WitNode::PrimU16").field(e).finish(),
                        WitNode::PrimU32(e) => f.debug_tuple("WitNode::PrimU32").field(e).finish(),
                        WitNode::PrimU64(e) => f.debug_tuple("WitNode::PrimU64").field(e).finish(),
                        WitNode::PrimS8(e) => f.debug_tuple("WitNode::PrimS8").field(e).finish(),
                        WitNode::PrimS16(e) => f.debug_tuple("WitNode::PrimS16").field(e).finish(),
                        WitNode::PrimS32(e) => f.debug_tuple("WitNode::PrimS32").field(e).finish(),
                        WitNode::PrimS64(e) => f.debug_tuple("WitNode::PrimS64").field(e).finish(),
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => f.debug_tuple("WitNode::Handle").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => f.debug_tuple("RpcError::Denied").field(e).finish(),
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for RpcError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }

            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }

            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;

                                                        _rt::Vec::from_raw_parts(
                                                            l18.cast(),
                                                            len20,
                                                            len20,
                                                        )
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 =
                                                        {
                                                            let l21 = *base.add(8).cast::<i32>();
                                                            let l22 = i32::from(
                                                                *base.add(12).cast::<u8>(),
                                                            );

                                                            (l21 as u32, match l22 {
                                                    0 => None,
                                                    1 => {
                                                      let e = {
                                                        let l23 = *base.add(16).cast::<i32>();

                                                        l23
                                                      };
                                                      Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                  })
                                                        };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();

                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 =
                                                            _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);

                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;

                                                        _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        )
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;

                                                        _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        )
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 =
                                                                        *base.add(12).cast::<i32>();

                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l38 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l39 = *base.add(16).cast::<i32>();

                                                              l39
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l40 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l41 = *base.add(16).cast::<i32>();

                                                              l41
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 =
                                                            i32::from(*base.add(8).cast::<u16>());

                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();

                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();

                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 =
                                                            i32::from(*base.add(8).cast::<i8>());

                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 =
                                                            i32::from(*base.add(8).cast::<i16>());

                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();

                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();

                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();

                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();

                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );

                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 21,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();

                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };

                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);

                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );

                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );

                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );

                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );

                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };

                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };

                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 =
                                                            i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l7 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len8 = l7;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l6.cast(),
                                                                        len8,
                                                                        len8,
                                                                    )
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 =
                                                                        *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    (l9 as u32, match l10 {
                                                                              0 => None,
                                                                              1 => {
                                                                                let e = {
                                                                                  let l11 = *base.add(16).cast::<i32>();

                                                                                  l11
                                                                                };
                                                                                Some(e)
                                                                              }
                                                                              _ => _rt::invalid_enum_discriminant(),
                                                                            })
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l14 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 =
                                                                        _rt::Vec::with_capacity(
                                                                            len16,
                                                                        );
                                                                    for i in 0..len16 {
                                                                        let base =
                                                                            base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(
                                                                                *base
                                                                                    .add(0)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l15 as u8,
                                                                            )
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base16,
                                                                        len16 * 1,
                                                                        1,
                                                                    );

                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len19 = l18;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l17.cast(),
                                                                        len19,
                                                                        len19,
                                                                    )
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len22 = l21;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    )
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l23 {
                                                                              0 => None,
                                                                              1 => {
                                                                                let e = {
                                                                                  let l24 = *base.add(12).cast::<i32>();

                                                                                  l24
                                                                                };
                                                                                Some(e)
                                                                              }
                                                                              _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l25 {
                                                                              0 => {
                                                                                let e = {
                                                                                  let l26 = i32::from(*base.add(12).cast::<u8>());

                                                                                  match l26 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                      let e = {
                                                                                        let l27 = *base.add(16).cast::<i32>();

                                                                                        l27
                                                                                      };
                                                                                      Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                  }
                                                                                };
                                                                                Ok(e)
                                                                              }
                                                                              1 => {
                                                                                let e = {
                                                                                  let l28 = i32::from(*base.add(12).cast::<u8>());

                                                                                  match l28 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                      let e = {
                                                                                        let l29 = *base.add(16).cast::<i32>();

                                                                                        l29
                                                                                      };
                                                                                      Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                  }
                                                                                };
                                                                                Err(e)
                                                                              }
                                                                              _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(
                                                                        *base.add(8).cast::<u16>(),
                                                                    );

                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(
                                                                        *base.add(8).cast::<i8>(),
                                                                    );

                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(
                                                                        *base.add(8).cast::<i16>(),
                                                                    );

                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 =
                                                                        *base.add(8).cast::<f32>();

                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 =
                                                                        *base.add(8).cast::<f64>();

                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 =
                                                                        *base.add(8).cast::<i32>();

                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l43 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l42.cast(),
                                                                            len44,
                                                                            len44,
                                                                        );

                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 21,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e49 = {
                                                                    let l45 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l45.cast(),
                                                                            len47,
                                                                            len47,
                                                                        );
                                                                    let l48 =
                                                                        *base.add(16).cast::<i64>();

                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(
                                                                                bytes47,
                                                                            ),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };

                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);

                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );

                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );

                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );

                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 3,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e64 = {
                                                            let l61 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );

                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };

                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod clocks {
        #[allow(dead_code, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import() -> i64;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// occured.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import(_: i64) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the given duration has
            /// elapsed, starting at the time at which this function was called.
            /// occured.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import(_: i64) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod io {
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }

            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod cart {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct Address {
                    pub street1: _rt::String,
                    pub street2: Option<_rt::String>,
                    pub city: _rt::String,
                    pub state_or_region: _rt::String,
                    pub country: _rt::String,
                    pub postal_code: _rt::String,
                    pub name: Option<_rt::String>,
                    pub business_name: Option<_rt::String>,
                    pub phone_number: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Address {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Address")
                            .field("street1", &self.street1)
                            .field("street2", &self.street2)
                            .field("city", &self.city)
                            .field("state-or-region", &self.state_or_region)
                            .field("country", &self.country)
                            .field("postal-code", &self.postal_code)
                            .field("name", &self.name)
                            .field("business-name", &self.business_name)
                            .field("phone-number", &self.phone_number)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct CartItem {
                    pub product_id: _rt::String,
                    pub name: _rt::String,
                    pub price: f32,
                    pub quantity: u32,
                }
                impl ::core::fmt::Debug for CartItem {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CartItem")
                            .field("product-id", &self.product_id)
                            .field("name", &self.name)
                            .field("price", &self.price)
                            .field("quantity", &self.quantity)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Cart {
                    pub user_id: _rt::String,
                    pub items: _rt::Vec<CartItem>,
                    pub billing_address: Option<Address>,
                    pub shipping_address: Option<Address>,
                    pub total: f32,
                    pub currency: _rt::String,
                    pub timestamp: u64,
                    pub previous_order_ids: _rt::Vec<_rt::String>,
                }
                impl ::core::fmt::Debug for Cart {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Cart")
                            .field("user-id", &self.user_id)
                            .field("items", &self.items)
                            .field("billing-address", &self.billing_address)
                            .field("shipping-address", &self.shipping_address)
                            .field("total", &self.total)
                            .field("currency", &self.currency)
                            .field("timestamp", &self.timestamp)
                            .field("previous-order-ids", &self.previous_order_ids)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct OrderConfirmation {
                    pub order_id: _rt::String,
                }
                impl ::core::fmt::Debug for OrderConfirmation {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("OrderConfirmation")
                            .field("order-id", &self.order_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ProductNotFoundError {
                    pub message: _rt::String,
                    pub product_id: _rt::String,
                }
                impl ::core::fmt::Debug for ProductNotFoundError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ProductNotFoundError")
                            .field("message", &self.message)
                            .field("product-id", &self.product_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct PricingNotFoundError {
                    pub message: _rt::String,
                    pub product_id: _rt::String,
                }
                impl ::core::fmt::Debug for PricingNotFoundError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PricingNotFoundError")
                            .field("message", &self.message)
                            .field("product-id", &self.product_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct AddressNotValidError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for AddressNotValidError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("AddressNotValidError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ItemNotFoundError {
                    pub message: _rt::String,
                    pub product_id: _rt::String,
                }
                impl ::core::fmt::Debug for ItemNotFoundError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ItemNotFoundError")
                            .field("message", &self.message)
                            .field("product-id", &self.product_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct EmptyItemsError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for EmptyItemsError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("EmptyItemsError").field("message", &self.message).finish()
                    }
                }
                #[derive(Clone)]
                pub struct BillingAddressNotSetError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for BillingAddressNotSetError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("BillingAddressNotSetError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum Error {
                    ProductNotFound(ProductNotFoundError),
                    PricingNotFound(PricingNotFoundError),
                    AddressNotValid(AddressNotValidError),
                    ItemNotFound(ItemNotFoundError),
                    EmptyItems(EmptyItemsError),
                    BillingAddressNotSet(BillingAddressNotSetError),
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Error::ProductNotFound(e) => {
                                f.debug_tuple("Error::ProductNotFound").field(e).finish()
                            }
                            Error::PricingNotFound(e) => {
                                f.debug_tuple("Error::PricingNotFound").field(e).finish()
                            }
                            Error::AddressNotValid(e) => {
                                f.debug_tuple("Error::AddressNotValid").field(e).finish()
                            }
                            Error::ItemNotFound(e) => {
                                f.debug_tuple("Error::ItemNotFound").field(e).finish()
                            }
                            Error::EmptyItems(e) => {
                                f.debug_tuple("Error::EmptyItems").field(e).finish()
                            }
                            Error::BillingAddressNotSet(e) => {
                                f.debug_tuple("Error::BillingAddressNotSet").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }

                impl std::error::Error for Error {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_add_item_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::add_item(_rt::string_lift(bytes0), arg2 as u32);
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::ProductNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message3,
                                        product_id: product_id3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(20).cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                Error::PricingNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message6,
                                        product_id: product_id6,
                                    } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = (product_id6.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(20).cast::<usize>() = len8;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                Error::AddressNotValid(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let AddressNotValidError { message: message9 } = e;
                                    let vec10 = (message9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2.add(12).cast::<usize>() = len10;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                Error::ItemNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let ItemNotFoundError {
                                        message: message11,
                                        product_id: product_id11,
                                    } = e;
                                    let vec12 = (message11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2.add(12).cast::<usize>() = len12;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = (product_id11.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr2.add(20).cast::<usize>() = len13;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                Error::EmptyItems(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let EmptyItemsError { message: message14 } = e;
                                    let vec15 = (message14.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr2.add(12).cast::<usize>() = len15;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                Error::BillingAddressNotSet(e) => {
                                    *ptr2.add(4).cast::<u8>() = (5i32) as u8;
                                    let BillingAddressNotSetError { message: message16 } = e;
                                    let vec17 = (message16.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr2.add(12).cast::<usize>() = len17;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_add_item<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                2 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                3 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                4 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                _ => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_remove_item_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::remove_item(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::ProductNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message3,
                                        product_id: product_id3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(20).cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                Error::PricingNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message6,
                                        product_id: product_id6,
                                    } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = (product_id6.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(20).cast::<usize>() = len8;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                Error::AddressNotValid(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let AddressNotValidError { message: message9 } = e;
                                    let vec10 = (message9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2.add(12).cast::<usize>() = len10;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                Error::ItemNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let ItemNotFoundError {
                                        message: message11,
                                        product_id: product_id11,
                                    } = e;
                                    let vec12 = (message11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2.add(12).cast::<usize>() = len12;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = (product_id11.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr2.add(20).cast::<usize>() = len13;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                Error::EmptyItems(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let EmptyItemsError { message: message14 } = e;
                                    let vec15 = (message14.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr2.add(12).cast::<usize>() = len15;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                Error::BillingAddressNotSet(e) => {
                                    *ptr2.add(4).cast::<u8>() = (5i32) as u8;
                                    let BillingAddressNotSetError { message: message16 } = e;
                                    let vec17 = (message16.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr2.add(12).cast::<usize>() = len17;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_remove_item<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                2 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                3 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                4 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                _ => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_item_quantity_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::update_item_quantity(_rt::string_lift(bytes0), arg2 as u32);
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::ProductNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message3,
                                        product_id: product_id3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(20).cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                Error::PricingNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message6,
                                        product_id: product_id6,
                                    } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = (product_id6.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(20).cast::<usize>() = len8;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                Error::AddressNotValid(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let AddressNotValidError { message: message9 } = e;
                                    let vec10 = (message9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2.add(12).cast::<usize>() = len10;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                Error::ItemNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (3i32) as u8;
                                    let ItemNotFoundError {
                                        message: message11,
                                        product_id: product_id11,
                                    } = e;
                                    let vec12 = (message11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2.add(12).cast::<usize>() = len12;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = (product_id11.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr2.add(20).cast::<usize>() = len13;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                Error::EmptyItems(e) => {
                                    *ptr2.add(4).cast::<u8>() = (4i32) as u8;
                                    let EmptyItemsError { message: message14 } = e;
                                    let vec15 = (message14.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr2.add(12).cast::<usize>() = len15;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                Error::BillingAddressNotSet(e) => {
                                    *ptr2.add(4).cast::<u8>() = (5i32) as u8;
                                    let BillingAddressNotSetError { message: message16 } = e;
                                    let vec17 = (message16.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr2.add(12).cast::<usize>() = len17;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_item_quantity<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                2 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                3 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                4 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                _ => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_shipping_address_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(*arg0.add(8).cast::<u8>());
                    let l7 = *arg0.add(20).cast::<*mut u8>();
                    let l8 = *arg0.add(24).cast::<usize>();
                    let len9 = l8;
                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    let l10 = *arg0.add(28).cast::<*mut u8>();
                    let l11 = *arg0.add(32).cast::<usize>();
                    let len12 = l11;
                    let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                    let l13 = *arg0.add(36).cast::<*mut u8>();
                    let l14 = *arg0.add(40).cast::<usize>();
                    let len15 = l14;
                    let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);
                    let l16 = *arg0.add(44).cast::<*mut u8>();
                    let l17 = *arg0.add(48).cast::<usize>();
                    let len18 = l17;
                    let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                    let l19 = i32::from(*arg0.add(52).cast::<u8>());
                    let l23 = i32::from(*arg0.add(64).cast::<u8>());
                    let l27 = i32::from(*arg0.add(76).cast::<u8>());
                    let result31 = T::update_shipping_address(Address {
                        street1: _rt::string_lift(bytes2),
                        street2: match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = *arg0.add(12).cast::<*mut u8>();
                                    let l5 = *arg0.add(16).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        city: _rt::string_lift(bytes9),
                        state_or_region: _rt::string_lift(bytes12),
                        country: _rt::string_lift(bytes15),
                        postal_code: _rt::string_lift(bytes18),
                        name: match l19 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l20 = *arg0.add(56).cast::<*mut u8>();
                                    let l21 = *arg0.add(60).cast::<usize>();
                                    let len22 = l21;
                                    let bytes22 =
                                        _rt::Vec::from_raw_parts(l20.cast(), len22, len22);

                                    _rt::string_lift(bytes22)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        business_name: match l23 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l24 = *arg0.add(68).cast::<*mut u8>();
                                    let l25 = *arg0.add(72).cast::<usize>();
                                    let len26 = l25;
                                    let bytes26 =
                                        _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                    _rt::string_lift(bytes26)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        phone_number: match l27 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l28 = *arg0.add(80).cast::<*mut u8>();
                                    let l29 = *arg0.add(84).cast::<usize>();
                                    let len30 = l29;
                                    let bytes30 =
                                        _rt::Vec::from_raw_parts(l28.cast(), len30, len30);

                                    _rt::string_lift(bytes30)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    _rt::cabi_dealloc(arg0, 88, 4);
                    let ptr32 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result31 {
                        Ok(_) => {
                            *ptr32.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr32.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::ProductNotFound(e) => {
                                    *ptr32.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message33,
                                        product_id: product_id33,
                                    } = e;
                                    let vec34 = (message33.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr32.add(12).cast::<usize>() = len34;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                    let vec35 = (product_id33.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr32.add(20).cast::<usize>() = len35;
                                    *ptr32.add(16).cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                Error::PricingNotFound(e) => {
                                    *ptr32.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message36,
                                        product_id: product_id36,
                                    } = e;
                                    let vec37 = (message36.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr32.add(12).cast::<usize>() = len37;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr37.cast_mut();
                                    let vec38 = (product_id36.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *ptr32.add(20).cast::<usize>() = len38;
                                    *ptr32.add(16).cast::<*mut u8>() = ptr38.cast_mut();
                                }
                                Error::AddressNotValid(e) => {
                                    *ptr32.add(4).cast::<u8>() = (2i32) as u8;
                                    let AddressNotValidError { message: message39 } = e;
                                    let vec40 = (message39.into_bytes()).into_boxed_slice();
                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                    let len40 = vec40.len();
                                    ::core::mem::forget(vec40);
                                    *ptr32.add(12).cast::<usize>() = len40;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr40.cast_mut();
                                }
                                Error::ItemNotFound(e) => {
                                    *ptr32.add(4).cast::<u8>() = (3i32) as u8;
                                    let ItemNotFoundError {
                                        message: message41,
                                        product_id: product_id41,
                                    } = e;
                                    let vec42 = (message41.into_bytes()).into_boxed_slice();
                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                    let len42 = vec42.len();
                                    ::core::mem::forget(vec42);
                                    *ptr32.add(12).cast::<usize>() = len42;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr42.cast_mut();
                                    let vec43 = (product_id41.into_bytes()).into_boxed_slice();
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    ::core::mem::forget(vec43);
                                    *ptr32.add(20).cast::<usize>() = len43;
                                    *ptr32.add(16).cast::<*mut u8>() = ptr43.cast_mut();
                                }
                                Error::EmptyItems(e) => {
                                    *ptr32.add(4).cast::<u8>() = (4i32) as u8;
                                    let EmptyItemsError { message: message44 } = e;
                                    let vec45 = (message44.into_bytes()).into_boxed_slice();
                                    let ptr45 = vec45.as_ptr().cast::<u8>();
                                    let len45 = vec45.len();
                                    ::core::mem::forget(vec45);
                                    *ptr32.add(12).cast::<usize>() = len45;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr45.cast_mut();
                                }
                                Error::BillingAddressNotSet(e) => {
                                    *ptr32.add(4).cast::<u8>() = (5i32) as u8;
                                    let BillingAddressNotSetError { message: message46 } = e;
                                    let vec47 = (message46.into_bytes()).into_boxed_slice();
                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                    let len47 = vec47.len();
                                    ::core::mem::forget(vec47);
                                    *ptr32.add(12).cast::<usize>() = len47;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr47.cast_mut();
                                }
                            }
                        }
                    };
                    ptr32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_shipping_address<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                2 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                3 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                4 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                _ => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_billing_address_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(*arg0.add(8).cast::<u8>());
                    let l7 = *arg0.add(20).cast::<*mut u8>();
                    let l8 = *arg0.add(24).cast::<usize>();
                    let len9 = l8;
                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    let l10 = *arg0.add(28).cast::<*mut u8>();
                    let l11 = *arg0.add(32).cast::<usize>();
                    let len12 = l11;
                    let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                    let l13 = *arg0.add(36).cast::<*mut u8>();
                    let l14 = *arg0.add(40).cast::<usize>();
                    let len15 = l14;
                    let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);
                    let l16 = *arg0.add(44).cast::<*mut u8>();
                    let l17 = *arg0.add(48).cast::<usize>();
                    let len18 = l17;
                    let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                    let l19 = i32::from(*arg0.add(52).cast::<u8>());
                    let l23 = i32::from(*arg0.add(64).cast::<u8>());
                    let l27 = i32::from(*arg0.add(76).cast::<u8>());
                    let result31 = T::update_billing_address(Address {
                        street1: _rt::string_lift(bytes2),
                        street2: match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = *arg0.add(12).cast::<*mut u8>();
                                    let l5 = *arg0.add(16).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        city: _rt::string_lift(bytes9),
                        state_or_region: _rt::string_lift(bytes12),
                        country: _rt::string_lift(bytes15),
                        postal_code: _rt::string_lift(bytes18),
                        name: match l19 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l20 = *arg0.add(56).cast::<*mut u8>();
                                    let l21 = *arg0.add(60).cast::<usize>();
                                    let len22 = l21;
                                    let bytes22 =
                                        _rt::Vec::from_raw_parts(l20.cast(), len22, len22);

                                    _rt::string_lift(bytes22)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        business_name: match l23 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l24 = *arg0.add(68).cast::<*mut u8>();
                                    let l25 = *arg0.add(72).cast::<usize>();
                                    let len26 = l25;
                                    let bytes26 =
                                        _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                    _rt::string_lift(bytes26)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        phone_number: match l27 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l28 = *arg0.add(80).cast::<*mut u8>();
                                    let l29 = *arg0.add(84).cast::<usize>();
                                    let len30 = l29;
                                    let bytes30 =
                                        _rt::Vec::from_raw_parts(l28.cast(), len30, len30);

                                    _rt::string_lift(bytes30)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    _rt::cabi_dealloc(arg0, 88, 4);
                    let ptr32 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result31 {
                        Ok(_) => {
                            *ptr32.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr32.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::ProductNotFound(e) => {
                                    *ptr32.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message33,
                                        product_id: product_id33,
                                    } = e;
                                    let vec34 = (message33.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr32.add(12).cast::<usize>() = len34;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                    let vec35 = (product_id33.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr32.add(20).cast::<usize>() = len35;
                                    *ptr32.add(16).cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                Error::PricingNotFound(e) => {
                                    *ptr32.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message36,
                                        product_id: product_id36,
                                    } = e;
                                    let vec37 = (message36.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr32.add(12).cast::<usize>() = len37;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr37.cast_mut();
                                    let vec38 = (product_id36.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *ptr32.add(20).cast::<usize>() = len38;
                                    *ptr32.add(16).cast::<*mut u8>() = ptr38.cast_mut();
                                }
                                Error::AddressNotValid(e) => {
                                    *ptr32.add(4).cast::<u8>() = (2i32) as u8;
                                    let AddressNotValidError { message: message39 } = e;
                                    let vec40 = (message39.into_bytes()).into_boxed_slice();
                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                    let len40 = vec40.len();
                                    ::core::mem::forget(vec40);
                                    *ptr32.add(12).cast::<usize>() = len40;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr40.cast_mut();
                                }
                                Error::ItemNotFound(e) => {
                                    *ptr32.add(4).cast::<u8>() = (3i32) as u8;
                                    let ItemNotFoundError {
                                        message: message41,
                                        product_id: product_id41,
                                    } = e;
                                    let vec42 = (message41.into_bytes()).into_boxed_slice();
                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                    let len42 = vec42.len();
                                    ::core::mem::forget(vec42);
                                    *ptr32.add(12).cast::<usize>() = len42;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr42.cast_mut();
                                    let vec43 = (product_id41.into_bytes()).into_boxed_slice();
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    ::core::mem::forget(vec43);
                                    *ptr32.add(20).cast::<usize>() = len43;
                                    *ptr32.add(16).cast::<*mut u8>() = ptr43.cast_mut();
                                }
                                Error::EmptyItems(e) => {
                                    *ptr32.add(4).cast::<u8>() = (4i32) as u8;
                                    let EmptyItemsError { message: message44 } = e;
                                    let vec45 = (message44.into_bytes()).into_boxed_slice();
                                    let ptr45 = vec45.as_ptr().cast::<u8>();
                                    let len45 = vec45.len();
                                    ::core::mem::forget(vec45);
                                    *ptr32.add(12).cast::<usize>() = len45;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr45.cast_mut();
                                }
                                Error::BillingAddressNotSet(e) => {
                                    *ptr32.add(4).cast::<u8>() = (5i32) as u8;
                                    let BillingAddressNotSetError { message: message46 } = e;
                                    let vec47 = (message46.into_bytes()).into_boxed_slice();
                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                    let len47 = vec47.len();
                                    ::core::mem::forget(vec47);
                                    *ptr32.add(12).cast::<usize>() = len47;
                                    *ptr32.add(8).cast::<*mut u8>() = ptr47.cast_mut();
                                }
                            }
                        }
                    };
                    ptr32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_billing_address<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                2 => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                3 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                4 => {
                                    let l16 = *arg0.add(8).cast::<*mut u8>();
                                    let l17 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                _ => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_checkout_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::checkout();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let OrderConfirmation { order_id: order_id2 } = e;
                            let vec3 = (order_id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(8).cast::<usize>() = len3;
                            *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::ProductNotFound(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message4,
                                        product_id: product_id4,
                                    } = e;
                                    let vec5 = (message4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1.add(12).cast::<usize>() = len5;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (product_id4.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1.add(20).cast::<usize>() = len6;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                Error::PricingNotFound(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message7,
                                        product_id: product_id7,
                                    } = e;
                                    let vec8 = (message7.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1.add(12).cast::<usize>() = len8;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    let vec9 = (product_id7.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1.add(20).cast::<usize>() = len9;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                Error::AddressNotValid(e) => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                    let AddressNotValidError { message: message10 } = e;
                                    let vec11 = (message10.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1.add(12).cast::<usize>() = len11;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                Error::ItemNotFound(e) => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                    let ItemNotFoundError {
                                        message: message12,
                                        product_id: product_id12,
                                    } = e;
                                    let vec13 = (message12.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1.add(12).cast::<usize>() = len13;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = (product_id12.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1.add(20).cast::<usize>() = len14;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                Error::EmptyItems(e) => {
                                    *ptr1.add(4).cast::<u8>() = (4i32) as u8;
                                    let EmptyItemsError { message: message15 } = e;
                                    let vec16 = (message15.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr1.add(12).cast::<usize>() = len16;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                Error::BillingAddressNotSet(e) => {
                                    *ptr1.add(4).cast::<u8>() = (5i32) as u8;
                                    let BillingAddressNotSetError { message: message17 } = e;
                                    let vec18 = (message17.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr1.add(12).cast::<usize>() = len18;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_checkout<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = i32::from(*arg0.add(4).cast::<u8>());
                            match l3 {
                                0 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                    let l6 = *arg0.add(16).cast::<*mut u8>();
                                    let l7 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                1 => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                    let l10 = *arg0.add(16).cast::<*mut u8>();
                                    let l11 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                2 => {
                                    let l12 = *arg0.add(8).cast::<*mut u8>();
                                    let l13 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                3 => {
                                    let l14 = *arg0.add(8).cast::<*mut u8>();
                                    let l15 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                    let l16 = *arg0.add(16).cast::<*mut u8>();
                                    let l17 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                4 => {
                                    let l18 = *arg0.add(8).cast::<*mut u8>();
                                    let l19 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0.add(8).cast::<*mut u8>();
                                    let l21 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let Cart {
                                user_id: user_id2,
                                items: items2,
                                billing_address: billing_address2,
                                shipping_address: shipping_address2,
                                total: total2,
                                currency: currency2,
                                timestamp: timestamp2,
                                previous_order_ids: previous_order_ids2,
                            } = e;
                            let vec3 = (user_id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(12).cast::<usize>() = len3;
                            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec7 = items2;
                            let len7 = vec7.len();
                            let layout7 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 24, 4);
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7.add(i * 24);
                                {
                                    let CartItem {
                                        product_id: product_id4,
                                        name: name4,
                                        price: price4,
                                        quantity: quantity4,
                                    } = e;
                                    let vec5 = (product_id4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base.add(4).cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (name4.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    *base.add(16).cast::<f32>() = _rt::as_f32(price4);
                                    *base.add(20).cast::<i32>() = _rt::as_i32(quantity4);
                                }
                            }
                            *ptr1.add(20).cast::<usize>() = len7;
                            *ptr1.add(16).cast::<*mut u8>() = result7;
                            match billing_address2 {
                                Some(e) => {
                                    *ptr1.add(24).cast::<u8>() = (1i32) as u8;
                                    let Address {
                                        street1: street18,
                                        street2: street28,
                                        city: city8,
                                        state_or_region: state_or_region8,
                                        country: country8,
                                        postal_code: postal_code8,
                                        name: name8,
                                        business_name: business_name8,
                                        phone_number: phone_number8,
                                    } = e;
                                    let vec9 = (street18.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1.add(32).cast::<usize>() = len9;
                                    *ptr1.add(28).cast::<*mut u8>() = ptr9.cast_mut();
                                    match street28 {
                                        Some(e) => {
                                            *ptr1.add(36).cast::<u8>() = (1i32) as u8;
                                            let vec10 = (e.into_bytes()).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *ptr1.add(44).cast::<usize>() = len10;
                                            *ptr1.add(40).cast::<*mut u8>() = ptr10.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(36).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec11 = (city8.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1.add(52).cast::<usize>() = len11;
                                    *ptr1.add(48).cast::<*mut u8>() = ptr11.cast_mut();
                                    let vec12 = (state_or_region8.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1.add(60).cast::<usize>() = len12;
                                    *ptr1.add(56).cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = (country8.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1.add(68).cast::<usize>() = len13;
                                    *ptr1.add(64).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = (postal_code8.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1.add(76).cast::<usize>() = len14;
                                    *ptr1.add(72).cast::<*mut u8>() = ptr14.cast_mut();
                                    match name8 {
                                        Some(e) => {
                                            *ptr1.add(80).cast::<u8>() = (1i32) as u8;
                                            let vec15 = (e.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *ptr1.add(88).cast::<usize>() = len15;
                                            *ptr1.add(84).cast::<*mut u8>() = ptr15.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(80).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match business_name8 {
                                        Some(e) => {
                                            *ptr1.add(92).cast::<u8>() = (1i32) as u8;
                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *ptr1.add(100).cast::<usize>() = len16;
                                            *ptr1.add(96).cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(92).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match phone_number8 {
                                        Some(e) => {
                                            *ptr1.add(104).cast::<u8>() = (1i32) as u8;
                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *ptr1.add(112).cast::<usize>() = len17;
                                            *ptr1.add(108).cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(104).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr1.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match shipping_address2 {
                                Some(e) => {
                                    *ptr1.add(116).cast::<u8>() = (1i32) as u8;
                                    let Address {
                                        street1: street118,
                                        street2: street218,
                                        city: city18,
                                        state_or_region: state_or_region18,
                                        country: country18,
                                        postal_code: postal_code18,
                                        name: name18,
                                        business_name: business_name18,
                                        phone_number: phone_number18,
                                    } = e;
                                    let vec19 = (street118.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr1.add(124).cast::<usize>() = len19;
                                    *ptr1.add(120).cast::<*mut u8>() = ptr19.cast_mut();
                                    match street218 {
                                        Some(e) => {
                                            *ptr1.add(128).cast::<u8>() = (1i32) as u8;
                                            let vec20 = (e.into_bytes()).into_boxed_slice();
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            ::core::mem::forget(vec20);
                                            *ptr1.add(136).cast::<usize>() = len20;
                                            *ptr1.add(132).cast::<*mut u8>() = ptr20.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(128).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec21 = (city18.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr1.add(144).cast::<usize>() = len21;
                                    *ptr1.add(140).cast::<*mut u8>() = ptr21.cast_mut();
                                    let vec22 = (state_or_region18.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr1.add(152).cast::<usize>() = len22;
                                    *ptr1.add(148).cast::<*mut u8>() = ptr22.cast_mut();
                                    let vec23 = (country18.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr1.add(160).cast::<usize>() = len23;
                                    *ptr1.add(156).cast::<*mut u8>() = ptr23.cast_mut();
                                    let vec24 = (postal_code18.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *ptr1.add(168).cast::<usize>() = len24;
                                    *ptr1.add(164).cast::<*mut u8>() = ptr24.cast_mut();
                                    match name18 {
                                        Some(e) => {
                                            *ptr1.add(172).cast::<u8>() = (1i32) as u8;
                                            let vec25 = (e.into_bytes()).into_boxed_slice();
                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                            let len25 = vec25.len();
                                            ::core::mem::forget(vec25);
                                            *ptr1.add(180).cast::<usize>() = len25;
                                            *ptr1.add(176).cast::<*mut u8>() = ptr25.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(172).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match business_name18 {
                                        Some(e) => {
                                            *ptr1.add(184).cast::<u8>() = (1i32) as u8;
                                            let vec26 = (e.into_bytes()).into_boxed_slice();
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            ::core::mem::forget(vec26);
                                            *ptr1.add(192).cast::<usize>() = len26;
                                            *ptr1.add(188).cast::<*mut u8>() = ptr26.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(184).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match phone_number18 {
                                        Some(e) => {
                                            *ptr1.add(196).cast::<u8>() = (1i32) as u8;
                                            let vec27 = (e.into_bytes()).into_boxed_slice();
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();
                                            ::core::mem::forget(vec27);
                                            *ptr1.add(204).cast::<usize>() = len27;
                                            *ptr1.add(200).cast::<*mut u8>() = ptr27.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(196).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr1.add(116).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr1.add(208).cast::<f32>() = _rt::as_f32(total2);
                            let vec28 = (currency2.into_bytes()).into_boxed_slice();
                            let ptr28 = vec28.as_ptr().cast::<u8>();
                            let len28 = vec28.len();
                            ::core::mem::forget(vec28);
                            *ptr1.add(216).cast::<usize>() = len28;
                            *ptr1.add(212).cast::<*mut u8>() = ptr28.cast_mut();
                            *ptr1.add(224).cast::<i64>() = _rt::as_i64(timestamp2);
                            let vec30 = previous_order_ids2;
                            let len30 = vec30.len();
                            let layout30 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec30.len() * 8, 4);
                            let result30 = if layout30.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout30);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec30.into_iter().enumerate() {
                                let base = result30.add(i * 8);
                                {
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *base.add(4).cast::<usize>() = len29;
                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                }
                            }
                            *ptr1.add(236).cast::<usize>() = len30;
                            *ptr1.add(232).cast::<*mut u8>() = result30;
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l7 = *arg0.add(16).cast::<*mut u8>();
                            let l8 = *arg0.add(20).cast::<usize>();
                            let base9 = l7;
                            let len9 = l8;
                            for i in 0..len9 {
                                let base = base9.add(i * 24);
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base.add(8).cast::<*mut u8>();
                                    let l6 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            _rt::cabi_dealloc(base9, len9 * 24, 4);
                            let l10 = i32::from(*arg0.add(24).cast::<u8>());
                            match l10 {
                                0 => (),
                                _ => {
                                    let l11 = *arg0.add(28).cast::<*mut u8>();
                                    let l12 = *arg0.add(32).cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                    let l13 = i32::from(*arg0.add(36).cast::<u8>());
                                    match l13 {
                                        0 => (),
                                        _ => {
                                            let l14 = *arg0.add(40).cast::<*mut u8>();
                                            let l15 = *arg0.add(44).cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                    }
                                    let l16 = *arg0.add(48).cast::<*mut u8>();
                                    let l17 = *arg0.add(52).cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                    let l18 = *arg0.add(56).cast::<*mut u8>();
                                    let l19 = *arg0.add(60).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                    let l20 = *arg0.add(64).cast::<*mut u8>();
                                    let l21 = *arg0.add(68).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                    let l22 = *arg0.add(72).cast::<*mut u8>();
                                    let l23 = *arg0.add(76).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                    let l24 = i32::from(*arg0.add(80).cast::<u8>());
                                    match l24 {
                                        0 => (),
                                        _ => {
                                            let l25 = *arg0.add(84).cast::<*mut u8>();
                                            let l26 = *arg0.add(88).cast::<usize>();
                                            _rt::cabi_dealloc(l25, l26, 1);
                                        }
                                    }
                                    let l27 = i32::from(*arg0.add(92).cast::<u8>());
                                    match l27 {
                                        0 => (),
                                        _ => {
                                            let l28 = *arg0.add(96).cast::<*mut u8>();
                                            let l29 = *arg0.add(100).cast::<usize>();
                                            _rt::cabi_dealloc(l28, l29, 1);
                                        }
                                    }
                                    let l30 = i32::from(*arg0.add(104).cast::<u8>());
                                    match l30 {
                                        0 => (),
                                        _ => {
                                            let l31 = *arg0.add(108).cast::<*mut u8>();
                                            let l32 = *arg0.add(112).cast::<usize>();
                                            _rt::cabi_dealloc(l31, l32, 1);
                                        }
                                    }
                                }
                            }
                            let l33 = i32::from(*arg0.add(116).cast::<u8>());
                            match l33 {
                                0 => (),
                                _ => {
                                    let l34 = *arg0.add(120).cast::<*mut u8>();
                                    let l35 = *arg0.add(124).cast::<usize>();
                                    _rt::cabi_dealloc(l34, l35, 1);
                                    let l36 = i32::from(*arg0.add(128).cast::<u8>());
                                    match l36 {
                                        0 => (),
                                        _ => {
                                            let l37 = *arg0.add(132).cast::<*mut u8>();
                                            let l38 = *arg0.add(136).cast::<usize>();
                                            _rt::cabi_dealloc(l37, l38, 1);
                                        }
                                    }
                                    let l39 = *arg0.add(140).cast::<*mut u8>();
                                    let l40 = *arg0.add(144).cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                    let l41 = *arg0.add(148).cast::<*mut u8>();
                                    let l42 = *arg0.add(152).cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                    let l43 = *arg0.add(156).cast::<*mut u8>();
                                    let l44 = *arg0.add(160).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = *arg0.add(164).cast::<*mut u8>();
                                    let l46 = *arg0.add(168).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                    let l47 = i32::from(*arg0.add(172).cast::<u8>());
                                    match l47 {
                                        0 => (),
                                        _ => {
                                            let l48 = *arg0.add(176).cast::<*mut u8>();
                                            let l49 = *arg0.add(180).cast::<usize>();
                                            _rt::cabi_dealloc(l48, l49, 1);
                                        }
                                    }
                                    let l50 = i32::from(*arg0.add(184).cast::<u8>());
                                    match l50 {
                                        0 => (),
                                        _ => {
                                            let l51 = *arg0.add(188).cast::<*mut u8>();
                                            let l52 = *arg0.add(192).cast::<usize>();
                                            _rt::cabi_dealloc(l51, l52, 1);
                                        }
                                    }
                                    let l53 = i32::from(*arg0.add(196).cast::<u8>());
                                    match l53 {
                                        0 => (),
                                        _ => {
                                            let l54 = *arg0.add(200).cast::<*mut u8>();
                                            let l55 = *arg0.add(204).cast::<usize>();
                                            _rt::cabi_dealloc(l54, l55, 1);
                                        }
                                    }
                                }
                            }
                            let l56 = *arg0.add(212).cast::<*mut u8>();
                            let l57 = *arg0.add(216).cast::<usize>();
                            _rt::cabi_dealloc(l56, l57, 1);
                            let l60 = *arg0.add(232).cast::<*mut u8>();
                            let l61 = *arg0.add(236).cast::<usize>();
                            let base62 = l60;
                            let len62 = l61;
                            for i in 0..len62 {
                                let base = base62.add(i * 8);
                                {
                                    let l58 = *base.add(0).cast::<*mut u8>();
                                    let l59 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l58, l59, 1);
                                }
                            }
                            _rt::cabi_dealloc(base62, len62 * 8, 4);
                        }
                    }
                }
                pub trait Guest {
                    fn add_item(product_id: _rt::String, quantity: u32) -> Result<(), Error>;
                    fn remove_item(product_id: _rt::String) -> Result<(), Error>;
                    fn update_item_quantity(
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> Result<(), Error>;
                    fn update_shipping_address(address: Address) -> Result<(), Error>;
                    fn update_billing_address(address: Address) -> Result<(), Error>;
                    fn checkout() -> Result<OrderConfirmation, Error>;
                    fn get() -> Option<Cart>;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_cart_api_cabi{
                                          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

                                            #[export_name = "golem:cart/api#add-item"]
                                            unsafe extern "C" fn export_add_item(arg0: *mut u8,arg1: usize,arg2: i32,) -> *mut u8 {
                                              $($path_to_types)*::_export_add_item_cabi::<$ty>(arg0, arg1, arg2)
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#add-item"]
                                            unsafe extern "C" fn _post_return_add_item(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_add_item::<$ty>(arg0)
                                            }
                                            #[export_name = "golem:cart/api#remove-item"]
                                            unsafe extern "C" fn export_remove_item(arg0: *mut u8,arg1: usize,) -> *mut u8 {
                                              $($path_to_types)*::_export_remove_item_cabi::<$ty>(arg0, arg1)
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#remove-item"]
                                            unsafe extern "C" fn _post_return_remove_item(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_remove_item::<$ty>(arg0)
                                            }
                                            #[export_name = "golem:cart/api#update-item-quantity"]
                                            unsafe extern "C" fn export_update_item_quantity(arg0: *mut u8,arg1: usize,arg2: i32,) -> *mut u8 {
                                              $($path_to_types)*::_export_update_item_quantity_cabi::<$ty>(arg0, arg1, arg2)
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#update-item-quantity"]
                                            unsafe extern "C" fn _post_return_update_item_quantity(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_update_item_quantity::<$ty>(arg0)
                                            }
                                            #[export_name = "golem:cart/api#update-shipping-address"]
                                            unsafe extern "C" fn export_update_shipping_address(arg0: *mut u8,) -> *mut u8 {
                                              $($path_to_types)*::_export_update_shipping_address_cabi::<$ty>(arg0)
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#update-shipping-address"]
                                            unsafe extern "C" fn _post_return_update_shipping_address(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_update_shipping_address::<$ty>(arg0)
                                            }
                                            #[export_name = "golem:cart/api#update-billing-address"]
                                            unsafe extern "C" fn export_update_billing_address(arg0: *mut u8,) -> *mut u8 {
                                              $($path_to_types)*::_export_update_billing_address_cabi::<$ty>(arg0)
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#update-billing-address"]
                                            unsafe extern "C" fn _post_return_update_billing_address(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_update_billing_address::<$ty>(arg0)
                                            }
                                            #[export_name = "golem:cart/api#checkout"]
                                            unsafe extern "C" fn export_checkout() -> *mut u8 {
                                              $($path_to_types)*::_export_checkout_cabi::<$ty>()
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#checkout"]
                                            unsafe extern "C" fn _post_return_checkout(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_checkout::<$ty>(arg0)
                                            }
                                            #[export_name = "golem:cart/api#get"]
                                            unsafe extern "C" fn export_get() -> *mut u8 {
                                              $($path_to_types)*::_export_get_cabi::<$ty>()
                                            }
                                            #[export_name = "cabi_post_golem:cart/api#get"]
                                            unsafe extern "C" fn _post_return_get(arg0: *mut u8,) {
                                              $($path_to_types)*::__post_return_get::<$ty>(arg0)
                                            }
                                          };);
                                        }
                #[doc(hidden)]
                pub(crate) use __export_golem_cart_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 240]);
                static mut _RET_AREA: _RetArea =
                    _RetArea([::core::mem::MaybeUninit::uninit(); 240]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_cart_impl {
                                  ($ty:ident) => (self::export!($ty with_types_in self););
                                  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
                                  $($path_to_types_root)*::exports::golem::cart::api::__export_golem_cart_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::cart::api);
                                  )
                                }
#[doc(inline)]
pub(crate) use __export_cart_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:cart:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 10414] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb3P\x01A\x02\x01A)\x01\
B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[meth\
od]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollable.b\
lock\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\x01\
\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B*\x02\x03\x02\x01\x01\x04\
\0\x08pollable\x03\0\0\x01z\x04\0\x0anode-index\x03\0\x02\x01r\x01\x05values\x04\
\0\x03uri\x03\0\x04\x01p\x03\x01k\x03\x01o\x02y\x07\x01p\x7f\x01j\x01\x07\x01\x07\
\x01o\x02\x05w\x01q\x16\x0crecord-value\x01\x06\0\x0dvariant-value\x01\x08\0\x0a\
enum-value\x01y\0\x0bflags-value\x01\x09\0\x0btuple-value\x01\x06\0\x0alist-valu\
e\x01\x06\0\x0coption-value\x01\x07\0\x0cresult-value\x01\x0a\0\x07prim-u8\x01}\0\
\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08p\
rim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0cp\
rim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01\x0b\0\x04\0\x08wit-node\x03\0\x0c\x01p\x0d\x01r\x01\x05nodes\x0e\
\x04\0\x09wit-value\x03\0\x0f\x01q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\
\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\x03\0\x11\
\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\x01i\x13\x01@\x01\
\x08location\x05\0\x15\x04\0\x15[constructor]wasm-rpc\x01\x16\x01h\x13\x01p\x10\x01\
j\x01\x10\x01\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-params\x18\0\
\x19\x04\0![method]wasm-rpc.invoke-and-await\x01\x1a\x01j\0\x01\x12\x01@\x03\x04\
self\x17\x0dfunction-names\x0ffunction-params\x18\0\x1b\x04\0\x17[method]wasm-rp\
c.invoke\x01\x1c\x01i\x14\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-par\
ams\x18\0\x1d\x04\0'[method]wasm-rpc.async-invoke-and-await\x01\x1e\x01h\x14\x01\
i\x01\x01@\x01\x04self\x1f\0\x20\x04\0&[method]future-invoke-result.subscribe\x01\
!\x01k\x19\x01@\x01\x04self\x1f\0\"\x04\0\x20[method]future-invoke-result.get\x01\
#\x03\x01\x15golem:rpc/types@0.1.0\x05\x02\x01B\x0e\x01r\x03\x05pricev\x08curren\
cys\x04zones\x04\0\x0cpricing-item\x03\0\0\x01p\x01\x01r\x03\x08asset-ids\x0bmsr\
p-prices\x02\x0blist-prices\x02\x04\0\x07pricing\x03\0\x03\x01@\x02\x0bmsrp-pric\
es\x02\x0blist-prices\x02\x01\0\x04\0\x12initialize-pricing\x01\x05\x01k\x01\x01\
@\x02\x08currencys\x04zones\0\x06\x04\0\x09get-price\x01\x07\x04\0\x0eupdate-pri\
cing\x01\x05\x01k\x04\x01@\0\0\x08\x04\0\x03get\x01\x09\x03\x01\x11golem:pricing\
/api\x05\x03\x02\x03\0\x01\x03uri\x02\x03\0\x02\x0cpricing-item\x02\x03\0\x02\x07\
pricing\x01B.\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\0\0\x02\x03\x02\x01\
\x01\x04\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x0cpricing-it\
em\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x07pricing\x03\0\x06\x04\0\x17future-get-\
price-result\x03\x01\x04\0\x11future-get-result\x03\x01\x04\0\x03api\x03\x01\x01\
h\x08\x01i\x03\x01@\x01\x04self\x0b\0\x0c\x04\0)[method]future-get-price-result.\
subscribe\x01\x0d\x01k\x05\x01k\x0e\x01@\x01\x04self\x0b\0\x0f\x04\0#[method]fut\
ure-get-price-result.get\x01\x10\x01h\x09\x01@\x01\x04self\x11\0\x0c\x04\0#[meth\
od]future-get-result.subscribe\x01\x12\x01k\x07\x01k\x13\x01@\x01\x04self\x11\0\x14\
\x04\0\x1d[method]future-get-result.get\x01\x15\x01i\x0a\x01@\x01\x08location\x01\
\0\x16\x04\0\x10[constructor]api\x01\x17\x01h\x0a\x01p\x05\x01@\x03\x04self\x18\x0b\
msrp-prices\x19\x0blist-prices\x19\x01\0\x04\0'[method]api.blocking-initialize-p\
ricing\x01\x1a\x04\0\x1e[method]api.initialize-pricing\x01\x1a\x01@\x03\x04self\x18\
\x08currencys\x04zones\0\x0e\x04\0\x1e[method]api.blocking-get-price\x01\x1b\x01\
i\x08\x01@\x03\x04self\x18\x08currencys\x04zones\0\x1c\x04\0\x15[method]api.get-\
price\x01\x1d\x04\0#[method]api.blocking-update-pricing\x01\x1a\x04\0\x1a[method\
]api.update-pricing\x01\x1a\x01@\x01\x04self\x18\0\x13\x04\0\x18[method]api.bloc\
king-get\x01\x1e\x01i\x09\x01@\x01\x04self\x18\0\x1f\x04\0\x0f[method]api.get\x01\
\x20\x03\x01\x1fgolem:pricing-stub/stub-pricing\x05\x07\x01B\x07\x01r\x03\x0apro\
duct-ids\x04names\x0bdescriptions\x04\0\x07product\x03\0\0\x01@\x02\x04names\x0b\
descriptions\x01\0\x04\0\x12initialize-product\x01\x02\x01k\x01\x01@\0\0\x03\x04\
\0\x03get\x01\x04\x03\x01\x11golem:product/api\x05\x08\x02\x03\0\x04\x07product\x01\
B\x1c\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\0\0\x02\x03\x02\x01\x01\x04\
\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x07product\x03\0\x04\x04\
\0\x11future-get-result\x03\x01\x04\0\x03api\x03\x01\x01h\x06\x01i\x03\x01@\x01\x04\
self\x08\0\x09\x04\0#[method]future-get-result.subscribe\x01\x0a\x01k\x05\x01k\x0b\
\x01@\x01\x04self\x08\0\x0c\x04\0\x1d[method]future-get-result.get\x01\x0d\x01i\x07\
\x01@\x01\x08location\x01\0\x0e\x04\0\x10[constructor]api\x01\x0f\x01h\x07\x01@\x03\
\x04self\x10\x04names\x0bdescriptions\x01\0\x04\0'[method]api.blocking-initializ\
e-product\x01\x11\x04\0\x1e[method]api.initialize-product\x01\x11\x01@\x01\x04se\
lf\x10\0\x0b\x04\0\x18[method]api.blocking-get\x01\x12\x01i\x06\x01@\x01\x04self\
\x10\0\x13\x04\0\x0f[method]api.get\x01\x14\x03\x01\x1fgolem:product-stub/stub-p\
roduct\x05\x0a\x01B.\x01m\x03\x03new\x07shipped\x09cancelled\x04\0\x0corder-stat\
us\x03\0\0\x01ks\x01r\x09\x07street1s\x07street2\x02\x04citys\x0fstate-or-region\
s\x07countrys\x0bpostal-codes\x04name\x02\x0dbusiness-name\x02\x0cphone-number\x02\
\x04\0\x07address\x03\0\x03\x01r\x04\x0aproduct-ids\x04names\x05pricev\x08quanti\
tyy\x04\0\x0aorder-item\x03\0\x05\x01p\x06\x01k\x04\x01r\x09\x08order-ids\x07use\
r-ids\x0corder-status\x01\x05items\x07\x0fbilling-address\x08\x10shipping-addres\
s\x08\x05totalv\x08currencys\x09timestampw\x04\0\x05order\x03\0\x09\x01r\x07\x07\
user-ids\x05items\x07\x0fbilling-address\x08\x10shipping-address\x08\x05totalv\x08\
currencys\x09timestampw\x04\0\x0ccreate-order\x03\0\x0b\x01r\x02\x07messages\x0a\
product-ids\x04\0\x17product-not-found-error\x03\0\x0d\x01r\x02\x07messages\x0ap\
roduct-ids\x04\0\x17pricing-not-found-error\x03\0\x0f\x01r\x01\x07messages\x04\0\
\x17address-not-valid-error\x03\0\x11\x01r\x02\x07messages\x0aproduct-ids\x04\0\x14\
item-not-found-error\x03\0\x13\x01r\x01\x07messages\x04\0\x11empty-items-error\x03\
\0\x15\x01r\x01\x07messages\x04\0\x1dbilling-address-not-set-error\x03\0\x17\x01\
r\x02\x07messages\x06status\x01\x04\0\x18action-not-allowed-error\x03\0\x19\x01q\
\x06\x11product-not-found\x01\x0e\0\x11pricing-not-found\x01\x10\0\x11address-no\
t-valid\x01\x12\0\x0eitem-not-found\x01\x14\0\x0bempty-items\x01\x16\0\x12action\
-not-allowed\x01\x1a\0\x04\0\x05error\x03\0\x1b\x01@\x01\x04data\x0c\x01\0\x04\0\
\x10initialize-order\x01\x1d\x01j\0\x01\x1c\x01@\x02\x0aproduct-ids\x08quantityy\
\0\x1e\x04\0\x08add-item\x01\x1f\x01@\x01\x0aproduct-ids\0\x1e\x04\0\x0bremove-i\
tem\x01\x20\x04\0\x14update-item-quantity\x01\x1f\x01@\x01\x07address\x04\0\x1e\x04\
\0\x17update-shipping-address\x01!\x04\0\x16update-billing-address\x01!\x01@\0\0\
\x1e\x04\0\x0aship-order\x01\"\x04\0\x0ccancel-order\x01\"\x01k\x0a\x01@\0\0#\x04\
\0\x03get\x01$\x03\x01\x0fgolem:order/api\x05\x0b\x02\x03\0\x06\x0corder-status\x02\
\x03\0\x06\x07address\x02\x03\0\x06\x0aorder-item\x02\x03\0\x06\x05order\x02\x03\
\0\x06\x0ccreate-order\x02\x03\0\x06\x17product-not-found-error\x02\x03\0\x06\x17\
pricing-not-found-error\x02\x03\0\x06\x17address-not-valid-error\x02\x03\0\x06\x14\
item-not-found-error\x02\x03\0\x06\x11empty-items-error\x02\x03\0\x06\x1dbilling\
-address-not-set-error\x02\x03\0\x06\x18action-not-allowed-error\x02\x03\0\x06\x05\
error\x01B\x80\x01\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\0\0\x02\x03\x02\
\x01\x01\x04\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x0c\x04\0\x0corder-\
status\x03\0\x04\x02\x03\x02\x01\x0d\x04\0\x07address\x03\0\x06\x02\x03\x02\x01\x0e\
\x04\0\x0aorder-item\x03\0\x08\x02\x03\x02\x01\x0f\x04\0\x05order\x03\0\x0a\x02\x03\
\x02\x01\x10\x04\0\x0ccreate-order\x03\0\x0c\x02\x03\x02\x01\x11\x04\0\x17produc\
t-not-found-error\x03\0\x0e\x02\x03\x02\x01\x12\x04\0\x17pricing-not-found-error\
\x03\0\x10\x02\x03\x02\x01\x13\x04\0\x17address-not-valid-error\x03\0\x12\x02\x03\
\x02\x01\x14\x04\0\x14item-not-found-error\x03\0\x14\x02\x03\x02\x01\x15\x04\0\x11\
empty-items-error\x03\0\x16\x02\x03\x02\x01\x16\x04\0\x1dbilling-address-not-set\
-error\x03\0\x18\x02\x03\x02\x01\x17\x04\0\x18action-not-allowed-error\x03\0\x1a\
\x02\x03\x02\x01\x18\x04\0\x05error\x03\0\x1c\x04\0\x16future-add-item-result\x03\
\x01\x04\0\x19future-remove-item-result\x03\x01\x04\0\"future-update-item-quanti\
ty-result\x03\x01\x04\0%future-update-shipping-address-result\x03\x01\x04\0$futu\
re-update-billing-address-result\x03\x01\x04\0\x18future-ship-order-result\x03\x01\
\x04\0\x1afuture-cancel-order-result\x03\x01\x04\0\x11future-get-result\x03\x01\x04\
\0\x03api\x03\x01\x01h\x1e\x01i\x03\x01@\x01\x04self'\0(\x04\0([method]future-ad\
d-item-result.subscribe\x01)\x01j\0\x01\x1d\x01k*\x01@\x01\x04self'\0+\x04\0\"[m\
ethod]future-add-item-result.get\x01,\x01h\x1f\x01@\x01\x04self-\0(\x04\0+[metho\
d]future-remove-item-result.subscribe\x01.\x01@\x01\x04self-\0+\x04\0%[method]fu\
ture-remove-item-result.get\x01/\x01h\x20\x01@\x01\x04self0\0(\x04\04[method]fut\
ure-update-item-quantity-result.subscribe\x011\x01@\x01\x04self0\0+\x04\0.[metho\
d]future-update-item-quantity-result.get\x012\x01h!\x01@\x01\x04self3\0(\x04\07[\
method]future-update-shipping-address-result.subscribe\x014\x01@\x01\x04self3\0+\
\x04\01[method]future-update-shipping-address-result.get\x015\x01h\"\x01@\x01\x04\
self6\0(\x04\06[method]future-update-billing-address-result.subscribe\x017\x01@\x01\
\x04self6\0+\x04\00[method]future-update-billing-address-result.get\x018\x01h#\x01\
@\x01\x04self9\0(\x04\0*[method]future-ship-order-result.subscribe\x01:\x01@\x01\
\x04self9\0+\x04\0$[method]future-ship-order-result.get\x01;\x01h$\x01@\x01\x04s\
elf<\0(\x04\0,[method]future-cancel-order-result.subscribe\x01=\x01@\x01\x04self\
<\0+\x04\0&[method]future-cancel-order-result.get\x01>\x01h%\x01@\x01\x04self?\0\
(\x04\0#[method]future-get-result.subscribe\x01@\x01k\x0b\x01k\xc1\0\x01@\x01\x04\
self?\0\xc2\0\x04\0\x1d[method]future-get-result.get\x01C\x01i&\x01@\x01\x08loca\
tion\x01\0\xc4\0\x04\0\x10[constructor]api\x01E\x01h&\x01@\x02\x04self\xc6\0\x04\
data\x0d\x01\0\x04\0%[method]api.blocking-initialize-order\x01G\x04\0\x1c[method\
]api.initialize-order\x01G\x01@\x03\x04self\xc6\0\x0aproduct-ids\x08quantityy\0*\
\x04\0\x1d[method]api.blocking-add-item\x01H\x01i\x1e\x01@\x03\x04self\xc6\0\x0a\
product-ids\x08quantityy\0\xc9\0\x04\0\x14[method]api.add-item\x01J\x01@\x02\x04\
self\xc6\0\x0aproduct-ids\0*\x04\0\x20[method]api.blocking-remove-item\x01K\x01i\
\x1f\x01@\x02\x04self\xc6\0\x0aproduct-ids\0\xcc\0\x04\0\x17[method]api.remove-i\
tem\x01M\x04\0)[method]api.blocking-update-item-quantity\x01H\x01i\x20\x01@\x03\x04\
self\xc6\0\x0aproduct-ids\x08quantityy\0\xce\0\x04\0\x20[method]api.update-item-\
quantity\x01O\x01@\x02\x04self\xc6\0\x07address\x07\0*\x04\0,[method]api.blockin\
g-update-shipping-address\x01P\x01i!\x01@\x02\x04self\xc6\0\x07address\x07\0\xd1\
\0\x04\0#[method]api.update-shipping-address\x01R\x04\0+[method]api.blocking-upd\
ate-billing-address\x01P\x01i\"\x01@\x02\x04self\xc6\0\x07address\x07\0\xd3\0\x04\
\0\"[method]api.update-billing-address\x01T\x01@\x01\x04self\xc6\0\0*\x04\0\x1f[\
method]api.blocking-ship-order\x01U\x01i#\x01@\x01\x04self\xc6\0\0\xd6\0\x04\0\x16\
[method]api.ship-order\x01W\x04\0![method]api.blocking-cancel-order\x01U\x01i$\x01\
@\x01\x04self\xc6\0\0\xd8\0\x04\0\x18[method]api.cancel-order\x01Y\x01@\x01\x04s\
elf\xc6\0\0\xc1\0\x04\0\x18[method]api.blocking-get\x01Z\x01i%\x01@\x01\x04self\xc6\
\0\0\xdb\0\x04\0\x0f[method]api.get\x01\\\x03\x01\x1bgolem:order-stub/stub-order\
\x05\x19\x01B\x0f\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07in\
stant\x03\0\x02\x01w\x04\0\x08duration\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\
\x01@\0\0\x05\x04\0\x0aresolution\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\
\0\x11subscribe-instant\x01\x09\x01@\x01\x04when\x05\0\x08\x04\0\x12subscribe-du\
ration\x01\x0a\x03\x01!wasi:clocks/monotonic-clock@0.2.0\x05\x1a\x02\x03\0\x08\x08\
duration\x01Bf\x02\x03\x02\x01\x04\x04\0\x03uri\x03\0\0\x02\x03\x02\x01\x1b\x04\0\
\x08duration\x03\0\x02\x01w\x04\0\x0boplog-index\x03\0\x04\x01w\x04\0\x11compone\
nt-version\x03\0\x06\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x08\
\x01r\x01\x04uuid\x09\x04\0\x0ccomponent-id\x03\0\x0a\x01r\x02\x0ccomponent-id\x0b\
\x0bworker-names\x04\0\x09worker-id\x03\0\x0c\x01r\x02\x09worker-id\x0d\x09oplog\
-idx\x05\x04\0\x0apromise-id\x03\0\x0e\x01r\x04\x0cmax-attemptsy\x09min-delay\x03\
\x09max-delay\x03\x0amultiplieru\x04\0\x0cretry-policy\x03\0\x10\x01q\x03\x0fper\
sist-nothing\0\0\x1bpersist-remote-side-effects\0\0\x05smart\0\0\x04\0\x11persis\
tence-level\x03\0\x12\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0bupdate-mo\
de\x03\0\x14\x01m\x06\x05equal\x09not-equal\x0dgreater-equal\x07greater\x0aless-\
equal\x04less\x04\0\x11filter-comparator\x03\0\x16\x01m\x04\x05equal\x09not-equa\
l\x04like\x08not-like\x04\0\x18string-filter-comparator\x03\0\x18\x01m\x07\x07ru\
nning\x04idle\x09suspended\x0binterrupted\x08retrying\x06failed\x06exited\x04\0\x0d\
worker-status\x03\0\x1a\x01r\x02\x0acomparator\x19\x05values\x04\0\x12worker-nam\
e-filter\x03\0\x1c\x01r\x02\x0acomparator\x17\x05value\x1b\x04\0\x14worker-statu\
s-filter\x03\0\x1e\x01r\x02\x0acomparator\x17\x05valuew\x04\0\x15worker-version-\
filter\x03\0\x20\x01r\x02\x0acomparator\x17\x05valuew\x04\0\x18worker-created-at\
-filter\x03\0\"\x01r\x03\x04names\x0acomparator\x19\x05values\x04\0\x11worker-en\
v-filter\x03\0$\x01q\x05\x04name\x01\x1d\0\x06status\x01\x1f\0\x07version\x01!\0\
\x0acreated-at\x01#\0\x03env\x01%\0\x04\0\x16worker-property-filter\x03\0&\x01p'\
\x01r\x01\x07filters(\x04\0\x11worker-all-filter\x03\0)\x01p*\x01r\x01\x07filter\
s+\x04\0\x11worker-any-filter\x03\0,\x01ps\x01o\x02ss\x01p/\x01r\x06\x09worker-i\
d\x0d\x04args.\x03env0\x06status\x1b\x11component-versionw\x0bretry-countw\x04\0\
\x0fworker-metadata\x03\01\x04\0\x0bget-workers\x03\x01\x01k-\x01i3\x01@\x03\x0c\
component-id\x0b\x06filter4\x07precise\x7f\05\x04\0\x18[constructor]get-workers\x01\
6\x01h3\x01p2\x01k8\x01@\x01\x04self7\09\x04\0\x1c[method]get-workers.get-next\x01\
:\x01@\0\0\x0f\x04\0\x0ecreate-promise\x01;\x01p}\x01@\x01\x0apromise-id\x0f\0<\x04\
\0\x0dawait-promise\x01=\x01@\x02\x0apromise-id\x0f\x04data<\0\x7f\x04\0\x10comp\
lete-promise\x01>\x01@\x01\x0apromise-id\x0f\x01\0\x04\0\x0edelete-promise\x01?\x01\
@\x01\x0dfunction-names\0\x01\x04\0\x0cget-self-uri\x01@\x01@\0\0\x05\x04\0\x0fg\
et-oplog-index\x01A\x01@\x01\x09oplog-idx\x05\x01\0\x04\0\x0fset-oplog-index\x01\
B\x01@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01C\x04\0\x14mark-begin-ope\
ration\x01A\x01@\x01\x05begin\x05\x01\0\x04\0\x12mark-end-operation\x01D\x01@\0\0\
\x11\x04\0\x10get-retry-policy\x01E\x01@\x01\x10new-retry-policy\x11\x01\0\x04\0\
\x10set-retry-policy\x01F\x01@\0\0\x13\x04\0\x1bget-oplog-persistence-level\x01G\
\x01@\x01\x15new-persistence-level\x13\x01\0\x04\0\x1bset-oplog-persistence-leve\
l\x01H\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01I\x01@\x01\x0aidempotent\x7f\
\x01\0\x04\0\x14set-idempotence-mode\x01J\x01@\0\0\x09\x04\0\x18generate-idempot\
ency-key\x01K\x01@\x03\x09worker-id\x0d\x0etarget-version\x07\x04mode\x15\x01\0\x04\
\0\x0dupdate-worker\x01L\x01@\0\02\x04\0\x11get-self-metadata\x01M\x01k2\x01@\x01\
\x09worker-id\x0d\0\xce\0\x04\0\x13get-worker-metadata\x01O\x03\x01\x14golem:api\
/host@0.2.0\x05\x1c\x01B)\x01ks\x01r\x09\x07street1s\x07street2\0\x04citys\x0fst\
ate-or-regions\x07countrys\x0bpostal-codes\x04name\0\x0dbusiness-name\0\x0cphone\
-number\0\x04\0\x07address\x03\0\x01\x01r\x04\x0aproduct-ids\x04names\x05pricev\x08\
quantityy\x04\0\x09cart-item\x03\0\x03\x01p\x04\x01k\x02\x01ps\x01r\x08\x07user-\
ids\x05items\x05\x0fbilling-address\x06\x10shipping-address\x06\x05totalv\x08cur\
rencys\x09timestampw\x12previous-order-ids\x07\x04\0\x04cart\x03\0\x08\x01r\x01\x08\
order-ids\x04\0\x12order-confirmation\x03\0\x0a\x01r\x02\x07messages\x0aproduct-\
ids\x04\0\x17product-not-found-error\x03\0\x0c\x01r\x02\x07messages\x0aproduct-i\
ds\x04\0\x17pricing-not-found-error\x03\0\x0e\x01r\x01\x07messages\x04\0\x17addr\
ess-not-valid-error\x03\0\x10\x01r\x02\x07messages\x0aproduct-ids\x04\0\x14item-\
not-found-error\x03\0\x12\x01r\x01\x07messages\x04\0\x11empty-items-error\x03\0\x14\
\x01r\x01\x07messages\x04\0\x1dbilling-address-not-set-error\x03\0\x16\x01q\x06\x11\
product-not-found\x01\x0d\0\x11pricing-not-found\x01\x0f\0\x11address-not-valid\x01\
\x11\0\x0eitem-not-found\x01\x13\0\x0bempty-items\x01\x15\0\x17billing-address-n\
ot-set\x01\x17\0\x04\0\x05error\x03\0\x18\x01j\0\x01\x19\x01@\x02\x0aproduct-ids\
\x08quantityy\0\x1a\x04\0\x08add-item\x01\x1b\x01@\x01\x0aproduct-ids\0\x1a\x04\0\
\x0bremove-item\x01\x1c\x04\0\x14update-item-quantity\x01\x1b\x01@\x01\x07addres\
s\x02\0\x1a\x04\0\x17update-shipping-address\x01\x1d\x04\0\x16update-billing-add\
ress\x01\x1d\x01j\x01\x0b\x01\x19\x01@\0\0\x1e\x04\0\x08checkout\x01\x1f\x01k\x09\
\x01@\0\0\x20\x04\0\x03get\x01!\x04\x01\x0egolem:cart/api\x05\x1d\x04\x01\x0fgol\
em:cart/cart\x04\0\x0b\x0a\x01\0\x04cart\x03\0\0\0G\x09producers\x01\x0cprocesse\
d-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
