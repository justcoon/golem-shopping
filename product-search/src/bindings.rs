// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * with "wasi:clocks/monotonic-clock@0.2.0" = "golem_rust::bindings::wasi::clocks::monotonic_clock"
//   * with "golem:rpc/types@0.2.0" = "golem_rust::wasm_rpc::golem_rpc_0_2_x::types"
//   * with "golem:api/host@1.1.6" = "golem_rust::bindings::golem::api::host"
//   * with "wasi:clocks/wall-clock@0.2.0" = "golem_rust::wasm_rpc::wasi::clocks::wall_clock"
//   * with "wasi:io/poll@0.2.0" = "golem_rust::wasm_rpc::wasi::io::poll"
use golem_rust::wasm_rpc::wasi::io::poll as __with_name0;
use golem_rust::bindings::wasi::clocks::monotonic_clock as __with_name1;
use golem_rust::wasm_rpc::wasi::clocks::wall_clock as __with_name2;
use golem_rust::wasm_rpc::golem_rpc_0_2_x::types as __with_name3;
use golem_rust::bindings::golem::api::host as __with_name4;
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod product_client {
        #[allow(dead_code, clippy::all)]
        pub mod product_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type WasiIoPollable = super::super::super::__with_name0::Pollable;
            pub type WasiClocksDatetime = super::super::super::__with_name2::Datetime;
            pub type GolemRpcWorkerId = super::super::super::__with_name3::WorkerId;
            pub type GolemRpcCancellationToken = super::super::super::__with_name3::CancellationToken;
            pub type Product = super::super::super::golem::product_exports::api::Product;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetResult {
                handle: _rt::Resource<FutureGetResult>,
            }
            impl FutureGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureLoadResult {
                handle: _rt::Resource<FutureLoadResult>,
            }
            impl FutureLoadResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureLoadResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-load-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureSaveResult {
                handle: _rt::Resource<FutureSaveResult>,
            }
            impl FutureSaveResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureSaveResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-save-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }
            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LoadSnapshot {
                handle: _rt::Resource<LoadSnapshot>,
            }
            impl LoadSnapshot {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LoadSnapshot {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]load-snapshot"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SaveSnapshot {
                handle: _rt::Resource<SaveSnapshot>,
            }
            impl SaveSnapshot {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SaveSnapshot {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]save-snapshot"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::__with_name0::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<Product>> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 88]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 88],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                let l6 = *ptr0.add(24).cast::<*mut u8>();
                                                let l7 = *ptr0.add(28).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                let l9 = *ptr0.add(32).cast::<*mut u8>();
                                                let l10 = *ptr0.add(36).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                let l12 = *ptr0.add(40).cast::<*mut u8>();
                                                let l13 = *ptr0.add(44).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                let l15 = *ptr0.add(48).cast::<*mut u8>();
                                                let l16 = *ptr0.add(52).cast::<usize>();
                                                let base20 = l15;
                                                let len20 = l16;
                                                let mut result20 = _rt::Vec::with_capacity(len20);
                                                for i in 0..len20 {
                                                    let base = base20.add(i * 8);
                                                    let e20 = {
                                                        let l17 = *base.add(0).cast::<*mut u8>();
                                                        let l18 = *base.add(4).cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    result20.push(e20);
                                                }
                                                _rt::cabi_dealloc(base20, len20 * 8, 4);
                                                let l21 = *ptr0.add(56).cast::<i64>();
                                                let l22 = *ptr0.add(64).cast::<i32>();
                                                let l23 = *ptr0.add(72).cast::<i64>();
                                                let l24 = *ptr0.add(80).cast::<i32>();
                                                super::super::super::golem::product_exports::api::Product {
                                                    product_id: _rt::string_lift(bytes5),
                                                    name: _rt::string_lift(bytes8),
                                                    brand: _rt::string_lift(bytes11),
                                                    description: _rt::string_lift(bytes14),
                                                    tags: result20,
                                                    created_at: super::super::super::__with_name2::Datetime {
                                                        seconds: l21 as u64,
                                                        nanoseconds: l22 as u32,
                                                    },
                                                    updated_at: super::super::super::__with_name2::Datetime {
                                                        seconds: l23 as u64,
                                                        nanoseconds: l24 as u32,
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureLoadResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-load-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::__with_name0::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureLoadResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-load-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureSaveResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-save-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::__with_name0::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureSaveResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-save-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> Api {
                    unsafe {
                        let super::super::super::__with_name3::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::__with_name3::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::__with_name3::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]api.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get(&self) -> Option<Product> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 80]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 80],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(
                                        l2.cast(),
                                        len4,
                                        len4,
                                    );
                                    let l5 = *ptr0.add(16).cast::<*mut u8>();
                                    let l6 = *ptr0.add(20).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    let l8 = *ptr0.add(24).cast::<*mut u8>();
                                    let l9 = *ptr0.add(28).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    let l11 = *ptr0.add(32).cast::<*mut u8>();
                                    let l12 = *ptr0.add(36).cast::<usize>();
                                    let len13 = l12;
                                    let bytes13 = _rt::Vec::from_raw_parts(
                                        l11.cast(),
                                        len13,
                                        len13,
                                    );
                                    let l14 = *ptr0.add(40).cast::<*mut u8>();
                                    let l15 = *ptr0.add(44).cast::<usize>();
                                    let base19 = l14;
                                    let len19 = l15;
                                    let mut result19 = _rt::Vec::with_capacity(len19);
                                    for i in 0..len19 {
                                        let base = base19.add(i * 8);
                                        let e19 = {
                                            let l16 = *base.add(0).cast::<*mut u8>();
                                            let l17 = *base.add(4).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        result19.push(e19);
                                    }
                                    _rt::cabi_dealloc(base19, len19 * 8, 4);
                                    let l20 = *ptr0.add(48).cast::<i64>();
                                    let l21 = *ptr0.add(56).cast::<i32>();
                                    let l22 = *ptr0.add(64).cast::<i64>();
                                    let l23 = *ptr0.add(72).cast::<i32>();
                                    super::super::super::golem::product_exports::api::Product {
                                        product_id: _rt::string_lift(bytes4),
                                        name: _rt::string_lift(bytes7),
                                        brand: _rt::string_lift(bytes10),
                                        description: _rt::string_lift(bytes13),
                                        tags: result19,
                                        created_at: super::super::super::__with_name2::Datetime {
                                            seconds: l20 as u64,
                                            nanoseconds: l21 as u32,
                                        },
                                        updated_at: super::super::super::__with_name2::Datetime {
                                            seconds: l22 as u64,
                                            nanoseconds: l23 as u32,
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> FutureGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.get"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureGetResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_get(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::__with_name2::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-get"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::__with_name3::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_product(
                    &self,
                    name: &str,
                    brand: &str,
                    description: &str,
                    tags: &[_rt::String],
                ) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = brand;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = description;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = tags;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-product"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                        );
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_product(
                    &self,
                    name: &str,
                    brand: &str,
                    description: &str,
                    tags: &[_rt::String],
                ) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = brand;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = description;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = tags;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-product"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                        );
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_initialize_product(
                    &self,
                    name: &str,
                    brand: &str,
                    description: &str,
                    tags: &[_rt::String],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = brand;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = description;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = tags;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        let super::super::super::__with_name2::Datetime {
                            seconds: seconds5,
                            nanoseconds: nanoseconds5,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-initialize-product"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                            _rt::as_i64(seconds5),
                            _rt::as_i32(nanoseconds5),
                        );
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                        super::super::super::__with_name3::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]load-snapshot"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        LoadSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> LoadSnapshot {
                    unsafe {
                        let super::super::super::__with_name3::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::__with_name3::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::__with_name3::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]load-snapshot.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        LoadSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_load(&self, bytes: &[u8]) -> Result<(), _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.blocking-load"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        l3.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn load(&self, bytes: &[u8]) -> FutureLoadResult {
                    unsafe {
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.load"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        FutureLoadResult::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_load(
                    &self,
                    bytes: &[u8],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let super::super::super::__with_name2::Datetime {
                            seconds: seconds1,
                            nanoseconds: nanoseconds1,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.schedule-load"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(seconds1),
                            _rt::as_i32(nanoseconds1),
                        );
                        super::super::super::__with_name3::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]save-snapshot"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        SaveSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> SaveSnapshot {
                    unsafe {
                        let super::super::super::__with_name3::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::__with_name3::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::__with_name3::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]save-snapshot.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        SaveSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_save(&self) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.blocking-save"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn save(&self) -> FutureSaveResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.save"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureSaveResult::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_save(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::__with_name2::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.schedule-save"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::__with_name3::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod product_exports {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::__with_name2::Datetime;
            #[derive(Clone)]
            pub struct Product {
                pub product_id: _rt::String,
                pub name: _rt::String,
                pub brand: _rt::String,
                pub description: _rt::String,
                pub tags: _rt::Vec<_rt::String>,
                pub created_at: Datetime,
                pub updated_at: Datetime,
            }
            impl ::core::fmt::Debug for Product {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Product")
                        .field("product-id", &self.product_id)
                        .field("name", &self.name)
                        .field("brand", &self.brand)
                        .field("description", &self.description)
                        .field("tags", &self.tags)
                        .field("created-at", &self.created_at)
                        .field("updated-at", &self.updated_at)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Product> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 80]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 80]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:product-exports/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(8).cast::<*mut u8>();
                                let l3 = *ptr0.add(12).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                let l5 = *ptr0.add(16).cast::<*mut u8>();
                                let l6 = *ptr0.add(20).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                let l8 = *ptr0.add(24).cast::<*mut u8>();
                                let l9 = *ptr0.add(28).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                let l11 = *ptr0.add(32).cast::<*mut u8>();
                                let l12 = *ptr0.add(36).cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = *ptr0.add(40).cast::<*mut u8>();
                                let l15 = *ptr0.add(44).cast::<usize>();
                                let base19 = l14;
                                let len19 = l15;
                                let mut result19 = _rt::Vec::with_capacity(len19);
                                for i in 0..len19 {
                                    let base = base19.add(i * 8);
                                    let e19 = {
                                        let l16 = *base.add(0).cast::<*mut u8>();
                                        let l17 = *base.add(4).cast::<usize>();
                                        let len18 = l17;
                                        let bytes18 = _rt::Vec::from_raw_parts(
                                            l16.cast(),
                                            len18,
                                            len18,
                                        );
                                        _rt::string_lift(bytes18)
                                    };
                                    result19.push(e19);
                                }
                                _rt::cabi_dealloc(base19, len19 * 8, 4);
                                let l20 = *ptr0.add(48).cast::<i64>();
                                let l21 = *ptr0.add(56).cast::<i32>();
                                let l22 = *ptr0.add(64).cast::<i64>();
                                let l23 = *ptr0.add(72).cast::<i32>();
                                Product {
                                    product_id: _rt::string_lift(bytes4),
                                    name: _rt::string_lift(bytes7),
                                    brand: _rt::string_lift(bytes10),
                                    description: _rt::string_lift(bytes13),
                                    tags: result19,
                                    created_at: super::super::super::__with_name2::Datetime {
                                        seconds: l20 as u64,
                                        nanoseconds: l21 as u32,
                                    },
                                    updated_at: super::super::super::__with_name2::Datetime {
                                        seconds: l22 as u64,
                                        nanoseconds: l23 as u32,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_product(
                name: &str,
                brand: &str,
                description: &str,
                tags: &[_rt::String],
            ) {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = brand;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = description;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec4 = tags;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec4.len() * 8,
                        4,
                    );
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 8);
                        {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:product-exports/api")]
                    extern "C" {
                        #[link_name = "initialize-product"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        result4,
                        len4,
                    );
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod product_search_exports {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Datetime = super::super::super::super::__with_name2::Datetime;
                #[derive(Clone)]
                pub struct Product {
                    pub product_id: _rt::String,
                    pub name: _rt::String,
                    pub brand: _rt::String,
                    pub description: _rt::String,
                    pub tags: _rt::Vec<_rt::String>,
                    pub created_at: Datetime,
                    pub updated_at: Datetime,
                }
                impl ::core::fmt::Debug for Product {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Product")
                            .field("product-id", &self.product_id)
                            .field("name", &self.name)
                            .field("brand", &self.brand)
                            .field("description", &self.description)
                            .field("tags", &self.tags)
                            .field("created-at", &self.created_at)
                            .field("updated-at", &self.updated_at)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_search_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::search(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec12 = e;
                            let len12 = vec12.len();
                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec12.len() * 72,
                                8,
                            );
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12.add(i * 72);
                                {
                                    let Product {
                                        product_id: product_id3,
                                        name: name3,
                                        brand: brand3,
                                        description: description3,
                                        tags: tags3,
                                        created_at: created_at3,
                                        updated_at: updated_at3,
                                    } = e;
                                    let vec4 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(4).cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (name3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                    let vec6 = (brand3.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(20).cast::<usize>() = len6;
                                    *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = (description3.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base.add(28).cast::<usize>() = len7;
                                    *base.add(24).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec9 = tags3;
                                    let len9 = vec9.len();
                                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec9.len() * 8,
                                        4,
                                    );
                                    let result9 = if layout9.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout9);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec9.into_iter().enumerate() {
                                        let base = result9.add(i * 8);
                                        {
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base.add(4).cast::<usize>() = len8;
                                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                    }
                                    *base.add(36).cast::<usize>() = len9;
                                    *base.add(32).cast::<*mut u8>() = result9;
                                    let super::super::super::super::__with_name2::Datetime {
                                        seconds: seconds10,
                                        nanoseconds: nanoseconds10,
                                    } = created_at3;
                                    *base.add(40).cast::<i64>() = _rt::as_i64(seconds10);
                                    *base.add(48).cast::<i32>() = _rt::as_i32(nanoseconds10);
                                    let super::super::super::super::__with_name2::Datetime {
                                        seconds: seconds11,
                                        nanoseconds: nanoseconds11,
                                    } = updated_at3;
                                    *base.add(56).cast::<i64>() = _rt::as_i64(seconds11);
                                    *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                }
                            }
                            *ptr2.add(8).cast::<usize>() = len12;
                            *ptr2.add(4).cast::<*mut u8>() = result12;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec13 = (e.into_bytes()).into_boxed_slice();
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            ::core::mem::forget(vec13);
                            *ptr2.add(8).cast::<usize>() = len13;
                            *ptr2.add(4).cast::<*mut u8>() = ptr13.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_search<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base16 = l1;
                            let len16 = l2;
                            for i in 0..len16 {
                                let base = base16.add(i * 72);
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base.add(8).cast::<*mut u8>();
                                    let l6 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base.add(16).cast::<*mut u8>();
                                    let l8 = *base.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = *base.add(24).cast::<*mut u8>();
                                    let l10 = *base.add(28).cast::<usize>();
                                    _rt::cabi_dealloc(l9, l10, 1);
                                    let l11 = *base.add(32).cast::<*mut u8>();
                                    let l12 = *base.add(36).cast::<usize>();
                                    let base15 = l11;
                                    let len15 = l12;
                                    for i in 0..len15 {
                                        let base = base15.add(i * 8);
                                        {
                                            let l13 = *base.add(0).cast::<*mut u8>();
                                            let l14 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l13, l14, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base15, len15 * 8, 4);
                                }
                            }
                            _rt::cabi_dealloc(base16, len16 * 72, 8);
                        }
                        _ => {
                            let l17 = *arg0.add(4).cast::<*mut u8>();
                            let l18 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l17, l18, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn search(
                        query: _rt::String,
                    ) -> Result<_rt::Vec<Product>, _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_product_search_exports_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:product-search-exports/api#search"] unsafe extern "C" fn
                        export_search(arg0 : * mut u8, arg1 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_search_cabi::<$ty > (arg0, arg1) }
                        #[export_name =
                        "cabi_post_golem:product-search-exports/api#search"] unsafe
                        extern "C" fn _post_return_search(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_search::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_product_search_exports_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::alloc;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_product_search_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::product_search_exports::api::__export_golem_product_search_exports_api_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::golem::product_search_exports::api);
    };
}
#[doc(inline)]
pub(crate) use __export_product_search_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:product-search:product-search:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 7281] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xec7\x01A\x02\x01A\x19\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\0\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B\x0f\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08duratio\
n\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\
\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\x01@\
\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\0!wasi:clocks/mon\
otonic-clock@0.2.0\x05\x02\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08\
datetime\x03\0\0\x01@\0\0\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\
\0\x1cwasi:clocks/wall-clock@0.2.0\x05\x03\x02\x03\0\x02\x08datetime\x01BX\x02\x03\
\x02\x01\x04\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\
\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x04\x01r\x01\x04u\
uid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0ccomponent-id\x07\x0bworker-n\
ames\x04\0\x09worker-id\x03\0\x08\x01z\x04\0\x0anode-index\x03\0\x0a\x01w\x04\0\x0b\
resource-id\x03\0\x0c\x01m\x02\x05owned\x08borrowed\x04\0\x0dresource-mode\x03\0\
\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\x01p\x13\x01ps\x01p\x0b\x01o\x02\
\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-type\x01\x11\0\x0cvariant-type\x01\x14\
\0\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\0\x0atuple-type\x01\x16\0\x09lis\
t-type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bresult-type\x01\x17\0\x0cprim-u8-ty\
pe\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dprim-u64-type\0\0\x0cprim-s8\
-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0dprim-s64-type\0\0\x0dprim\
-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\x0eprim-bool-type\0\0\x10\
prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\0\x0dwit-type-node\x03\0\x19\x01\
p\x1a\x01r\x01\x05nodes\x1b\x04\0\x08wit-type\x03\0\x1c\x01r\x01\x05values\x04\0\
\x03uri\x03\0\x1e\x01o\x02y\x12\x01p\x7f\x01j\x01\x12\x01\x12\x01o\x02\x1fw\x01q\
\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01\x20\0\x0aenum-value\x01y\0\x0b\
flags-value\x01!\0\x0btuple-value\x01\x16\0\x0alist-value\x01\x16\0\x0coption-va\
lue\x01\x12\0\x0cresult-value\x01\"\0\x07prim-u8\x01}\0\x08prim-u16\x01{\0\x08pr\
im-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08prim-s16\x01|\0\x08prim-s3\
2\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0cprim-float64\x01u\0\x09pri\
m-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01s\0\x06handle\x01#\0\x04\0\
\x08wit-node\x03\0$\x01p%\x01r\x01\x05nodes&\x04\0\x09wit-value\x03\0'\x01r\x02\x05\
value(\x03typ\x1d\x04\0\x0evalue-and-type\x03\0)\x01q\x04\x0eprotocol-error\x01s\
\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09\
rpc-error\x03\0+\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\
\x04\0\x12cancellation-token\x03\x01\x01i-\x01@\x01\x09worker-id\x09\00\x04\0\x15\
[constructor]wasm-rpc\x011\x01@\x01\x0ccomponent-id\x07\00\x04\0\x1a[static]wasm\
-rpc.ephemeral\x012\x01h-\x01p(\x01j\x01(\x01,\x01@\x03\x04self3\x0dfunction-nam\
es\x0ffunction-params4\05\x04\0![method]wasm-rpc.invoke-and-await\x016\x01j\0\x01\
,\x01@\x03\x04self3\x0dfunction-names\x0ffunction-params4\07\x04\0\x17[method]wa\
sm-rpc.invoke\x018\x01i.\x01@\x03\x04self3\x0dfunction-names\x0ffunction-params4\
\09\x04\0'[method]wasm-rpc.async-invoke-and-await\x01:\x01@\x04\x04self3\x0esche\
duled-time\x01\x0dfunction-names\x0ffunction-params4\x01\0\x04\0$[method]wasm-rp\
c.schedule-invocation\x01;\x01i/\x01@\x04\x04self3\x0escheduled-time\x01\x0dfunc\
tion-names\x0ffunction-params4\0<\x04\0/[method]wasm-rpc.schedule-cancelable-inv\
ocation\x01=\x01h.\x01i\x03\x01@\x01\x04self>\0?\x04\0&[method]future-invoke-res\
ult.subscribe\x01@\x01k5\x01@\x01\x04self>\0\xc1\0\x04\0\x20[method]future-invok\
e-result.get\x01B\x01h/\x01@\x01\x04self\xc3\0\x01\0\x04\0![method]cancellation-\
token.cancel\x01D\x01j\x01\x05\x01s\x01@\x01\x04uuids\0\xc5\0\x04\0\x0aparse-uui\
d\x01F\x01@\x01\x04uuid\x05\0s\x04\0\x0euuid-to-string\x01G\x01@\x01\x03vnt*\0(\x04\
\0\x0dextract-value\x01H\x01@\x01\x03vnt*\0\x1d\x04\0\x0cextract-type\x01I\x03\0\
\x15golem:rpc/types@0.2.0\x05\x05\x02\x03\0\x01\x08duration\x02\x03\0\x03\x0ccom\
ponent-id\x02\x03\0\x03\x04uuid\x02\x03\0\x03\x09worker-id\x01Bu\x02\x03\x02\x01\
\x06\x04\0\x08duration\x03\0\0\x02\x03\x02\x01\x07\x04\0\x0ccomponent-id\x03\0\x02\
\x02\x03\x02\x01\x08\x04\0\x04uuid\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x09worker\
-id\x03\0\x06\x01w\x04\0\x0boplog-index\x03\0\x08\x01r\x02\x09worker-id\x07\x09o\
plog-idx\x09\x04\0\x0apromise-id\x03\0\x0a\x01w\x04\0\x11component-version\x03\0\
\x0c\x01r\x01\x05values\x04\0\x0aaccount-id\x03\0\x0e\x01ku\x01r\x05\x0cmax-atte\
mptsy\x09min-delay\x01\x09max-delay\x01\x0amultiplieru\x11max-jitter-factor\x10\x04\
\0\x0cretry-policy\x03\0\x11\x01q\x03\x0fpersist-nothing\0\0\x1bpersist-remote-s\
ide-effects\0\0\x05smart\0\0\x04\0\x11persistence-level\x03\0\x13\x01m\x02\x09au\
tomatic\x0esnapshot-based\x04\0\x0bupdate-mode\x03\0\x15\x01m\x06\x05equal\x09no\
t-equal\x0dgreater-equal\x07greater\x0aless-equal\x04less\x04\0\x11filter-compar\
ator\x03\0\x17\x01m\x04\x05equal\x09not-equal\x04like\x08not-like\x04\0\x18strin\
g-filter-comparator\x03\0\x19\x01m\x07\x07running\x04idle\x09suspended\x0binterr\
upted\x08retrying\x06failed\x06exited\x04\0\x0dworker-status\x03\0\x1b\x01r\x02\x0a\
comparator\x1a\x05values\x04\0\x12worker-name-filter\x03\0\x1d\x01r\x02\x0acompa\
rator\x18\x05value\x1c\x04\0\x14worker-status-filter\x03\0\x1f\x01r\x02\x0acompa\
rator\x18\x05valuew\x04\0\x15worker-version-filter\x03\0!\x01r\x02\x0acomparator\
\x18\x05valuew\x04\0\x18worker-created-at-filter\x03\0#\x01r\x03\x04names\x0acom\
parator\x1a\x05values\x04\0\x11worker-env-filter\x03\0%\x01q\x05\x04name\x01\x1e\
\0\x06status\x01\x20\0\x07version\x01\"\0\x0acreated-at\x01$\0\x03env\x01&\0\x04\
\0\x16worker-property-filter\x03\0'\x01p(\x01r\x01\x07filters)\x04\0\x11worker-a\
ll-filter\x03\0*\x01p+\x01r\x01\x07filters,\x04\0\x11worker-any-filter\x03\0-\x01\
ps\x01o\x02ss\x01p0\x01r\x06\x09worker-id\x07\x04args/\x03env1\x06status\x1c\x11\
component-versionw\x0bretry-countw\x04\0\x0fworker-metadata\x03\02\x04\0\x0bget-\
workers\x03\x01\x01q\x02\x15revert-to-oplog-index\x01\x09\0\x17revert-last-invoc\
ations\x01w\0\x04\0\x14revert-worker-target\x03\05\x01k.\x01i4\x01@\x03\x0ccompo\
nent-id\x03\x06filter7\x07precise\x7f\08\x04\0\x18[constructor]get-workers\x019\x01\
h4\x01p3\x01k;\x01@\x01\x04self:\0<\x04\0\x1c[method]get-workers.get-next\x01=\x01\
@\0\0\x0b\x04\0\x0ecreate-promise\x01>\x01p}\x01@\x01\x0apromise-id\x0b\0?\x04\0\
\x0dawait-promise\x01@\x01k?\x01@\x01\x0apromise-id\x0b\0\xc1\0\x04\0\x0cpoll-pr\
omise\x01B\x01@\x02\x0apromise-id\x0b\x04data?\0\x7f\x04\0\x10complete-promise\x01\
C\x01@\x01\x0apromise-id\x0b\x01\0\x04\0\x0edelete-promise\x01D\x01@\0\0\x09\x04\
\0\x0fget-oplog-index\x01E\x01@\x01\x09oplog-idx\x09\x01\0\x04\0\x0fset-oplog-in\
dex\x01F\x01@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01G\x04\0\x14mark-be\
gin-operation\x01E\x01@\x01\x05begin\x09\x01\0\x04\0\x12mark-end-operation\x01H\x01\
@\0\0\x12\x04\0\x10get-retry-policy\x01I\x01@\x01\x10new-retry-policy\x12\x01\0\x04\
\0\x10set-retry-policy\x01J\x01@\0\0\x14\x04\0\x1bget-oplog-persistence-level\x01\
K\x01@\x01\x15new-persistence-level\x14\x01\0\x04\0\x1bset-oplog-persistence-lev\
el\x01L\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01M\x01@\x01\x0aidempotent\x7f\
\x01\0\x04\0\x14set-idempotence-mode\x01N\x01@\0\0\x05\x04\0\x18generate-idempot\
ency-key\x01O\x01@\x03\x09worker-id\x07\x0etarget-version\x0d\x04mode\x16\x01\0\x04\
\0\x0dupdate-worker\x01P\x01@\0\03\x04\0\x11get-self-metadata\x01Q\x01k3\x01@\x01\
\x09worker-id\x07\0\xd2\0\x04\0\x13get-worker-metadata\x01S\x01@\x03\x10source-w\
orker-id\x07\x10target-worker-id\x07\x11oplog-idx-cut-off\x09\x01\0\x04\0\x0bfor\
k-worker\x01T\x01@\x02\x09worker-id\x07\x0drevert-target6\x01\0\x04\0\x0drevert-\
worker\x01U\x01k\x03\x01@\x01\x13component-references\0\xd6\0\x04\0\x14resolve-c\
omponent-id\x01W\x01k\x07\x01@\x02\x13component-references\x0bworker-names\0\xd8\
\0\x04\0\x11resolve-worker-id\x01Y\x04\0\x18resolve-worker-id-strict\x01Y\x03\0\x14\
golem:api/host@1.1.6\x05\x0a\x01B\x0a\x02\x03\x02\x01\x04\x04\0\x08datetime\x03\0\
\0\x01ps\x01r\x07\x0aproduct-ids\x04names\x05brands\x0bdescriptions\x04tags\x02\x0a\
created-at\x01\x0aupdated-at\x01\x04\0\x07product\x03\0\x03\x01k\x04\x01@\0\0\x05\
\x04\0\x03get\x01\x06\x01@\x04\x04names\x05brands\x0bdescriptions\x04tags\x02\x01\
\0\x04\0\x12initialize-product\x01\x07\x03\0\x19golem:product-exports/api\x05\x0b\
\x02\x03\0\x03\x12cancellation-token\x02\x03\0\x05\x08datetime\x02\x03\0\x05\x07\
product\x01BX\x02\x03\x02\x01\x01\x04\0\x10wasi-io-pollable\x03\0\0\x02\x03\x02\x01\
\x04\x04\0\x14wasi-clocks-datetime\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x16golem-\
rpc-component-id\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x13golem-rpc-worker-id\x03\0\
\x06\x02\x03\x02\x01\x0c\x04\0\x1cgolem-rpc-cancellation-token\x03\0\x08\x02\x03\
\x02\x01\x0d\x04\0\x08datetime\x03\0\x0a\x02\x03\x02\x01\x0e\x04\0\x07product\x03\
\0\x0c\x04\0\x11future-get-result\x03\x01\x04\0\x12future-load-result\x03\x01\x04\
\0\x12future-save-result\x03\x01\x04\0\x03api\x03\x01\x04\0\x0dload-snapshot\x03\
\x01\x04\0\x0dsave-snapshot\x03\x01\x01h\x0e\x01i\x01\x01@\x01\x04self\x14\0\x15\
\x04\0#[method]future-get-result.subscribe\x01\x16\x01k\x0d\x01k\x17\x01@\x01\x04\
self\x14\0\x18\x04\0\x1d[method]future-get-result.get\x01\x19\x01h\x0f\x01@\x01\x04\
self\x1a\0\x15\x04\0$[method]future-load-result.subscribe\x01\x1b\x01j\0\x01s\x01\
k\x1c\x01@\x01\x04self\x1a\0\x1d\x04\0\x1e[method]future-load-result.get\x01\x1e\
\x01h\x10\x01@\x01\x04self\x1f\0\x15\x04\0$[method]future-save-result.subscribe\x01\
\x20\x01p}\x01k!\x01@\x01\x04self\x1f\0\"\x04\0\x1e[method]future-save-result.ge\
t\x01#\x01i\x11\x01@\x01\x0bworker-names\0$\x04\0\x10[constructor]api\x01%\x01@\x01\
\x09worker-id\x07\0$\x04\0\x12[static]api.custom\x01&\x01h\x11\x01@\x01\x04self'\
\0\x17\x04\0\x18[method]api.blocking-get\x01(\x01i\x0e\x01@\x01\x04self'\0)\x04\0\
\x0f[method]api.get\x01*\x01i\x09\x01@\x02\x04self'\x0dscheduled-for\x03\0+\x04\0\
\x18[method]api.schedule-get\x01,\x01ps\x01@\x05\x04self'\x04names\x05brands\x0b\
descriptions\x04tags-\x01\0\x04\0'[method]api.blocking-initialize-product\x01.\x04\
\0\x1e[method]api.initialize-product\x01.\x01@\x06\x04self'\x04names\x05brands\x0b\
descriptions\x04tags-\x0dscheduled-for\x03\0+\x04\0'[method]api.schedule-initial\
ize-product\x01/\x01i\x12\x01@\x01\x0bworker-names\00\x04\0\x1a[constructor]load\
-snapshot\x011\x01@\x01\x09worker-id\x07\00\x04\0\x1c[static]load-snapshot.custo\
m\x012\x01h\x12\x01@\x02\x04self3\x05bytes!\0\x1c\x04\0#[method]load-snapshot.bl\
ocking-load\x014\x01i\x0f\x01@\x02\x04self3\x05bytes!\05\x04\0\x1a[method]load-s\
napshot.load\x016\x01@\x03\x04self3\x05bytes!\x0dscheduled-for\x03\0+\x04\0#[met\
hod]load-snapshot.schedule-load\x017\x01i\x13\x01@\x01\x0bworker-names\08\x04\0\x1a\
[constructor]save-snapshot\x019\x01@\x01\x09worker-id\x07\08\x04\0\x1c[static]sa\
ve-snapshot.custom\x01:\x01h\x13\x01@\x01\x04self;\0!\x04\0#[method]save-snapsho\
t.blocking-save\x01<\x01i\x10\x01@\x01\x04self;\0=\x04\0\x1a[method]save-snapsho\
t.save\x01>\x01@\x02\x04self;\x0dscheduled-for\x03\0+\x04\0#[method]save-snapsho\
t.schedule-save\x01?\x03\0#golem:product-client/product-client\x05\x0f\x01B\x09\x02\
\x03\x02\x01\x04\x04\0\x08datetime\x03\0\0\x01ps\x01r\x07\x0aproduct-ids\x04name\
s\x05brands\x0bdescriptions\x04tags\x02\x0acreated-at\x01\x0aupdated-at\x01\x04\0\
\x07product\x03\0\x03\x01p\x04\x01j\x01\x05\x01s\x01@\x01\x05querys\0\x06\x04\0\x06\
search\x01\x07\x04\0\x20golem:product-search-exports/api\x05\x10\x04\0#golem:pro\
duct-search/product-search\x04\0\x0b\x14\x01\0\x0eproduct-search\x03\0\0\0G\x09p\
roducers\x01\x0cprocessed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\
\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
