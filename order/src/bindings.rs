// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod pricing_client {
        #[allow(dead_code, clippy::all)]
        pub mod pricing_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type WasiClocksDatetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type GolemRpcWorkerId = super::super::super::golem::rpc::types::WorkerId;
            pub type GolemRpcCancellationToken = super::super::super::golem::rpc::types::CancellationToken;
            pub type Pricing = super::super::super::golem::pricing_exports::api::Pricing;
            pub type PricingItem = super::super::super::golem::pricing_exports::api::PricingItem;
            pub type SalePricingItem = super::super::super::golem::pricing_exports::api::SalePricingItem;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetResult {
                handle: _rt::Resource<FutureGetResult>,
            }
            impl FutureGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetPriceResult {
                handle: _rt::Resource<FutureGetPriceResult>,
            }
            impl FutureGetPriceResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureGetPriceResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-price-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureLoadResult {
                handle: _rt::Resource<FutureLoadResult>,
            }
            impl FutureLoadResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureLoadResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-load-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureSaveResult {
                handle: _rt::Resource<FutureSaveResult>,
            }
            impl FutureSaveResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureSaveResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-save-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }
            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LoadSnapshot {
                handle: _rt::Resource<LoadSnapshot>,
            }
            impl LoadSnapshot {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LoadSnapshot {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]load-snapshot"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SaveSnapshot {
                handle: _rt::Resource<SaveSnapshot>,
            }
            impl SaveSnapshot {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SaveSnapshot {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]save-snapshot"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<Pricing>> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 80]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 80],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                let l6 = *ptr0.add(24).cast::<*mut u8>();
                                                let l7 = *ptr0.add(28).cast::<usize>();
                                                let base15 = l6;
                                                let len15 = l7;
                                                let mut result15 = _rt::Vec::with_capacity(len15);
                                                for i in 0..len15 {
                                                    let base = base15.add(i * 20);
                                                    let e15 = {
                                                        let l8 = *base.add(0).cast::<f32>();
                                                        let l9 = *base.add(4).cast::<*mut u8>();
                                                        let l10 = *base.add(8).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = *base.add(12).cast::<*mut u8>();
                                                        let l13 = *base.add(16).cast::<usize>();
                                                        let len14 = l13;
                                                        let bytes14 = _rt::Vec::from_raw_parts(
                                                            l12.cast(),
                                                            len14,
                                                            len14,
                                                        );
                                                        super::super::super::golem::pricing_exports::api::PricingItem {
                                                            price: l8,
                                                            currency: _rt::string_lift(bytes11),
                                                            zone: _rt::string_lift(bytes14),
                                                        }
                                                    };
                                                    result15.push(e15);
                                                }
                                                _rt::cabi_dealloc(base15, len15 * 20, 4);
                                                let l16 = *ptr0.add(32).cast::<*mut u8>();
                                                let l17 = *ptr0.add(36).cast::<usize>();
                                                let base25 = l16;
                                                let len25 = l17;
                                                let mut result25 = _rt::Vec::with_capacity(len25);
                                                for i in 0..len25 {
                                                    let base = base25.add(i * 20);
                                                    let e25 = {
                                                        let l18 = *base.add(0).cast::<f32>();
                                                        let l19 = *base.add(4).cast::<*mut u8>();
                                                        let l20 = *base.add(8).cast::<usize>();
                                                        let len21 = l20;
                                                        let bytes21 = _rt::Vec::from_raw_parts(
                                                            l19.cast(),
                                                            len21,
                                                            len21,
                                                        );
                                                        let l22 = *base.add(12).cast::<*mut u8>();
                                                        let l23 = *base.add(16).cast::<usize>();
                                                        let len24 = l23;
                                                        let bytes24 = _rt::Vec::from_raw_parts(
                                                            l22.cast(),
                                                            len24,
                                                            len24,
                                                        );
                                                        super::super::super::golem::pricing_exports::api::PricingItem {
                                                            price: l18,
                                                            currency: _rt::string_lift(bytes21),
                                                            zone: _rt::string_lift(bytes24),
                                                        }
                                                    };
                                                    result25.push(e25);
                                                }
                                                _rt::cabi_dealloc(base25, len25 * 20, 4);
                                                let l26 = *ptr0.add(40).cast::<*mut u8>();
                                                let l27 = *ptr0.add(44).cast::<usize>();
                                                let base41 = l26;
                                                let len41 = l27;
                                                let mut result41 = _rt::Vec::with_capacity(len41);
                                                for i in 0..len41 {
                                                    let base = base41.add(i * 72);
                                                    let e41 = {
                                                        let l28 = *base.add(0).cast::<f32>();
                                                        let l29 = *base.add(4).cast::<*mut u8>();
                                                        let l30 = *base.add(8).cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        let l32 = *base.add(12).cast::<*mut u8>();
                                                        let l33 = *base.add(16).cast::<usize>();
                                                        let len34 = l33;
                                                        let bytes34 = _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        );
                                                        let l35 = i32::from(*base.add(24).cast::<u8>());
                                                        let l38 = i32::from(*base.add(48).cast::<u8>());
                                                        super::super::super::golem::pricing_exports::api::SalePricingItem {
                                                            price: l28,
                                                            currency: _rt::string_lift(bytes31),
                                                            zone: _rt::string_lift(bytes34),
                                                            start: match l35 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l36 = *base.add(32).cast::<i64>();
                                                                        let l37 = *base.add(40).cast::<i32>();
                                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                            seconds: l36 as u64,
                                                                            nanoseconds: l37 as u32,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            end: match l38 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l39 = *base.add(56).cast::<i64>();
                                                                        let l40 = *base.add(64).cast::<i32>();
                                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                            seconds: l39 as u64,
                                                                            nanoseconds: l40 as u32,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    result41.push(e41);
                                                }
                                                _rt::cabi_dealloc(base41, len41 * 72, 8);
                                                let l42 = *ptr0.add(48).cast::<i64>();
                                                let l43 = *ptr0.add(56).cast::<i32>();
                                                let l44 = *ptr0.add(64).cast::<i64>();
                                                let l45 = *ptr0.add(72).cast::<i32>();
                                                super::super::super::golem::pricing_exports::api::Pricing {
                                                    product_id: _rt::string_lift(bytes5),
                                                    msrp_prices: result15,
                                                    list_prices: result25,
                                                    sale_prices: result41,
                                                    created_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                        seconds: l42 as u64,
                                                        nanoseconds: l43 as u32,
                                                    },
                                                    updated_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                        seconds: l44 as u64,
                                                        nanoseconds: l45 as u32,
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureGetPriceResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-price-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureGetPriceResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<PricingItem>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 28]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 28],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-price-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<f32>();
                                                let l4 = *ptr0.add(12).cast::<*mut u8>();
                                                let l5 = *ptr0.add(16).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                let l7 = *ptr0.add(20).cast::<*mut u8>();
                                                let l8 = *ptr0.add(24).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                super::super::super::golem::pricing_exports::api::PricingItem {
                                                    price: l3,
                                                    currency: _rt::string_lift(bytes6),
                                                    zone: _rt::string_lift(bytes9),
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureLoadResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-load-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureLoadResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-load-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureSaveResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-save-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureSaveResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-save-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> Api {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]api.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get(&self) -> Option<Pricing> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 72],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(
                                        l2.cast(),
                                        len4,
                                        len4,
                                    );
                                    let l5 = *ptr0.add(16).cast::<*mut u8>();
                                    let l6 = *ptr0.add(20).cast::<usize>();
                                    let base14 = l5;
                                    let len14 = l6;
                                    let mut result14 = _rt::Vec::with_capacity(len14);
                                    for i in 0..len14 {
                                        let base = base14.add(i * 20);
                                        let e14 = {
                                            let l7 = *base.add(0).cast::<f32>();
                                            let l8 = *base.add(4).cast::<*mut u8>();
                                            let l9 = *base.add(8).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            let l11 = *base.add(12).cast::<*mut u8>();
                                            let l12 = *base.add(16).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            super::super::super::golem::pricing_exports::api::PricingItem {
                                                price: l7,
                                                currency: _rt::string_lift(bytes10),
                                                zone: _rt::string_lift(bytes13),
                                            }
                                        };
                                        result14.push(e14);
                                    }
                                    _rt::cabi_dealloc(base14, len14 * 20, 4);
                                    let l15 = *ptr0.add(24).cast::<*mut u8>();
                                    let l16 = *ptr0.add(28).cast::<usize>();
                                    let base24 = l15;
                                    let len24 = l16;
                                    let mut result24 = _rt::Vec::with_capacity(len24);
                                    for i in 0..len24 {
                                        let base = base24.add(i * 20);
                                        let e24 = {
                                            let l17 = *base.add(0).cast::<f32>();
                                            let l18 = *base.add(4).cast::<*mut u8>();
                                            let l19 = *base.add(8).cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                l18.cast(),
                                                len20,
                                                len20,
                                            );
                                            let l21 = *base.add(12).cast::<*mut u8>();
                                            let l22 = *base.add(16).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                l21.cast(),
                                                len23,
                                                len23,
                                            );
                                            super::super::super::golem::pricing_exports::api::PricingItem {
                                                price: l17,
                                                currency: _rt::string_lift(bytes20),
                                                zone: _rt::string_lift(bytes23),
                                            }
                                        };
                                        result24.push(e24);
                                    }
                                    _rt::cabi_dealloc(base24, len24 * 20, 4);
                                    let l25 = *ptr0.add(32).cast::<*mut u8>();
                                    let l26 = *ptr0.add(36).cast::<usize>();
                                    let base40 = l25;
                                    let len40 = l26;
                                    let mut result40 = _rt::Vec::with_capacity(len40);
                                    for i in 0..len40 {
                                        let base = base40.add(i * 72);
                                        let e40 = {
                                            let l27 = *base.add(0).cast::<f32>();
                                            let l28 = *base.add(4).cast::<*mut u8>();
                                            let l29 = *base.add(8).cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                l28.cast(),
                                                len30,
                                                len30,
                                            );
                                            let l31 = *base.add(12).cast::<*mut u8>();
                                            let l32 = *base.add(16).cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            let l34 = i32::from(*base.add(24).cast::<u8>());
                                            let l37 = i32::from(*base.add(48).cast::<u8>());
                                            super::super::super::golem::pricing_exports::api::SalePricingItem {
                                                price: l27,
                                                currency: _rt::string_lift(bytes30),
                                                zone: _rt::string_lift(bytes33),
                                                start: match l34 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l35 = *base.add(32).cast::<i64>();
                                                            let l36 = *base.add(40).cast::<i32>();
                                                            super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l35 as u64,
                                                                nanoseconds: l36 as u32,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                end: match l37 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l38 = *base.add(56).cast::<i64>();
                                                            let l39 = *base.add(64).cast::<i32>();
                                                            super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l38 as u64,
                                                                nanoseconds: l39 as u32,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result40.push(e40);
                                    }
                                    _rt::cabi_dealloc(base40, len40 * 72, 8);
                                    let l41 = *ptr0.add(40).cast::<i64>();
                                    let l42 = *ptr0.add(48).cast::<i32>();
                                    let l43 = *ptr0.add(56).cast::<i64>();
                                    let l44 = *ptr0.add(64).cast::<i32>();
                                    super::super::super::golem::pricing_exports::api::Pricing {
                                        product_id: _rt::string_lift(bytes4),
                                        msrp_prices: result14,
                                        list_prices: result24,
                                        sale_prices: result40,
                                        created_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l41 as u64,
                                            nanoseconds: l42 as u32,
                                        },
                                        updated_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l43 as u64,
                                            nanoseconds: l44 as u32,
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> FutureGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.get"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureGetResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_get(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-get"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get_price(
                    &self,
                    currency: &str,
                    zone: &str,
                ) -> Option<PricingItem> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24],
                        );
                        let vec0 = currency;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = zone;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get-price"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = *ptr2.add(4).cast::<f32>();
                                    let l5 = *ptr2.add(8).cast::<*mut u8>();
                                    let l6 = *ptr2.add(12).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    let l8 = *ptr2.add(16).cast::<*mut u8>();
                                    let l9 = *ptr2.add(20).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    super::super::super::golem::pricing_exports::api::PricingItem {
                                        price: l4,
                                        currency: _rt::string_lift(bytes7),
                                        zone: _rt::string_lift(bytes10),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_price(
                    &self,
                    currency: &str,
                    zone: &str,
                ) -> FutureGetPriceResult {
                    unsafe {
                        let vec0 = currency;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = zone;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.get-price"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                        );
                        FutureGetPriceResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_get_price(
                    &self,
                    currency: &str,
                    zone: &str,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec0 = currency;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = zone;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds2,
                            nanoseconds: nanoseconds2,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-get-price"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            _rt::as_i64(seconds2),
                            _rt::as_i32(nanoseconds2),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                    sale_prices: &[SalePricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec7.len() * 20,
                            4,
                        );
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }
                        let vec13 = sale_prices;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 72,
                            8,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 72);
                            {
                                let super::super::super::golem::pricing_exports::api::SalePricingItem {
                                    price: price8,
                                    currency: currency8,
                                    zone: zone8,
                                    start: start8,
                                    end: end8,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                                let vec9 = currency8;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *base.add(8).cast::<usize>() = len9;
                                *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = zone8;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(16).cast::<usize>() = len10;
                                *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                match start8 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds11,
                                            nanoseconds: nanoseconds11,
                                        } = e;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                        *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match end8 {
                                    Some(e) => {
                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    None => {
                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-pricing"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3,
                            len3,
                            result7,
                            len7,
                            result13,
                            len13,
                        );
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                    sale_prices: &[SalePricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec7.len() * 20,
                            4,
                        );
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }
                        let vec13 = sale_prices;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 72,
                            8,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 72);
                            {
                                let super::super::super::golem::pricing_exports::api::SalePricingItem {
                                    price: price8,
                                    currency: currency8,
                                    zone: zone8,
                                    start: start8,
                                    end: end8,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                                let vec9 = currency8;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *base.add(8).cast::<usize>() = len9;
                                *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = zone8;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(16).cast::<usize>() = len10;
                                *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                match start8 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds11,
                                            nanoseconds: nanoseconds11,
                                        } = e;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                        *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match end8 {
                                    Some(e) => {
                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    None => {
                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-pricing"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3,
                            len3,
                            result7,
                            len7,
                            result13,
                            len13,
                        );
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_initialize_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                    sale_prices: &[SalePricingItem],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec7.len() * 20,
                            4,
                        );
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }
                        let vec13 = sale_prices;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 72,
                            8,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 72);
                            {
                                let super::super::super::golem::pricing_exports::api::SalePricingItem {
                                    price: price8,
                                    currency: currency8,
                                    zone: zone8,
                                    start: start8,
                                    end: end8,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                                let vec9 = currency8;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *base.add(8).cast::<usize>() = len9;
                                *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = zone8;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(16).cast::<usize>() = len10;
                                *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                match start8 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds11,
                                            nanoseconds: nanoseconds11,
                                        } = e;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                        *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match end8 {
                                    Some(e) => {
                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    None => {
                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds14,
                            nanoseconds: nanoseconds14,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-initialize-pricing"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result3,
                            len3,
                            result7,
                            len7,
                            result13,
                            len13,
                            _rt::as_i64(seconds14),
                            _rt::as_i32(nanoseconds14),
                        );
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_update_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                    sale_prices: &[SalePricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec7.len() * 20,
                            4,
                        );
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }
                        let vec13 = sale_prices;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 72,
                            8,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 72);
                            {
                                let super::super::super::golem::pricing_exports::api::SalePricingItem {
                                    price: price8,
                                    currency: currency8,
                                    zone: zone8,
                                    start: start8,
                                    end: end8,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                                let vec9 = currency8;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *base.add(8).cast::<usize>() = len9;
                                *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = zone8;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(16).cast::<usize>() = len10;
                                *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                match start8 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds11,
                                            nanoseconds: nanoseconds11,
                                        } = e;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                        *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match end8 {
                                    Some(e) => {
                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    None => {
                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-update-pricing"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3,
                            len3,
                            result7,
                            len7,
                            result13,
                            len13,
                        );
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                    sale_prices: &[SalePricingItem],
                ) {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec7.len() * 20,
                            4,
                        );
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }
                        let vec13 = sale_prices;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 72,
                            8,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 72);
                            {
                                let super::super::super::golem::pricing_exports::api::SalePricingItem {
                                    price: price8,
                                    currency: currency8,
                                    zone: zone8,
                                    start: start8,
                                    end: end8,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                                let vec9 = currency8;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *base.add(8).cast::<usize>() = len9;
                                *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = zone8;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(16).cast::<usize>() = len10;
                                *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                match start8 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds11,
                                            nanoseconds: nanoseconds11,
                                        } = e;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                        *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match end8 {
                                    Some(e) => {
                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    None => {
                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.update-pricing"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3,
                            len3,
                            result7,
                            len7,
                            result13,
                            len13,
                        );
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_update_pricing(
                    &self,
                    msrp_prices: &[PricingItem],
                    list_prices: &[PricingItem],
                    sale_prices: &[SalePricingItem],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec3 = msrp_prices;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price0,
                                    currency: currency0,
                                    zone: zone0,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                                let vec1 = currency0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(8).cast::<usize>() = len1;
                                *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = zone0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(16).cast::<usize>() = len2;
                                *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec7 = list_prices;
                        let len7 = vec7.len();
                        let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec7.len() * 20,
                            4,
                        );
                        let result7 = if layout7.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout7);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec7.into_iter().enumerate() {
                            let base = result7.add(i * 20);
                            {
                                let super::super::super::golem::pricing_exports::api::PricingItem {
                                    price: price4,
                                    currency: currency4,
                                    zone: zone4,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                                let vec5 = currency4;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(8).cast::<usize>() = len5;
                                *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                                let vec6 = zone4;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                *base.add(16).cast::<usize>() = len6;
                                *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                            }
                        }
                        let vec13 = sale_prices;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 72,
                            8,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 72);
                            {
                                let super::super::super::golem::pricing_exports::api::SalePricingItem {
                                    price: price8,
                                    currency: currency8,
                                    zone: zone8,
                                    start: start8,
                                    end: end8,
                                } = e;
                                *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                                let vec9 = currency8;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *base.add(8).cast::<usize>() = len9;
                                *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = zone8;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(16).cast::<usize>() = len10;
                                *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                match start8 {
                                    Some(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds11,
                                            nanoseconds: nanoseconds11,
                                        } = e;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                        *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                    }
                                    None => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                match end8 {
                                    Some(e) => {
                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    None => {
                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds14,
                            nanoseconds: nanoseconds14,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-update-pricing"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result3,
                            len3,
                            result7,
                            len7,
                            result13,
                            len13,
                            _rt::as_i64(seconds14),
                            _rt::as_i32(nanoseconds14),
                        );
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout7.size() != 0 {
                            _rt::alloc::dealloc(result7.cast(), layout7);
                        }
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]load-snapshot"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        LoadSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> LoadSnapshot {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]load-snapshot.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        LoadSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_load(&self, bytes: &[u8]) -> Result<(), _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.blocking-load"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        l3.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn load(&self, bytes: &[u8]) -> FutureLoadResult {
                    unsafe {
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.load"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        FutureLoadResult::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_load(
                    &self,
                    bytes: &[u8],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds1,
                            nanoseconds: nanoseconds1,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.schedule-load"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(seconds1),
                            _rt::as_i32(nanoseconds1),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]save-snapshot"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        SaveSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> SaveSnapshot {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]save-snapshot.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        SaveSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_save(&self) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.blocking-save"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn save(&self) -> FutureSaveResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.save"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureSaveResult::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_save(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:pricing-client/pricing-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.schedule-save"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod pricing_exports {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            #[derive(Clone)]
            pub struct PricingItem {
                pub price: f32,
                pub currency: _rt::String,
                pub zone: _rt::String,
            }
            impl ::core::fmt::Debug for PricingItem {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PricingItem")
                        .field("price", &self.price)
                        .field("currency", &self.currency)
                        .field("zone", &self.zone)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SalePricingItem {
                pub price: f32,
                pub currency: _rt::String,
                pub zone: _rt::String,
                pub start: Option<Datetime>,
                pub end: Option<Datetime>,
            }
            impl ::core::fmt::Debug for SalePricingItem {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SalePricingItem")
                        .field("price", &self.price)
                        .field("currency", &self.currency)
                        .field("zone", &self.zone)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Pricing {
                pub product_id: _rt::String,
                pub msrp_prices: _rt::Vec<PricingItem>,
                pub list_prices: _rt::Vec<PricingItem>,
                pub sale_prices: _rt::Vec<SalePricingItem>,
                pub created_at: Datetime,
                pub updated_at: Datetime,
            }
            impl ::core::fmt::Debug for Pricing {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Pricing")
                        .field("product-id", &self.product_id)
                        .field("msrp-prices", &self.msrp_prices)
                        .field("list-prices", &self.list_prices)
                        .field("sale-prices", &self.sale_prices)
                        .field("created-at", &self.created_at)
                        .field("updated-at", &self.updated_at)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Pricing> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 72]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing-exports/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(8).cast::<*mut u8>();
                                let l3 = *ptr0.add(12).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                let l5 = *ptr0.add(16).cast::<*mut u8>();
                                let l6 = *ptr0.add(20).cast::<usize>();
                                let base14 = l5;
                                let len14 = l6;
                                let mut result14 = _rt::Vec::with_capacity(len14);
                                for i in 0..len14 {
                                    let base = base14.add(i * 20);
                                    let e14 = {
                                        let l7 = *base.add(0).cast::<f32>();
                                        let l8 = *base.add(4).cast::<*mut u8>();
                                        let l9 = *base.add(8).cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        let l11 = *base.add(12).cast::<*mut u8>();
                                        let l12 = *base.add(16).cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 = _rt::Vec::from_raw_parts(
                                            l11.cast(),
                                            len13,
                                            len13,
                                        );
                                        PricingItem {
                                            price: l7,
                                            currency: _rt::string_lift(bytes10),
                                            zone: _rt::string_lift(bytes13),
                                        }
                                    };
                                    result14.push(e14);
                                }
                                _rt::cabi_dealloc(base14, len14 * 20, 4);
                                let l15 = *ptr0.add(24).cast::<*mut u8>();
                                let l16 = *ptr0.add(28).cast::<usize>();
                                let base24 = l15;
                                let len24 = l16;
                                let mut result24 = _rt::Vec::with_capacity(len24);
                                for i in 0..len24 {
                                    let base = base24.add(i * 20);
                                    let e24 = {
                                        let l17 = *base.add(0).cast::<f32>();
                                        let l18 = *base.add(4).cast::<*mut u8>();
                                        let l19 = *base.add(8).cast::<usize>();
                                        let len20 = l19;
                                        let bytes20 = _rt::Vec::from_raw_parts(
                                            l18.cast(),
                                            len20,
                                            len20,
                                        );
                                        let l21 = *base.add(12).cast::<*mut u8>();
                                        let l22 = *base.add(16).cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 = _rt::Vec::from_raw_parts(
                                            l21.cast(),
                                            len23,
                                            len23,
                                        );
                                        PricingItem {
                                            price: l17,
                                            currency: _rt::string_lift(bytes20),
                                            zone: _rt::string_lift(bytes23),
                                        }
                                    };
                                    result24.push(e24);
                                }
                                _rt::cabi_dealloc(base24, len24 * 20, 4);
                                let l25 = *ptr0.add(32).cast::<*mut u8>();
                                let l26 = *ptr0.add(36).cast::<usize>();
                                let base40 = l25;
                                let len40 = l26;
                                let mut result40 = _rt::Vec::with_capacity(len40);
                                for i in 0..len40 {
                                    let base = base40.add(i * 72);
                                    let e40 = {
                                        let l27 = *base.add(0).cast::<f32>();
                                        let l28 = *base.add(4).cast::<*mut u8>();
                                        let l29 = *base.add(8).cast::<usize>();
                                        let len30 = l29;
                                        let bytes30 = _rt::Vec::from_raw_parts(
                                            l28.cast(),
                                            len30,
                                            len30,
                                        );
                                        let l31 = *base.add(12).cast::<*mut u8>();
                                        let l32 = *base.add(16).cast::<usize>();
                                        let len33 = l32;
                                        let bytes33 = _rt::Vec::from_raw_parts(
                                            l31.cast(),
                                            len33,
                                            len33,
                                        );
                                        let l34 = i32::from(*base.add(24).cast::<u8>());
                                        let l37 = i32::from(*base.add(48).cast::<u8>());
                                        SalePricingItem {
                                            price: l27,
                                            currency: _rt::string_lift(bytes30),
                                            zone: _rt::string_lift(bytes33),
                                            start: match l34 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l35 = *base.add(32).cast::<i64>();
                                                        let l36 = *base.add(40).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l35 as u64,
                                                            nanoseconds: l36 as u32,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            end: match l37 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l38 = *base.add(56).cast::<i64>();
                                                        let l39 = *base.add(64).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l38 as u64,
                                                            nanoseconds: l39 as u32,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    result40.push(e40);
                                }
                                _rt::cabi_dealloc(base40, len40 * 72, 8);
                                let l41 = *ptr0.add(40).cast::<i64>();
                                let l42 = *ptr0.add(48).cast::<i32>();
                                let l43 = *ptr0.add(56).cast::<i64>();
                                let l44 = *ptr0.add(64).cast::<i32>();
                                Pricing {
                                    product_id: _rt::string_lift(bytes4),
                                    msrp_prices: result14,
                                    list_prices: result24,
                                    sale_prices: result40,
                                    created_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: l41 as u64,
                                        nanoseconds: l42 as u32,
                                    },
                                    updated_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: l43 as u64,
                                        nanoseconds: l44 as u32,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_price(currency: &str, zone: &str) -> Option<PricingItem> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = currency;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = zone;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing-exports/api")]
                    extern "C" {
                        #[link_name = "get-price"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr2.add(4).cast::<f32>();
                                let l5 = *ptr2.add(8).cast::<*mut u8>();
                                let l6 = *ptr2.add(12).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                let l8 = *ptr2.add(16).cast::<*mut u8>();
                                let l9 = *ptr2.add(20).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                PricingItem {
                                    price: l4,
                                    currency: _rt::string_lift(bytes7),
                                    zone: _rt::string_lift(bytes10),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_pricing(
                msrp_prices: &[PricingItem],
                list_prices: &[PricingItem],
                sale_prices: &[SalePricingItem],
            ) {
                unsafe {
                    let vec3 = msrp_prices;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * 20,
                        4,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 20);
                        {
                            let PricingItem {
                                price: price0,
                                currency: currency0,
                                zone: zone0,
                            } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                            let vec1 = currency0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(8).cast::<usize>() = len1;
                            *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                            let vec2 = zone0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(16).cast::<usize>() = len2;
                            *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    let vec7 = list_prices;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec7.len() * 20,
                        4,
                    );
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7.add(i * 20);
                        {
                            let PricingItem {
                                price: price4,
                                currency: currency4,
                                zone: zone4,
                            } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                            let vec5 = currency4;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(8).cast::<usize>() = len5;
                            *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = zone4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *base.add(16).cast::<usize>() = len6;
                            *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    }
                    let vec13 = sale_prices;
                    let len13 = vec13.len();
                    let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec13.len() * 72,
                        8,
                    );
                    let result13 = if layout13.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout13);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec13.into_iter().enumerate() {
                        let base = result13.add(i * 72);
                        {
                            let SalePricingItem {
                                price: price8,
                                currency: currency8,
                                zone: zone8,
                                start: start8,
                                end: end8,
                            } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                            let vec9 = currency8;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *base.add(8).cast::<usize>() = len9;
                            *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                            let vec10 = zone8;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *base.add(16).cast::<usize>() = len10;
                            *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                            match start8 {
                                Some(e) => {
                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: seconds11,
                                        nanoseconds: nanoseconds11,
                                    } = e;
                                    *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                    *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                }
                                None => {
                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match end8 {
                                Some(e) => {
                                    *base.add(48).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: seconds12,
                                        nanoseconds: nanoseconds12,
                                    } = e;
                                    *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                    *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                }
                                None => {
                                    *base.add(48).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing-exports/api")]
                    extern "C" {
                        #[link_name = "initialize-pricing"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    wit_import(result3, len3, result7, len7, result13, len13);
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    if layout7.size() != 0 {
                        _rt::alloc::dealloc(result7.cast(), layout7);
                    }
                    if layout13.size() != 0 {
                        _rt::alloc::dealloc(result13.cast(), layout13);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_pricing(
                msrp_prices: &[PricingItem],
                list_prices: &[PricingItem],
                sale_prices: &[SalePricingItem],
            ) {
                unsafe {
                    let vec3 = msrp_prices;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * 20,
                        4,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 20);
                        {
                            let PricingItem {
                                price: price0,
                                currency: currency0,
                                zone: zone0,
                            } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price0);
                            let vec1 = currency0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(8).cast::<usize>() = len1;
                            *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                            let vec2 = zone0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(16).cast::<usize>() = len2;
                            *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    let vec7 = list_prices;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec7.len() * 20,
                        4,
                    );
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7.add(i * 20);
                        {
                            let PricingItem {
                                price: price4,
                                currency: currency4,
                                zone: zone4,
                            } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price4);
                            let vec5 = currency4;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(8).cast::<usize>() = len5;
                            *base.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = zone4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *base.add(16).cast::<usize>() = len6;
                            *base.add(12).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    }
                    let vec13 = sale_prices;
                    let len13 = vec13.len();
                    let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec13.len() * 72,
                        8,
                    );
                    let result13 = if layout13.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout13);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec13.into_iter().enumerate() {
                        let base = result13.add(i * 72);
                        {
                            let SalePricingItem {
                                price: price8,
                                currency: currency8,
                                zone: zone8,
                                start: start8,
                                end: end8,
                            } = e;
                            *base.add(0).cast::<f32>() = _rt::as_f32(price8);
                            let vec9 = currency8;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *base.add(8).cast::<usize>() = len9;
                            *base.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                            let vec10 = zone8;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *base.add(16).cast::<usize>() = len10;
                            *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                            match start8 {
                                Some(e) => {
                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: seconds11,
                                        nanoseconds: nanoseconds11,
                                    } = e;
                                    *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                    *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                }
                                None => {
                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match end8 {
                                Some(e) => {
                                    *base.add(48).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: seconds12,
                                        nanoseconds: nanoseconds12,
                                    } = e;
                                    *base.add(56).cast::<i64>() = _rt::as_i64(seconds12);
                                    *base.add(64).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                }
                                None => {
                                    *base.add(48).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:pricing-exports/api")]
                    extern "C" {
                        #[link_name = "update-pricing"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    wit_import(result3, len3, result7, len7, result13, len13);
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    if layout7.size() != 0 {
                        _rt::alloc::dealloc(result7.cast(), layout7);
                    }
                    if layout13.size() != 0 {
                        _rt::alloc::dealloc(result13.cast(), layout13);
                    }
                }
            }
        }
    }
    pub mod product_client {
        #[allow(dead_code, clippy::all)]
        pub mod product_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type WasiClocksDatetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type GolemRpcWorkerId = super::super::super::golem::rpc::types::WorkerId;
            pub type GolemRpcCancellationToken = super::super::super::golem::rpc::types::CancellationToken;
            pub type Product = super::super::super::golem::product_exports::api::Product;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetResult {
                handle: _rt::Resource<FutureGetResult>,
            }
            impl FutureGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureLoadResult {
                handle: _rt::Resource<FutureLoadResult>,
            }
            impl FutureLoadResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureLoadResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-load-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureSaveResult {
                handle: _rt::Resource<FutureSaveResult>,
            }
            impl FutureSaveResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureSaveResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-save-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }
            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LoadSnapshot {
                handle: _rt::Resource<LoadSnapshot>,
            }
            impl LoadSnapshot {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LoadSnapshot {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]load-snapshot"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SaveSnapshot {
                handle: _rt::Resource<SaveSnapshot>,
            }
            impl SaveSnapshot {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SaveSnapshot {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]save-snapshot"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Option<Product>> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 88]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 88],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    match l2 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                let l6 = *ptr0.add(24).cast::<*mut u8>();
                                                let l7 = *ptr0.add(28).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                let l9 = *ptr0.add(32).cast::<*mut u8>();
                                                let l10 = *ptr0.add(36).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                let l12 = *ptr0.add(40).cast::<*mut u8>();
                                                let l13 = *ptr0.add(44).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                let l15 = *ptr0.add(48).cast::<*mut u8>();
                                                let l16 = *ptr0.add(52).cast::<usize>();
                                                let base20 = l15;
                                                let len20 = l16;
                                                let mut result20 = _rt::Vec::with_capacity(len20);
                                                for i in 0..len20 {
                                                    let base = base20.add(i * 8);
                                                    let e20 = {
                                                        let l17 = *base.add(0).cast::<*mut u8>();
                                                        let l18 = *base.add(4).cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    result20.push(e20);
                                                }
                                                _rt::cabi_dealloc(base20, len20 * 8, 4);
                                                let l21 = *ptr0.add(56).cast::<i64>();
                                                let l22 = *ptr0.add(64).cast::<i32>();
                                                let l23 = *ptr0.add(72).cast::<i64>();
                                                let l24 = *ptr0.add(80).cast::<i32>();
                                                super::super::super::golem::product_exports::api::Product {
                                                    product_id: _rt::string_lift(bytes5),
                                                    name: _rt::string_lift(bytes8),
                                                    brand: _rt::string_lift(bytes11),
                                                    description: _rt::string_lift(bytes14),
                                                    tags: result20,
                                                    created_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                        seconds: l21 as u64,
                                                        nanoseconds: l22 as u32,
                                                    },
                                                    updated_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                        seconds: l23 as u64,
                                                        nanoseconds: l24 as u32,
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureLoadResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-load-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureLoadResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<(), _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-load-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => {
                                            let e = ();
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureSaveResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-save-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureSaveResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-save-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> Api {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]api.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get(&self) -> Option<Product> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 80]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 80],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(
                                        l2.cast(),
                                        len4,
                                        len4,
                                    );
                                    let l5 = *ptr0.add(16).cast::<*mut u8>();
                                    let l6 = *ptr0.add(20).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    let l8 = *ptr0.add(24).cast::<*mut u8>();
                                    let l9 = *ptr0.add(28).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    let l11 = *ptr0.add(32).cast::<*mut u8>();
                                    let l12 = *ptr0.add(36).cast::<usize>();
                                    let len13 = l12;
                                    let bytes13 = _rt::Vec::from_raw_parts(
                                        l11.cast(),
                                        len13,
                                        len13,
                                    );
                                    let l14 = *ptr0.add(40).cast::<*mut u8>();
                                    let l15 = *ptr0.add(44).cast::<usize>();
                                    let base19 = l14;
                                    let len19 = l15;
                                    let mut result19 = _rt::Vec::with_capacity(len19);
                                    for i in 0..len19 {
                                        let base = base19.add(i * 8);
                                        let e19 = {
                                            let l16 = *base.add(0).cast::<*mut u8>();
                                            let l17 = *base.add(4).cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        result19.push(e19);
                                    }
                                    _rt::cabi_dealloc(base19, len19 * 8, 4);
                                    let l20 = *ptr0.add(48).cast::<i64>();
                                    let l21 = *ptr0.add(56).cast::<i32>();
                                    let l22 = *ptr0.add(64).cast::<i64>();
                                    let l23 = *ptr0.add(72).cast::<i32>();
                                    super::super::super::golem::product_exports::api::Product {
                                        product_id: _rt::string_lift(bytes4),
                                        name: _rt::string_lift(bytes7),
                                        brand: _rt::string_lift(bytes10),
                                        description: _rt::string_lift(bytes13),
                                        tags: result19,
                                        created_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l20 as u64,
                                            nanoseconds: l21 as u32,
                                        },
                                        updated_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l22 as u64,
                                            nanoseconds: l23 as u32,
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> FutureGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.get"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureGetResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_get(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-get"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_product(
                    &self,
                    name: &str,
                    brand: &str,
                    description: &str,
                    tags: &[_rt::String],
                ) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = brand;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = description;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = tags;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-product"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                        );
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_product(
                    &self,
                    name: &str,
                    brand: &str,
                    description: &str,
                    tags: &[_rt::String],
                ) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = brand;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = description;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = tags;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-product"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                        );
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_initialize_product(
                    &self,
                    name: &str,
                    brand: &str,
                    description: &str,
                    tags: &[_rt::String],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = brand;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = description;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = tags;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds5,
                            nanoseconds: nanoseconds5,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.schedule-initialize-product"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                            _rt::as_i64(seconds5),
                            _rt::as_i32(nanoseconds5),
                        );
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]load-snapshot"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        LoadSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> LoadSnapshot {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]load-snapshot.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        LoadSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_load(&self, bytes: &[u8]) -> Result<(), _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.blocking-load"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        l3.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn load(&self, bytes: &[u8]) -> FutureLoadResult {
                    unsafe {
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.load"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        FutureLoadResult::from_handle(ret as u32)
                    }
                }
            }
            impl LoadSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_load(
                    &self,
                    bytes: &[u8],
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds1,
                            nanoseconds: nanoseconds1,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]load-snapshot.schedule-load"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(seconds1),
                            _rt::as_i32(nanoseconds1),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]save-snapshot"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        SaveSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> SaveSnapshot {
                    unsafe {
                        let super::super::super::golem::rpc::types::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]save-snapshot.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        SaveSnapshot::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_save(&self) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.blocking-save"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn save(&self) -> FutureSaveResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.save"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureSaveResult::from_handle(ret as u32)
                    }
                }
            }
            impl SaveSnapshot {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_save(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "golem:product-client/product-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]save-snapshot.schedule-save"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::golem::rpc::types::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod product_exports {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            #[derive(Clone)]
            pub struct Product {
                pub product_id: _rt::String,
                pub name: _rt::String,
                pub brand: _rt::String,
                pub description: _rt::String,
                pub tags: _rt::Vec<_rt::String>,
                pub created_at: Datetime,
                pub updated_at: Datetime,
            }
            impl ::core::fmt::Debug for Product {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Product")
                        .field("product-id", &self.product_id)
                        .field("name", &self.name)
                        .field("brand", &self.brand)
                        .field("description", &self.description)
                        .field("tags", &self.tags)
                        .field("created-at", &self.created_at)
                        .field("updated-at", &self.updated_at)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Product> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 80]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 80]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:product-exports/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(8).cast::<*mut u8>();
                                let l3 = *ptr0.add(12).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    l2.cast(),
                                    len4,
                                    len4,
                                );
                                let l5 = *ptr0.add(16).cast::<*mut u8>();
                                let l6 = *ptr0.add(20).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                let l8 = *ptr0.add(24).cast::<*mut u8>();
                                let l9 = *ptr0.add(28).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                let l11 = *ptr0.add(32).cast::<*mut u8>();
                                let l12 = *ptr0.add(36).cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = *ptr0.add(40).cast::<*mut u8>();
                                let l15 = *ptr0.add(44).cast::<usize>();
                                let base19 = l14;
                                let len19 = l15;
                                let mut result19 = _rt::Vec::with_capacity(len19);
                                for i in 0..len19 {
                                    let base = base19.add(i * 8);
                                    let e19 = {
                                        let l16 = *base.add(0).cast::<*mut u8>();
                                        let l17 = *base.add(4).cast::<usize>();
                                        let len18 = l17;
                                        let bytes18 = _rt::Vec::from_raw_parts(
                                            l16.cast(),
                                            len18,
                                            len18,
                                        );
                                        _rt::string_lift(bytes18)
                                    };
                                    result19.push(e19);
                                }
                                _rt::cabi_dealloc(base19, len19 * 8, 4);
                                let l20 = *ptr0.add(48).cast::<i64>();
                                let l21 = *ptr0.add(56).cast::<i32>();
                                let l22 = *ptr0.add(64).cast::<i64>();
                                let l23 = *ptr0.add(72).cast::<i32>();
                                Product {
                                    product_id: _rt::string_lift(bytes4),
                                    name: _rt::string_lift(bytes7),
                                    brand: _rt::string_lift(bytes10),
                                    description: _rt::string_lift(bytes13),
                                    tags: result19,
                                    created_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: l20 as u64,
                                        nanoseconds: l21 as u32,
                                    },
                                    updated_at: super::super::super::wasi::clocks::wall_clock::Datetime {
                                        seconds: l22 as u64,
                                        nanoseconds: l23 as u32,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_product(
                name: &str,
                brand: &str,
                description: &str,
                tags: &[_rt::String],
            ) {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = brand;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = description;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec4 = tags;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec4.len() * 8,
                        4,
                    );
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 8);
                        {
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:product-exports/api")]
                    extern "C" {
                        #[link_name = "initialize-product"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                        ptr2.cast_mut(),
                        len2,
                        result4,
                        len4,
                    );
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            pub type NodeIndex = i32;
            pub type ResourceId = u64;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                Owned,
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub enum WitTypeNode {
                RecordType(_rt::Vec<(_rt::String, NodeIndex)>),
                VariantType(_rt::Vec<(_rt::String, Option<NodeIndex>)>),
                EnumType(_rt::Vec<_rt::String>),
                FlagsType(_rt::Vec<_rt::String>),
                TupleType(_rt::Vec<NodeIndex>),
                ListType(NodeIndex),
                OptionType(NodeIndex),
                ResultType((Option<NodeIndex>, Option<NodeIndex>)),
                PrimU8Type,
                PrimU16Type,
                PrimU32Type,
                PrimU64Type,
                PrimS8Type,
                PrimS16Type,
                PrimS32Type,
                PrimS64Type,
                PrimF32Type,
                PrimF64Type,
                PrimCharType,
                PrimBoolType,
                PrimStringType,
                HandleType((ResourceId, ResourceMode)),
            }
            impl ::core::fmt::Debug for WitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitTypeNode::RecordType(e) => {
                            f.debug_tuple("WitTypeNode::RecordType").field(e).finish()
                        }
                        WitTypeNode::VariantType(e) => {
                            f.debug_tuple("WitTypeNode::VariantType").field(e).finish()
                        }
                        WitTypeNode::EnumType(e) => {
                            f.debug_tuple("WitTypeNode::EnumType").field(e).finish()
                        }
                        WitTypeNode::FlagsType(e) => {
                            f.debug_tuple("WitTypeNode::FlagsType").field(e).finish()
                        }
                        WitTypeNode::TupleType(e) => {
                            f.debug_tuple("WitTypeNode::TupleType").field(e).finish()
                        }
                        WitTypeNode::ListType(e) => {
                            f.debug_tuple("WitTypeNode::ListType").field(e).finish()
                        }
                        WitTypeNode::OptionType(e) => {
                            f.debug_tuple("WitTypeNode::OptionType").field(e).finish()
                        }
                        WitTypeNode::ResultType(e) => {
                            f.debug_tuple("WitTypeNode::ResultType").field(e).finish()
                        }
                        WitTypeNode::PrimU8Type => {
                            f.debug_tuple("WitTypeNode::PrimU8Type").finish()
                        }
                        WitTypeNode::PrimU16Type => {
                            f.debug_tuple("WitTypeNode::PrimU16Type").finish()
                        }
                        WitTypeNode::PrimU32Type => {
                            f.debug_tuple("WitTypeNode::PrimU32Type").finish()
                        }
                        WitTypeNode::PrimU64Type => {
                            f.debug_tuple("WitTypeNode::PrimU64Type").finish()
                        }
                        WitTypeNode::PrimS8Type => {
                            f.debug_tuple("WitTypeNode::PrimS8Type").finish()
                        }
                        WitTypeNode::PrimS16Type => {
                            f.debug_tuple("WitTypeNode::PrimS16Type").finish()
                        }
                        WitTypeNode::PrimS32Type => {
                            f.debug_tuple("WitTypeNode::PrimS32Type").finish()
                        }
                        WitTypeNode::PrimS64Type => {
                            f.debug_tuple("WitTypeNode::PrimS64Type").finish()
                        }
                        WitTypeNode::PrimF32Type => {
                            f.debug_tuple("WitTypeNode::PrimF32Type").finish()
                        }
                        WitTypeNode::PrimF64Type => {
                            f.debug_tuple("WitTypeNode::PrimF64Type").finish()
                        }
                        WitTypeNode::PrimCharType => {
                            f.debug_tuple("WitTypeNode::PrimCharType").finish()
                        }
                        WitTypeNode::PrimBoolType => {
                            f.debug_tuple("WitTypeNode::PrimBoolType").finish()
                        }
                        WitTypeNode::PrimStringType => {
                            f.debug_tuple("WitTypeNode::PrimStringType").finish()
                        }
                        WitTypeNode::HandleType(e) => {
                            f.debug_tuple("WitTypeNode::HandleType").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitType {
                pub nodes: _rt::Vec<WitTypeNode>,
            }
            impl ::core::fmt::Debug for WitType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitType").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct ValueAndType {
                pub value: WitValue,
                pub typ: WitType,
            }
            impl ::core::fmt::Debug for ValueAndType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValueAndType")
                        .field("value", &self.value)
                        .field("typ", &self.typ)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                    extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(8).cast::<i64>();
                                let l4 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l3 as u64,
                                    low_bits: l4 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                let l6 = *ptr1.add(12).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                    extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(high_bits0), _rt::as_i64(low_bits0), ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                    _rt::string_lift(bytes4)
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId) -> Self {
                    unsafe {
                        let WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ephemeral(component_id: ComponentId) -> WasmRpc {
                    unsafe {
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid { high_bits: high_bits1, low_bits: low_bits1 } = uuid0;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[static]wasm-rpc.ephemeral"]
                            fn wit_import(_: i64, _: i64) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits1),
                            _rt::as_i64(low_bits1),
                        );
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;
                                                        _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 = {
                                                        let l21 = *base.add(8).cast::<i32>();
                                                        let l22 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l21 as u32,
                                                            match l22 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l23 = *base.add(16).cast::<i32>();
                                                                        l23
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();
                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;
                                                        _rt::Vec::from_raw_parts(l29.cast(), len31, len31)
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;
                                                        _rt::Vec::from_raw_parts(l32.cast(), len34, len34)
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 = i32::from(*base.add(8).cast::<u8>());
                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 = *base.add(12).cast::<i32>();
                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 = i32::from(*base.add(8).cast::<u8>());
                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l38 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l39 = *base.add(16).cast::<i32>();
                                                                                l39
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l40 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l41 = *base.add(16).cast::<i32>();
                                                                                l41
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 = i32::from(*base.add(8).cast::<u8>());
                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u16>());
                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();
                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();
                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 = i32::from(*base.add(8).cast::<i8>());
                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i16>());
                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();
                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();
                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();
                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );
                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };
                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);
                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );
                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );
                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );
                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );
                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };
                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };
                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 8,
                            4,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 8);
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len() * 24,
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(12).cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(12).cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(12).cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                            ptr1.cast_mut(),
                            len1,
                            result13,
                            len13,
                        );
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 8,
                            4,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 8);
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len() * 24,
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(12).cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(12).cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(12).cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                            ptr1.cast_mut(),
                            len1,
                            result13,
                            len13,
                        );
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        CancellationToken::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 = i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base.add(8).cast::<*mut u8>();
                                                                    let l7 = *base.add(12).cast::<usize>();
                                                                    let len8 = l7;
                                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 = *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l9 as u32,
                                                                        match l10 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l11 = *base.add(16).cast::<i32>();
                                                                                    l11
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 = *base.add(8).cast::<i32>();
                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                                    let l14 = *base.add(12).cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 = _rt::Vec::with_capacity(len16);
                                                                    for i in 0..len16 {
                                                                        let base = base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l15 as u8)
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(base16, len16 * 1, 1);
                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base.add(12).cast::<usize>();
                                                                    let len19 = l18;
                                                                    _rt::Vec::from_raw_parts(l17.cast(), len19, len19)
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base.add(12).cast::<usize>();
                                                                    let len22 = l21;
                                                                    _rt::Vec::from_raw_parts(l20.cast(), len22, len22)
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l23 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l24 = *base.add(12).cast::<i32>();
                                                                                l24
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l25 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l26 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l26 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l27 = *base.add(16).cast::<i32>();
                                                                                            l27
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l28 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l28 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l29 = *base.add(16).cast::<i32>();
                                                                                            l29
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(*base.add(8).cast::<u8>());
                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u16>());
                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 = *base.add(8).cast::<i32>();
                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 = *base.add(8).cast::<i64>();
                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(*base.add(8).cast::<i8>());
                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i16>());
                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 = *base.add(8).cast::<i32>();
                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 = *base.add(8).cast::<i64>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 = *base.add(8).cast::<f32>();
                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 = *base.add(8).cast::<f64>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                                    let l43 = *base.add(12).cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                                        l42.cast(),
                                                                        len44,
                                                                        len44,
                                                                    );
                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e49 = {
                                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                                    let l46 = *base.add(12).cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );
                                                                    let l48 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes47),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };
                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);
                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );
                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );
                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );
                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e64 = {
                                                            let l61 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );
                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };
                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cancel(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_value(vnt: &ValueAndType) -> WitValue {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * 24,
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11.add(i * 24);
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base.add(12).cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base.add(12).cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base.add(12).cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec26 = nodes12;
                    let len26 = vec26.len();
                    let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec26.len() * 24,
                        8,
                    );
                    let result26 = if layout26.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout26);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec26.into_iter().enumerate() {
                        let base = result26.add(i * 24);
                        {
                            match e {
                                WitTypeNode::RecordType(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec15 = e;
                                    let len15 = vec15.len();
                                    let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec15.len() * 12,
                                        4,
                                    );
                                    let result15 = if layout15.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout15);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec15.into_iter().enumerate() {
                                        let base = result15.add(i * 12);
                                        {
                                            let (t13_0, t13_1) = e;
                                            let vec14 = t13_0;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            *base.add(4).cast::<usize>() = len14;
                                            *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                            *base.add(8).cast::<i32>() = _rt::as_i32(t13_1);
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len15;
                                    *base.add(8).cast::<*mut u8>() = result15;
                                    cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * 16,
                                        4,
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18.add(i * 16);
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base.add(4).cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            match t16_1 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len18;
                                    *base.add(8).cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let vec20 = e;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * 8,
                                        4,
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 8);
                                        {
                                            let vec19 = e;
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            *base.add(4).cast::<usize>() = len19;
                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len20;
                                    *base.add(8).cast::<*mut u8>() = result20;
                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * 8,
                                        4,
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22.add(i * 8);
                                        {
                                            let vec21 = e;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base.add(4).cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len22;
                                    *base.add(8).cast::<*mut u8>() = result22;
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec23 = e;
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    *base.add(12).cast::<usize>() = len23;
                                    *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    let (t24_0, t24_1) = e;
                                    match t24_0 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t24_1 {
                                        Some(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t25_0, t25_1) = e;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(t25_0);
                                    *base.add(16).cast::<u8>() = (t25_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                    extern "C" {
                        #[link_name = "extract-value"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(result11, len11, result26, len26, ptr27);
                    let l28 = *ptr27.add(0).cast::<*mut u8>();
                    let l29 = *ptr27.add(4).cast::<usize>();
                    let base75 = l28;
                    let len75 = l29;
                    let mut result75 = _rt::Vec::with_capacity(len75);
                    for i in 0..len75 {
                        let base = base75.add(i * 24);
                        let e75 = {
                            let l30 = i32::from(*base.add(0).cast::<u8>());
                            let v74 = match l30 {
                                0 => {
                                    let e74 = {
                                        let l31 = *base.add(8).cast::<*mut u8>();
                                        let l32 = *base.add(12).cast::<usize>();
                                        let len33 = l32;
                                        _rt::Vec::from_raw_parts(l31.cast(), len33, len33)
                                    };
                                    WitNode::RecordValue(e74)
                                }
                                1 => {
                                    let e74 = {
                                        let l34 = *base.add(8).cast::<i32>();
                                        let l35 = i32::from(*base.add(12).cast::<u8>());
                                        (
                                            l34 as u32,
                                            match l35 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l36 = *base.add(16).cast::<i32>();
                                                        l36
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitNode::VariantValue(e74)
                                }
                                2 => {
                                    let e74 = {
                                        let l37 = *base.add(8).cast::<i32>();
                                        l37 as u32
                                    };
                                    WitNode::EnumValue(e74)
                                }
                                3 => {
                                    let e74 = {
                                        let l38 = *base.add(8).cast::<*mut u8>();
                                        let l39 = *base.add(12).cast::<usize>();
                                        let base41 = l38;
                                        let len41 = l39;
                                        let mut result41 = _rt::Vec::with_capacity(len41);
                                        for i in 0..len41 {
                                            let base = base41.add(i * 1);
                                            let e41 = {
                                                let l40 = i32::from(*base.add(0).cast::<u8>());
                                                _rt::bool_lift(l40 as u8)
                                            };
                                            result41.push(e41);
                                        }
                                        _rt::cabi_dealloc(base41, len41 * 1, 1);
                                        result41
                                    };
                                    WitNode::FlagsValue(e74)
                                }
                                4 => {
                                    let e74 = {
                                        let l42 = *base.add(8).cast::<*mut u8>();
                                        let l43 = *base.add(12).cast::<usize>();
                                        let len44 = l43;
                                        _rt::Vec::from_raw_parts(l42.cast(), len44, len44)
                                    };
                                    WitNode::TupleValue(e74)
                                }
                                5 => {
                                    let e74 = {
                                        let l45 = *base.add(8).cast::<*mut u8>();
                                        let l46 = *base.add(12).cast::<usize>();
                                        let len47 = l46;
                                        _rt::Vec::from_raw_parts(l45.cast(), len47, len47)
                                    };
                                    WitNode::ListValue(e74)
                                }
                                6 => {
                                    let e74 = {
                                        let l48 = i32::from(*base.add(8).cast::<u8>());
                                        match l48 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l49 = *base.add(12).cast::<i32>();
                                                    l49
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::OptionValue(e74)
                                }
                                7 => {
                                    let e74 = {
                                        let l50 = i32::from(*base.add(8).cast::<u8>());
                                        match l50 {
                                            0 => {
                                                let e = {
                                                    let l51 = i32::from(*base.add(12).cast::<u8>());
                                                    match l51 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l52 = *base.add(16).cast::<i32>();
                                                                l52
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Ok(e)
                                            }
                                            1 => {
                                                let e = {
                                                    let l53 = i32::from(*base.add(12).cast::<u8>());
                                                    match l53 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l54 = *base.add(16).cast::<i32>();
                                                                l54
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::ResultValue(e74)
                                }
                                8 => {
                                    let e74 = {
                                        let l55 = i32::from(*base.add(8).cast::<u8>());
                                        l55 as u8
                                    };
                                    WitNode::PrimU8(e74)
                                }
                                9 => {
                                    let e74 = {
                                        let l56 = i32::from(*base.add(8).cast::<u16>());
                                        l56 as u16
                                    };
                                    WitNode::PrimU16(e74)
                                }
                                10 => {
                                    let e74 = {
                                        let l57 = *base.add(8).cast::<i32>();
                                        l57 as u32
                                    };
                                    WitNode::PrimU32(e74)
                                }
                                11 => {
                                    let e74 = {
                                        let l58 = *base.add(8).cast::<i64>();
                                        l58 as u64
                                    };
                                    WitNode::PrimU64(e74)
                                }
                                12 => {
                                    let e74 = {
                                        let l59 = i32::from(*base.add(8).cast::<i8>());
                                        l59 as i8
                                    };
                                    WitNode::PrimS8(e74)
                                }
                                13 => {
                                    let e74 = {
                                        let l60 = i32::from(*base.add(8).cast::<i16>());
                                        l60 as i16
                                    };
                                    WitNode::PrimS16(e74)
                                }
                                14 => {
                                    let e74 = {
                                        let l61 = *base.add(8).cast::<i32>();
                                        l61
                                    };
                                    WitNode::PrimS32(e74)
                                }
                                15 => {
                                    let e74 = {
                                        let l62 = *base.add(8).cast::<i64>();
                                        l62
                                    };
                                    WitNode::PrimS64(e74)
                                }
                                16 => {
                                    let e74 = {
                                        let l63 = *base.add(8).cast::<f32>();
                                        l63
                                    };
                                    WitNode::PrimFloat32(e74)
                                }
                                17 => {
                                    let e74 = {
                                        let l64 = *base.add(8).cast::<f64>();
                                        l64
                                    };
                                    WitNode::PrimFloat64(e74)
                                }
                                18 => {
                                    let e74 = {
                                        let l65 = *base.add(8).cast::<i32>();
                                        _rt::char_lift(l65 as u32)
                                    };
                                    WitNode::PrimChar(e74)
                                }
                                19 => {
                                    let e74 = {
                                        let l66 = i32::from(*base.add(8).cast::<u8>());
                                        _rt::bool_lift(l66 as u8)
                                    };
                                    WitNode::PrimBool(e74)
                                }
                                20 => {
                                    let e74 = {
                                        let l67 = *base.add(8).cast::<*mut u8>();
                                        let l68 = *base.add(12).cast::<usize>();
                                        let len69 = l68;
                                        let bytes69 = _rt::Vec::from_raw_parts(
                                            l67.cast(),
                                            len69,
                                            len69,
                                        );
                                        _rt::string_lift(bytes69)
                                    };
                                    WitNode::PrimString(e74)
                                }
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e74 = {
                                        let l70 = *base.add(8).cast::<*mut u8>();
                                        let l71 = *base.add(12).cast::<usize>();
                                        let len72 = l71;
                                        let bytes72 = _rt::Vec::from_raw_parts(
                                            l70.cast(),
                                            len72,
                                            len72,
                                        );
                                        let l73 = *base.add(16).cast::<i64>();
                                        (
                                            Uri {
                                                value: _rt::string_lift(bytes72),
                                            },
                                            l73 as u64,
                                        )
                                    };
                                    WitNode::Handle(e74)
                                }
                            };
                            v74
                        };
                        result75.push(e75);
                    }
                    _rt::cabi_dealloc(base75, len75 * 24, 8);
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout26.size() != 0 {
                        _rt::alloc::dealloc(result26.cast(), layout26);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    WitValue { nodes: result75 }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_type(vnt: &ValueAndType) -> WitType {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * 24,
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11.add(i * 24);
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base.add(12).cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base.add(12).cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base.add(12).cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec26 = nodes12;
                    let len26 = vec26.len();
                    let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec26.len() * 24,
                        8,
                    );
                    let result26 = if layout26.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout26);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec26.into_iter().enumerate() {
                        let base = result26.add(i * 24);
                        {
                            match e {
                                WitTypeNode::RecordType(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec15 = e;
                                    let len15 = vec15.len();
                                    let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec15.len() * 12,
                                        4,
                                    );
                                    let result15 = if layout15.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout15);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec15.into_iter().enumerate() {
                                        let base = result15.add(i * 12);
                                        {
                                            let (t13_0, t13_1) = e;
                                            let vec14 = t13_0;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            *base.add(4).cast::<usize>() = len14;
                                            *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                            *base.add(8).cast::<i32>() = _rt::as_i32(t13_1);
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len15;
                                    *base.add(8).cast::<*mut u8>() = result15;
                                    cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * 16,
                                        4,
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18.add(i * 16);
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base.add(4).cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            match t16_1 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len18;
                                    *base.add(8).cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let vec20 = e;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * 8,
                                        4,
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 8);
                                        {
                                            let vec19 = e;
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            *base.add(4).cast::<usize>() = len19;
                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len20;
                                    *base.add(8).cast::<*mut u8>() = result20;
                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * 8,
                                        4,
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22.add(i * 8);
                                        {
                                            let vec21 = e;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base.add(4).cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len22;
                                    *base.add(8).cast::<*mut u8>() = result22;
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec23 = e;
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    *base.add(12).cast::<usize>() = len23;
                                    *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    let (t24_0, t24_1) = e;
                                    match t24_0 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t24_1 {
                                        Some(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t25_0, t25_1) = e;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(t25_0);
                                    *base.add(16).cast::<u8>() = (t25_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.0")]
                    extern "C" {
                        #[link_name = "extract-type"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(result11, len11, result26, len26, ptr27);
                    let l28 = *ptr27.add(0).cast::<*mut u8>();
                    let l29 = *ptr27.add(4).cast::<usize>();
                    let base70 = l28;
                    let len70 = l29;
                    let mut result70 = _rt::Vec::with_capacity(len70);
                    for i in 0..len70 {
                        let base = base70.add(i * 24);
                        let e70 = {
                            let l30 = i32::from(*base.add(0).cast::<u8>());
                            let v69 = match l30 {
                                0 => {
                                    let e69 = {
                                        let l31 = *base.add(8).cast::<*mut u8>();
                                        let l32 = *base.add(12).cast::<usize>();
                                        let base37 = l31;
                                        let len37 = l32;
                                        let mut result37 = _rt::Vec::with_capacity(len37);
                                        for i in 0..len37 {
                                            let base = base37.add(i * 12);
                                            let e37 = {
                                                let l33 = *base.add(0).cast::<*mut u8>();
                                                let l34 = *base.add(4).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                let l36 = *base.add(8).cast::<i32>();
                                                (_rt::string_lift(bytes35), l36)
                                            };
                                            result37.push(e37);
                                        }
                                        _rt::cabi_dealloc(base37, len37 * 12, 4);
                                        result37
                                    };
                                    WitTypeNode::RecordType(e69)
                                }
                                1 => {
                                    let e69 = {
                                        let l38 = *base.add(8).cast::<*mut u8>();
                                        let l39 = *base.add(12).cast::<usize>();
                                        let base45 = l38;
                                        let len45 = l39;
                                        let mut result45 = _rt::Vec::with_capacity(len45);
                                        for i in 0..len45 {
                                            let base = base45.add(i * 16);
                                            let e45 = {
                                                let l40 = *base.add(0).cast::<*mut u8>();
                                                let l41 = *base.add(4).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                let l43 = i32::from(*base.add(8).cast::<u8>());
                                                (
                                                    _rt::string_lift(bytes42),
                                                    match l43 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l44 = *base.add(12).cast::<i32>();
                                                                l44
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                )
                                            };
                                            result45.push(e45);
                                        }
                                        _rt::cabi_dealloc(base45, len45 * 16, 4);
                                        result45
                                    };
                                    WitTypeNode::VariantType(e69)
                                }
                                2 => {
                                    let e69 = {
                                        let l46 = *base.add(8).cast::<*mut u8>();
                                        let l47 = *base.add(12).cast::<usize>();
                                        let base51 = l46;
                                        let len51 = l47;
                                        let mut result51 = _rt::Vec::with_capacity(len51);
                                        for i in 0..len51 {
                                            let base = base51.add(i * 8);
                                            let e51 = {
                                                let l48 = *base.add(0).cast::<*mut u8>();
                                                let l49 = *base.add(4).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            result51.push(e51);
                                        }
                                        _rt::cabi_dealloc(base51, len51 * 8, 4);
                                        result51
                                    };
                                    WitTypeNode::EnumType(e69)
                                }
                                3 => {
                                    let e69 = {
                                        let l52 = *base.add(8).cast::<*mut u8>();
                                        let l53 = *base.add(12).cast::<usize>();
                                        let base57 = l52;
                                        let len57 = l53;
                                        let mut result57 = _rt::Vec::with_capacity(len57);
                                        for i in 0..len57 {
                                            let base = base57.add(i * 8);
                                            let e57 = {
                                                let l54 = *base.add(0).cast::<*mut u8>();
                                                let l55 = *base.add(4).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            result57.push(e57);
                                        }
                                        _rt::cabi_dealloc(base57, len57 * 8, 4);
                                        result57
                                    };
                                    WitTypeNode::FlagsType(e69)
                                }
                                4 => {
                                    let e69 = {
                                        let l58 = *base.add(8).cast::<*mut u8>();
                                        let l59 = *base.add(12).cast::<usize>();
                                        let len60 = l59;
                                        _rt::Vec::from_raw_parts(l58.cast(), len60, len60)
                                    };
                                    WitTypeNode::TupleType(e69)
                                }
                                5 => {
                                    let e69 = {
                                        let l61 = *base.add(8).cast::<i32>();
                                        l61
                                    };
                                    WitTypeNode::ListType(e69)
                                }
                                6 => {
                                    let e69 = {
                                        let l62 = *base.add(8).cast::<i32>();
                                        l62
                                    };
                                    WitTypeNode::OptionType(e69)
                                }
                                7 => {
                                    let e69 = {
                                        let l63 = i32::from(*base.add(8).cast::<u8>());
                                        let l65 = i32::from(*base.add(16).cast::<u8>());
                                        (
                                            match l63 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l64 = *base.add(12).cast::<i32>();
                                                        l64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            match l65 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l66 = *base.add(20).cast::<i32>();
                                                        l66
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitTypeNode::ResultType(e69)
                                }
                                8 => WitTypeNode::PrimU8Type,
                                9 => WitTypeNode::PrimU16Type,
                                10 => WitTypeNode::PrimU32Type,
                                11 => WitTypeNode::PrimU64Type,
                                12 => WitTypeNode::PrimS8Type,
                                13 => WitTypeNode::PrimS16Type,
                                14 => WitTypeNode::PrimS32Type,
                                15 => WitTypeNode::PrimS64Type,
                                16 => WitTypeNode::PrimF32Type,
                                17 => WitTypeNode::PrimF64Type,
                                18 => WitTypeNode::PrimCharType,
                                19 => WitTypeNode::PrimBoolType,
                                20 => WitTypeNode::PrimStringType,
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e69 = {
                                        let l67 = *base.add(8).cast::<i64>();
                                        let l68 = i32::from(*base.add(16).cast::<u8>());
                                        (l67 as u64, ResourceMode::_lift(l68 as u8))
                                    };
                                    WitTypeNode::HandleType(e69)
                                }
                            };
                            v69
                        };
                        result70.push(e70);
                    }
                    _rt::cabi_dealloc(base70, len70 * 24, 8);
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout26.size() != 0 {
                        _rt::alloc::dealloc(result26.cast(), layout26);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    WitType { nodes: result70 }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod api {
            /// Interface providing user-defined snapshotting capability. This can be used to perform manual update of workers
            /// when the new component incompatible with the old one.
            #[allow(dead_code, clippy::all)]
            pub mod load_snapshot {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_load_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::load(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_load<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Tries to load a user-defined snapshot, setting up the worker's state based on it.
                    /// The function can return with a failure to indicate that the update is not possible.
                    fn load(bytes: _rt::Vec<u8>) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_load_snapshot_1_1_6_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:api/load-snapshot@1.1.6#load"] unsafe extern "C" fn
                        export_load(arg0 : * mut u8, arg1 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_load_cabi::<$ty > (arg0, arg1) }
                        #[export_name = "cabi_post_golem:api/load-snapshot@1.1.6#load"]
                        unsafe extern "C" fn _post_return_load(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_load::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_load_snapshot_1_1_6_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
            /// Interface providing user-defined snapshotting capability. This can be used to perform manual update of workers
            /// when the new component incompatible with the old one.
            #[allow(dead_code, clippy::all)]
            pub mod save_snapshot {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_save_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::save();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_save<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 1, 1);
                }
                pub trait Guest {
                    /// Saves the component's state into a user-defined snapshot
                    fn save() -> _rt::Vec<u8>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_save_snapshot_1_1_6_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:api/save-snapshot@1.1.6#save"] unsafe extern "C" fn
                        export_save() -> * mut u8 { $($path_to_types)*::
                        _export_save_cabi::<$ty > () } #[export_name =
                        "cabi_post_golem:api/save-snapshot@1.1.6#save"] unsafe extern "C"
                        fn _post_return_save(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_save::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_save_snapshot_1_1_6_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8],
                );
            }
        }
        pub mod order_exports {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Datetime = super::super::super::super::wasi::clocks::wall_clock::Datetime;
                #[derive(Clone)]
                pub struct Address {
                    pub street: _rt::String,
                    pub city: _rt::String,
                    pub state_or_region: _rt::String,
                    pub country: _rt::String,
                    pub postal_code: _rt::String,
                    pub name: Option<_rt::String>,
                    pub phone_number: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Address {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Address")
                            .field("street", &self.street)
                            .field("city", &self.city)
                            .field("state-or-region", &self.state_or_region)
                            .field("country", &self.country)
                            .field("postal-code", &self.postal_code)
                            .field("name", &self.name)
                            .field("phone-number", &self.phone_number)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct AddressNotValidError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for AddressNotValidError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AddressNotValidError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct BillingAddressNotSetError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for BillingAddressNotSetError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("BillingAddressNotSetError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct EmailNotValidError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for EmailNotValidError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("EmailNotValidError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct EmptyEmailError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for EmptyEmailError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("EmptyEmailError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct EmptyItemsError {
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for EmptyItemsError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("EmptyItemsError")
                            .field("message", &self.message)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ItemNotFoundError {
                    pub message: _rt::String,
                    pub product_id: _rt::String,
                }
                impl ::core::fmt::Debug for ItemNotFoundError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ItemNotFoundError")
                            .field("message", &self.message)
                            .field("product-id", &self.product_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct OrderItem {
                    pub product_id: _rt::String,
                    pub product_name: _rt::String,
                    pub product_brand: _rt::String,
                    pub price: f32,
                    pub quantity: u32,
                }
                impl ::core::fmt::Debug for OrderItem {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("OrderItem")
                            .field("product-id", &self.product_id)
                            .field("product-name", &self.product_name)
                            .field("product-brand", &self.product_brand)
                            .field("price", &self.price)
                            .field("quantity", &self.quantity)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct CreateOrder {
                    pub user_id: _rt::String,
                    pub email: _rt::String,
                    pub items: _rt::Vec<OrderItem>,
                    pub billing_address: Option<Address>,
                    pub shipping_address: Option<Address>,
                    pub total: f32,
                    pub currency: _rt::String,
                }
                impl ::core::fmt::Debug for CreateOrder {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CreateOrder")
                            .field("user-id", &self.user_id)
                            .field("email", &self.email)
                            .field("items", &self.items)
                            .field("billing-address", &self.billing_address)
                            .field("shipping-address", &self.shipping_address)
                            .field("total", &self.total)
                            .field("currency", &self.currency)
                            .finish()
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum OrderStatus {
                    New,
                    Shipped,
                    Cancelled,
                }
                impl ::core::fmt::Debug for OrderStatus {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            OrderStatus::New => {
                                f.debug_tuple("OrderStatus::New").finish()
                            }
                            OrderStatus::Shipped => {
                                f.debug_tuple("OrderStatus::Shipped").finish()
                            }
                            OrderStatus::Cancelled => {
                                f.debug_tuple("OrderStatus::Cancelled").finish()
                            }
                        }
                    }
                }
                impl OrderStatus {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> OrderStatus {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => OrderStatus::New,
                            1 => OrderStatus::Shipped,
                            2 => OrderStatus::Cancelled,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct ActionNotAllowedError {
                    pub message: _rt::String,
                    pub status: OrderStatus,
                }
                impl ::core::fmt::Debug for ActionNotAllowedError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ActionNotAllowedError")
                            .field("message", &self.message)
                            .field("status", &self.status)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum CancelOrderError {
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for CancelOrderError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            CancelOrderError::ActionNotAllowed(e) => {
                                f.debug_tuple("CancelOrderError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for CancelOrderError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for CancelOrderError {}
                #[derive(Clone)]
                pub enum InitOrderError {
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for InitOrderError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            InitOrderError::ActionNotAllowed(e) => {
                                f.debug_tuple("InitOrderError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for InitOrderError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for InitOrderError {}
                #[derive(Clone)]
                pub struct Order {
                    pub order_id: _rt::String,
                    pub user_id: _rt::String,
                    pub order_status: OrderStatus,
                    pub email: Option<_rt::String>,
                    pub items: _rt::Vec<OrderItem>,
                    pub billing_address: Option<Address>,
                    pub shipping_address: Option<Address>,
                    pub total: f32,
                    pub currency: _rt::String,
                    pub created_at: Datetime,
                    pub updated_at: Datetime,
                }
                impl ::core::fmt::Debug for Order {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Order")
                            .field("order-id", &self.order_id)
                            .field("user-id", &self.user_id)
                            .field("order-status", &self.order_status)
                            .field("email", &self.email)
                            .field("items", &self.items)
                            .field("billing-address", &self.billing_address)
                            .field("shipping-address", &self.shipping_address)
                            .field("total", &self.total)
                            .field("currency", &self.currency)
                            .field("created-at", &self.created_at)
                            .field("updated-at", &self.updated_at)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct PricingNotFoundError {
                    pub message: _rt::String,
                    pub product_id: _rt::String,
                }
                impl ::core::fmt::Debug for PricingNotFoundError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PricingNotFoundError")
                            .field("message", &self.message)
                            .field("product-id", &self.product_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ProductNotFoundError {
                    pub message: _rt::String,
                    pub product_id: _rt::String,
                }
                impl ::core::fmt::Debug for ProductNotFoundError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ProductNotFoundError")
                            .field("message", &self.message)
                            .field("product-id", &self.product_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum AddItemError {
                    ProductNotFound(ProductNotFoundError),
                    PricingNotFound(PricingNotFoundError),
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for AddItemError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            AddItemError::ProductNotFound(e) => {
                                f.debug_tuple("AddItemError::ProductNotFound")
                                    .field(e)
                                    .finish()
                            }
                            AddItemError::PricingNotFound(e) => {
                                f.debug_tuple("AddItemError::PricingNotFound")
                                    .field(e)
                                    .finish()
                            }
                            AddItemError::ActionNotAllowed(e) => {
                                f.debug_tuple("AddItemError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for AddItemError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for AddItemError {}
                #[derive(Clone)]
                pub enum RemoveItemError {
                    ItemNotFound(ItemNotFoundError),
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for RemoveItemError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            RemoveItemError::ItemNotFound(e) => {
                                f.debug_tuple("RemoveItemError::ItemNotFound")
                                    .field(e)
                                    .finish()
                            }
                            RemoveItemError::ActionNotAllowed(e) => {
                                f.debug_tuple("RemoveItemError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for RemoveItemError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for RemoveItemError {}
                #[derive(Clone)]
                pub enum ShipOrderError {
                    EmptyItems(EmptyItemsError),
                    EmptyEmail(EmptyEmailError),
                    BillingAddressNotSet(BillingAddressNotSetError),
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for ShipOrderError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            ShipOrderError::EmptyItems(e) => {
                                f.debug_tuple("ShipOrderError::EmptyItems")
                                    .field(e)
                                    .finish()
                            }
                            ShipOrderError::EmptyEmail(e) => {
                                f.debug_tuple("ShipOrderError::EmptyEmail")
                                    .field(e)
                                    .finish()
                            }
                            ShipOrderError::BillingAddressNotSet(e) => {
                                f.debug_tuple("ShipOrderError::BillingAddressNotSet")
                                    .field(e)
                                    .finish()
                            }
                            ShipOrderError::ActionNotAllowed(e) => {
                                f.debug_tuple("ShipOrderError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for ShipOrderError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for ShipOrderError {}
                #[derive(Clone)]
                pub enum UpdateAddressError {
                    AddressNotValid(AddressNotValidError),
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for UpdateAddressError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            UpdateAddressError::AddressNotValid(e) => {
                                f.debug_tuple("UpdateAddressError::AddressNotValid")
                                    .field(e)
                                    .finish()
                            }
                            UpdateAddressError::ActionNotAllowed(e) => {
                                f.debug_tuple("UpdateAddressError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for UpdateAddressError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for UpdateAddressError {}
                #[derive(Clone)]
                pub enum UpdateEmailError {
                    EmailNotValid(EmailNotValidError),
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for UpdateEmailError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            UpdateEmailError::EmailNotValid(e) => {
                                f.debug_tuple("UpdateEmailError::EmailNotValid")
                                    .field(e)
                                    .finish()
                            }
                            UpdateEmailError::ActionNotAllowed(e) => {
                                f.debug_tuple("UpdateEmailError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for UpdateEmailError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for UpdateEmailError {}
                #[derive(Clone)]
                pub enum UpdateItemQuantityError {
                    ItemNotFound(ItemNotFoundError),
                    ActionNotAllowed(ActionNotAllowedError),
                }
                impl ::core::fmt::Debug for UpdateItemQuantityError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            UpdateItemQuantityError::ItemNotFound(e) => {
                                f.debug_tuple("UpdateItemQuantityError::ItemNotFound")
                                    .field(e)
                                    .finish()
                            }
                            UpdateItemQuantityError::ActionNotAllowed(e) => {
                                f.debug_tuple("UpdateItemQuantityError::ActionNotAllowed")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for UpdateItemQuantityError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for UpdateItemQuantityError {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_add_item_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::add_item(_rt::string_lift(bytes0), arg2 as u32);
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                AddItemError::ProductNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let ProductNotFoundError {
                                        message: message3,
                                        product_id: product_id3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(20).cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                AddItemError::PricingNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let PricingNotFoundError {
                                        message: message6,
                                        product_id: product_id6,
                                    } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = (product_id6.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(20).cast::<usize>() = len8;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                AddItemError::ActionNotAllowed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (2i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message9,
                                        status: status9,
                                    } = e;
                                    let vec10 = (message9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2.add(12).cast::<usize>() = len10;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *ptr2.add(16).cast::<u8>() = (status9.clone() as i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_add_item<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                1 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *arg0.add(8).cast::<*mut u8>();
                                    let l11 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_cancel_order_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::cancel_order();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                CancelOrderError::ActionNotAllowed(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message2,
                                        status: status2,
                                    } = e;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    *ptr1.add(16).cast::<u8>() = (status2.clone() as i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_cancel_order<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let Order {
                                order_id: order_id2,
                                user_id: user_id2,
                                order_status: order_status2,
                                email: email2,
                                items: items2,
                                billing_address: billing_address2,
                                shipping_address: shipping_address2,
                                total: total2,
                                currency: currency2,
                                created_at: created_at2,
                                updated_at: updated_at2,
                            } = e;
                            let vec3 = (order_id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(12).cast::<usize>() = len3;
                            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (user_id2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1.add(20).cast::<usize>() = len4;
                            *ptr1.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                            *ptr1.add(24).cast::<u8>() = (order_status2.clone() as i32)
                                as u8;
                            match email2 {
                                Some(e) => {
                                    *ptr1.add(28).cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1.add(36).cast::<usize>() = len5;
                                    *ptr1.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1.add(28).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec10 = items2;
                            let len10 = vec10.len();
                            let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec10.len() * 32,
                                4,
                            );
                            let result10 = if layout10.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout10);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec10.into_iter().enumerate() {
                                let base = result10.add(i * 32);
                                {
                                    let OrderItem {
                                        product_id: product_id6,
                                        product_name: product_name6,
                                        product_brand: product_brand6,
                                        price: price6,
                                        quantity: quantity6,
                                    } = e;
                                    let vec7 = (product_id6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base.add(4).cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = (product_name6.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base.add(12).cast::<usize>() = len8;
                                    *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    let vec9 = (product_brand6.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(20).cast::<usize>() = len9;
                                    *base.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                                    *base.add(24).cast::<f32>() = _rt::as_f32(price6);
                                    *base.add(28).cast::<i32>() = _rt::as_i32(quantity6);
                                }
                            }
                            *ptr1.add(44).cast::<usize>() = len10;
                            *ptr1.add(40).cast::<*mut u8>() = result10;
                            match billing_address2 {
                                Some(e) => {
                                    *ptr1.add(48).cast::<u8>() = (1i32) as u8;
                                    let Address {
                                        street: street11,
                                        city: city11,
                                        state_or_region: state_or_region11,
                                        country: country11,
                                        postal_code: postal_code11,
                                        name: name11,
                                        phone_number: phone_number11,
                                    } = e;
                                    let vec12 = (street11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1.add(56).cast::<usize>() = len12;
                                    *ptr1.add(52).cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = (city11.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1.add(64).cast::<usize>() = len13;
                                    *ptr1.add(60).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = (state_or_region11.into_bytes())
                                        .into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1.add(72).cast::<usize>() = len14;
                                    *ptr1.add(68).cast::<*mut u8>() = ptr14.cast_mut();
                                    let vec15 = (country11.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr1.add(80).cast::<usize>() = len15;
                                    *ptr1.add(76).cast::<*mut u8>() = ptr15.cast_mut();
                                    let vec16 = (postal_code11.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr1.add(88).cast::<usize>() = len16;
                                    *ptr1.add(84).cast::<*mut u8>() = ptr16.cast_mut();
                                    match name11 {
                                        Some(e) => {
                                            *ptr1.add(92).cast::<u8>() = (1i32) as u8;
                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *ptr1.add(100).cast::<usize>() = len17;
                                            *ptr1.add(96).cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(92).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match phone_number11 {
                                        Some(e) => {
                                            *ptr1.add(104).cast::<u8>() = (1i32) as u8;
                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            ::core::mem::forget(vec18);
                                            *ptr1.add(112).cast::<usize>() = len18;
                                            *ptr1.add(108).cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(104).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr1.add(48).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match shipping_address2 {
                                Some(e) => {
                                    *ptr1.add(116).cast::<u8>() = (1i32) as u8;
                                    let Address {
                                        street: street19,
                                        city: city19,
                                        state_or_region: state_or_region19,
                                        country: country19,
                                        postal_code: postal_code19,
                                        name: name19,
                                        phone_number: phone_number19,
                                    } = e;
                                    let vec20 = (street19.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr1.add(124).cast::<usize>() = len20;
                                    *ptr1.add(120).cast::<*mut u8>() = ptr20.cast_mut();
                                    let vec21 = (city19.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr1.add(132).cast::<usize>() = len21;
                                    *ptr1.add(128).cast::<*mut u8>() = ptr21.cast_mut();
                                    let vec22 = (state_or_region19.into_bytes())
                                        .into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr1.add(140).cast::<usize>() = len22;
                                    *ptr1.add(136).cast::<*mut u8>() = ptr22.cast_mut();
                                    let vec23 = (country19.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr1.add(148).cast::<usize>() = len23;
                                    *ptr1.add(144).cast::<*mut u8>() = ptr23.cast_mut();
                                    let vec24 = (postal_code19.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *ptr1.add(156).cast::<usize>() = len24;
                                    *ptr1.add(152).cast::<*mut u8>() = ptr24.cast_mut();
                                    match name19 {
                                        Some(e) => {
                                            *ptr1.add(160).cast::<u8>() = (1i32) as u8;
                                            let vec25 = (e.into_bytes()).into_boxed_slice();
                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                            let len25 = vec25.len();
                                            ::core::mem::forget(vec25);
                                            *ptr1.add(168).cast::<usize>() = len25;
                                            *ptr1.add(164).cast::<*mut u8>() = ptr25.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(160).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match phone_number19 {
                                        Some(e) => {
                                            *ptr1.add(172).cast::<u8>() = (1i32) as u8;
                                            let vec26 = (e.into_bytes()).into_boxed_slice();
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            ::core::mem::forget(vec26);
                                            *ptr1.add(180).cast::<usize>() = len26;
                                            *ptr1.add(176).cast::<*mut u8>() = ptr26.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(172).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr1.add(116).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr1.add(184).cast::<f32>() = _rt::as_f32(total2);
                            let vec27 = (currency2.into_bytes()).into_boxed_slice();
                            let ptr27 = vec27.as_ptr().cast::<u8>();
                            let len27 = vec27.len();
                            ::core::mem::forget(vec27);
                            *ptr1.add(192).cast::<usize>() = len27;
                            *ptr1.add(188).cast::<*mut u8>() = ptr27.cast_mut();
                            let super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                seconds: seconds28,
                                nanoseconds: nanoseconds28,
                            } = created_at2;
                            *ptr1.add(200).cast::<i64>() = _rt::as_i64(seconds28);
                            *ptr1.add(208).cast::<i32>() = _rt::as_i32(nanoseconds28);
                            let super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                seconds: seconds29,
                                nanoseconds: nanoseconds29,
                            } = updated_at2;
                            *ptr1.add(216).cast::<i64>() = _rt::as_i64(seconds29);
                            *ptr1.add(224).cast::<i32>() = _rt::as_i32(nanoseconds29);
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0.add(16).cast::<*mut u8>();
                            let l4 = *arg0.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = i32::from(*arg0.add(28).cast::<u8>());
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0.add(32).cast::<*mut u8>();
                                    let l7 = *arg0.add(36).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                            }
                            let l8 = *arg0.add(40).cast::<*mut u8>();
                            let l9 = *arg0.add(44).cast::<usize>();
                            let base16 = l8;
                            let len16 = l9;
                            for i in 0..len16 {
                                let base = base16.add(i * 32);
                                {
                                    let l10 = *base.add(0).cast::<*mut u8>();
                                    let l11 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                    let l12 = *base.add(8).cast::<*mut u8>();
                                    let l13 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                    let l14 = *base.add(16).cast::<*mut u8>();
                                    let l15 = *base.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                            }
                            _rt::cabi_dealloc(base16, len16 * 32, 4);
                            let l17 = i32::from(*arg0.add(48).cast::<u8>());
                            match l17 {
                                0 => {}
                                _ => {
                                    let l18 = *arg0.add(52).cast::<*mut u8>();
                                    let l19 = *arg0.add(56).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                    let l20 = *arg0.add(60).cast::<*mut u8>();
                                    let l21 = *arg0.add(64).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                    let l22 = *arg0.add(68).cast::<*mut u8>();
                                    let l23 = *arg0.add(72).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                    let l24 = *arg0.add(76).cast::<*mut u8>();
                                    let l25 = *arg0.add(80).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                    let l26 = *arg0.add(84).cast::<*mut u8>();
                                    let l27 = *arg0.add(88).cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                    let l28 = i32::from(*arg0.add(92).cast::<u8>());
                                    match l28 {
                                        0 => {}
                                        _ => {
                                            let l29 = *arg0.add(96).cast::<*mut u8>();
                                            let l30 = *arg0.add(100).cast::<usize>();
                                            _rt::cabi_dealloc(l29, l30, 1);
                                        }
                                    }
                                    let l31 = i32::from(*arg0.add(104).cast::<u8>());
                                    match l31 {
                                        0 => {}
                                        _ => {
                                            let l32 = *arg0.add(108).cast::<*mut u8>();
                                            let l33 = *arg0.add(112).cast::<usize>();
                                            _rt::cabi_dealloc(l32, l33, 1);
                                        }
                                    }
                                }
                            }
                            let l34 = i32::from(*arg0.add(116).cast::<u8>());
                            match l34 {
                                0 => {}
                                _ => {
                                    let l35 = *arg0.add(120).cast::<*mut u8>();
                                    let l36 = *arg0.add(124).cast::<usize>();
                                    _rt::cabi_dealloc(l35, l36, 1);
                                    let l37 = *arg0.add(128).cast::<*mut u8>();
                                    let l38 = *arg0.add(132).cast::<usize>();
                                    _rt::cabi_dealloc(l37, l38, 1);
                                    let l39 = *arg0.add(136).cast::<*mut u8>();
                                    let l40 = *arg0.add(140).cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                    let l41 = *arg0.add(144).cast::<*mut u8>();
                                    let l42 = *arg0.add(148).cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                    let l43 = *arg0.add(152).cast::<*mut u8>();
                                    let l44 = *arg0.add(156).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = i32::from(*arg0.add(160).cast::<u8>());
                                    match l45 {
                                        0 => {}
                                        _ => {
                                            let l46 = *arg0.add(164).cast::<*mut u8>();
                                            let l47 = *arg0.add(168).cast::<usize>();
                                            _rt::cabi_dealloc(l46, l47, 1);
                                        }
                                    }
                                    let l48 = i32::from(*arg0.add(172).cast::<u8>());
                                    match l48 {
                                        0 => {}
                                        _ => {
                                            let l49 = *arg0.add(176).cast::<*mut u8>();
                                            let l50 = *arg0.add(180).cast::<usize>();
                                            _rt::cabi_dealloc(l49, l50, 1);
                                        }
                                    }
                                }
                            }
                            let l51 = *arg0.add(188).cast::<*mut u8>();
                            let l52 = *arg0.add(192).cast::<usize>();
                            _rt::cabi_dealloc(l51, l52, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_order_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0.add(8).cast::<*mut u8>();
                    let l4 = *arg0.add(12).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *arg0.add(16).cast::<*mut u8>();
                    let l7 = *arg0.add(20).cast::<usize>();
                    let base19 = l6;
                    let len19 = l7;
                    let mut result19 = _rt::Vec::with_capacity(len19);
                    for i in 0..len19 {
                        let base = base19.add(i * 32);
                        let e19 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(
                                l8.cast(),
                                len10,
                                len10,
                            );
                            let l11 = *base.add(8).cast::<*mut u8>();
                            let l12 = *base.add(12).cast::<usize>();
                            let len13 = l12;
                            let bytes13 = _rt::Vec::from_raw_parts(
                                l11.cast(),
                                len13,
                                len13,
                            );
                            let l14 = *base.add(16).cast::<*mut u8>();
                            let l15 = *base.add(20).cast::<usize>();
                            let len16 = l15;
                            let bytes16 = _rt::Vec::from_raw_parts(
                                l14.cast(),
                                len16,
                                len16,
                            );
                            let l17 = *base.add(24).cast::<f32>();
                            let l18 = *base.add(28).cast::<i32>();
                            OrderItem {
                                product_id: _rt::string_lift(bytes10),
                                product_name: _rt::string_lift(bytes13),
                                product_brand: _rt::string_lift(bytes16),
                                price: l17,
                                quantity: l18 as u32,
                            }
                        };
                        result19.push(e19);
                    }
                    _rt::cabi_dealloc(base19, len19 * 32, 4);
                    let l20 = i32::from(*arg0.add(24).cast::<u8>());
                    let l44 = i32::from(*arg0.add(92).cast::<u8>());
                    let l68 = *arg0.add(160).cast::<f32>();
                    let l69 = *arg0.add(164).cast::<*mut u8>();
                    let l70 = *arg0.add(168).cast::<usize>();
                    let len71 = l70;
                    let bytes71 = _rt::Vec::from_raw_parts(l69.cast(), len71, len71);
                    let result72 = T::initialize_order(CreateOrder {
                        user_id: _rt::string_lift(bytes2),
                        email: _rt::string_lift(bytes5),
                        items: result19,
                        billing_address: match l20 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l21 = *arg0.add(28).cast::<*mut u8>();
                                    let l22 = *arg0.add(32).cast::<usize>();
                                    let len23 = l22;
                                    let bytes23 = _rt::Vec::from_raw_parts(
                                        l21.cast(),
                                        len23,
                                        len23,
                                    );
                                    let l24 = *arg0.add(36).cast::<*mut u8>();
                                    let l25 = *arg0.add(40).cast::<usize>();
                                    let len26 = l25;
                                    let bytes26 = _rt::Vec::from_raw_parts(
                                        l24.cast(),
                                        len26,
                                        len26,
                                    );
                                    let l27 = *arg0.add(44).cast::<*mut u8>();
                                    let l28 = *arg0.add(48).cast::<usize>();
                                    let len29 = l28;
                                    let bytes29 = _rt::Vec::from_raw_parts(
                                        l27.cast(),
                                        len29,
                                        len29,
                                    );
                                    let l30 = *arg0.add(52).cast::<*mut u8>();
                                    let l31 = *arg0.add(56).cast::<usize>();
                                    let len32 = l31;
                                    let bytes32 = _rt::Vec::from_raw_parts(
                                        l30.cast(),
                                        len32,
                                        len32,
                                    );
                                    let l33 = *arg0.add(60).cast::<*mut u8>();
                                    let l34 = *arg0.add(64).cast::<usize>();
                                    let len35 = l34;
                                    let bytes35 = _rt::Vec::from_raw_parts(
                                        l33.cast(),
                                        len35,
                                        len35,
                                    );
                                    let l36 = i32::from(*arg0.add(68).cast::<u8>());
                                    let l40 = i32::from(*arg0.add(80).cast::<u8>());
                                    Address {
                                        street: _rt::string_lift(bytes23),
                                        city: _rt::string_lift(bytes26),
                                        state_or_region: _rt::string_lift(bytes29),
                                        country: _rt::string_lift(bytes32),
                                        postal_code: _rt::string_lift(bytes35),
                                        name: match l36 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l37 = *arg0.add(72).cast::<*mut u8>();
                                                    let l38 = *arg0.add(76).cast::<usize>();
                                                    let len39 = l38;
                                                    let bytes39 = _rt::Vec::from_raw_parts(
                                                        l37.cast(),
                                                        len39,
                                                        len39,
                                                    );
                                                    _rt::string_lift(bytes39)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        phone_number: match l40 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l41 = *arg0.add(84).cast::<*mut u8>();
                                                    let l42 = *arg0.add(88).cast::<usize>();
                                                    let len43 = l42;
                                                    let bytes43 = _rt::Vec::from_raw_parts(
                                                        l41.cast(),
                                                        len43,
                                                        len43,
                                                    );
                                                    _rt::string_lift(bytes43)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        shipping_address: match l44 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l45 = *arg0.add(96).cast::<*mut u8>();
                                    let l46 = *arg0.add(100).cast::<usize>();
                                    let len47 = l46;
                                    let bytes47 = _rt::Vec::from_raw_parts(
                                        l45.cast(),
                                        len47,
                                        len47,
                                    );
                                    let l48 = *arg0.add(104).cast::<*mut u8>();
                                    let l49 = *arg0.add(108).cast::<usize>();
                                    let len50 = l49;
                                    let bytes50 = _rt::Vec::from_raw_parts(
                                        l48.cast(),
                                        len50,
                                        len50,
                                    );
                                    let l51 = *arg0.add(112).cast::<*mut u8>();
                                    let l52 = *arg0.add(116).cast::<usize>();
                                    let len53 = l52;
                                    let bytes53 = _rt::Vec::from_raw_parts(
                                        l51.cast(),
                                        len53,
                                        len53,
                                    );
                                    let l54 = *arg0.add(120).cast::<*mut u8>();
                                    let l55 = *arg0.add(124).cast::<usize>();
                                    let len56 = l55;
                                    let bytes56 = _rt::Vec::from_raw_parts(
                                        l54.cast(),
                                        len56,
                                        len56,
                                    );
                                    let l57 = *arg0.add(128).cast::<*mut u8>();
                                    let l58 = *arg0.add(132).cast::<usize>();
                                    let len59 = l58;
                                    let bytes59 = _rt::Vec::from_raw_parts(
                                        l57.cast(),
                                        len59,
                                        len59,
                                    );
                                    let l60 = i32::from(*arg0.add(136).cast::<u8>());
                                    let l64 = i32::from(*arg0.add(148).cast::<u8>());
                                    Address {
                                        street: _rt::string_lift(bytes47),
                                        city: _rt::string_lift(bytes50),
                                        state_or_region: _rt::string_lift(bytes53),
                                        country: _rt::string_lift(bytes56),
                                        postal_code: _rt::string_lift(bytes59),
                                        name: match l60 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l61 = *arg0.add(140).cast::<*mut u8>();
                                                    let l62 = *arg0.add(144).cast::<usize>();
                                                    let len63 = l62;
                                                    let bytes63 = _rt::Vec::from_raw_parts(
                                                        l61.cast(),
                                                        len63,
                                                        len63,
                                                    );
                                                    _rt::string_lift(bytes63)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        phone_number: match l64 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l65 = *arg0.add(152).cast::<*mut u8>();
                                                    let l66 = *arg0.add(156).cast::<usize>();
                                                    let len67 = l66;
                                                    let bytes67 = _rt::Vec::from_raw_parts(
                                                        l65.cast(),
                                                        len67,
                                                        len67,
                                                    );
                                                    _rt::string_lift(bytes67)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        total: l68,
                        currency: _rt::string_lift(bytes71),
                    });
                    _rt::cabi_dealloc(arg0, 172, 4);
                    let ptr73 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result72 {
                        Ok(_) => {
                            *ptr73.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr73.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                InitOrderError::ActionNotAllowed(e) => {
                                    *ptr73.add(4).cast::<u8>() = (0i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message74,
                                        status: status74,
                                    } = e;
                                    let vec75 = (message74.into_bytes()).into_boxed_slice();
                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                    let len75 = vec75.len();
                                    ::core::mem::forget(vec75);
                                    *ptr73.add(12).cast::<usize>() = len75;
                                    *ptr73.add(8).cast::<*mut u8>() = ptr75.cast_mut();
                                    *ptr73.add(16).cast::<u8>() = (status74.clone() as i32)
                                        as u8;
                                }
                            }
                        }
                    };
                    ptr73
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_order<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_remove_item_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::remove_item(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                RemoveItemError::ItemNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let ItemNotFoundError {
                                        message: message3,
                                        product_id: product_id3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(20).cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                RemoveItemError::ActionNotAllowed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message6,
                                        status: status6,
                                    } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    *ptr2.add(16).cast::<u8>() = (status6.clone() as i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_remove_item<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                _ => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_ship_order_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::ship_order();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                ShipOrderError::EmptyItems(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let EmptyItemsError { message: message2 } = e;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                ShipOrderError::EmptyEmail(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let EmptyEmailError { message: message4 } = e;
                                    let vec5 = (message4.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1.add(12).cast::<usize>() = len5;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                ShipOrderError::BillingAddressNotSet(e) => {
                                    *ptr1.add(4).cast::<u8>() = (2i32) as u8;
                                    let BillingAddressNotSetError { message: message6 } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1.add(12).cast::<usize>() = len7;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                ShipOrderError::ActionNotAllowed(e) => {
                                    *ptr1.add(4).cast::<u8>() = (3i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message8,
                                        status: status8,
                                    } = e;
                                    let vec9 = (message8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1.add(12).cast::<usize>() = len9;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    *ptr1.add(16).cast::<u8>() = (status8.clone() as i32) as u8;
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_ship_order<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                _ => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_billing_address_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                    arg13: i32,
                    arg14: *mut u8,
                    arg15: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let len3 = arg7;
                    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
                    let len4 = arg9;
                    let bytes4 = _rt::Vec::from_raw_parts(arg8.cast(), len4, len4);
                    let result7 = T::update_billing_address(Address {
                        street: _rt::string_lift(bytes0),
                        city: _rt::string_lift(bytes1),
                        state_or_region: _rt::string_lift(bytes2),
                        country: _rt::string_lift(bytes3),
                        postal_code: _rt::string_lift(bytes4),
                        name: match arg10 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len5 = arg12;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        arg11.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        phone_number: match arg13 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len6 = arg15;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        arg14.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr8 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                UpdateAddressError::AddressNotValid(e) => {
                                    *ptr8.add(4).cast::<u8>() = (0i32) as u8;
                                    let AddressNotValidError { message: message9 } = e;
                                    let vec10 = (message9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr8.add(12).cast::<usize>() = len10;
                                    *ptr8.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                UpdateAddressError::ActionNotAllowed(e) => {
                                    *ptr8.add(4).cast::<u8>() = (1i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message11,
                                        status: status11,
                                    } = e;
                                    let vec12 = (message11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr8.add(12).cast::<usize>() = len12;
                                    *ptr8.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    *ptr8.add(16).cast::<u8>() = (status11.clone() as i32)
                                        as u8;
                                }
                            }
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_billing_address<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_email_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::update_email(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                UpdateEmailError::EmailNotValid(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let EmailNotValidError { message: message3 } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                UpdateEmailError::ActionNotAllowed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message5,
                                        status: status5,
                                    } = e;
                                    let vec6 = (message5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2.add(12).cast::<usize>() = len6;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    *ptr2.add(16).cast::<u8>() = (status5.clone() as i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_email<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_item_quantity_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::update_item_quantity(
                        _rt::string_lift(bytes0),
                        arg2 as u32,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                UpdateItemQuantityError::ItemNotFound(e) => {
                                    *ptr2.add(4).cast::<u8>() = (0i32) as u8;
                                    let ItemNotFoundError {
                                        message: message3,
                                        product_id: product_id3,
                                    } = e;
                                    let vec4 = (message3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2.add(12).cast::<usize>() = len4;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (product_id3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2.add(20).cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                UpdateItemQuantityError::ActionNotAllowed(e) => {
                                    *ptr2.add(4).cast::<u8>() = (1i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message6,
                                        status: status6,
                                    } = e;
                                    let vec7 = (message6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2.add(12).cast::<usize>() = len7;
                                    *ptr2.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    *ptr2.add(16).cast::<u8>() = (status6.clone() as i32) as u8;
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_item_quantity<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                _ => {
                                    let l6 = *arg0.add(8).cast::<*mut u8>();
                                    let l7 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_shipping_address_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                    arg13: i32,
                    arg14: *mut u8,
                    arg15: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let len3 = arg7;
                    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
                    let len4 = arg9;
                    let bytes4 = _rt::Vec::from_raw_parts(arg8.cast(), len4, len4);
                    let result7 = T::update_shipping_address(Address {
                        street: _rt::string_lift(bytes0),
                        city: _rt::string_lift(bytes1),
                        state_or_region: _rt::string_lift(bytes2),
                        country: _rt::string_lift(bytes3),
                        postal_code: _rt::string_lift(bytes4),
                        name: match arg10 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len5 = arg12;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        arg11.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        phone_number: match arg13 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len6 = arg15;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        arg14.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr8 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                UpdateAddressError::AddressNotValid(e) => {
                                    *ptr8.add(4).cast::<u8>() = (0i32) as u8;
                                    let AddressNotValidError { message: message9 } = e;
                                    let vec10 = (message9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr8.add(12).cast::<usize>() = len10;
                                    *ptr8.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                UpdateAddressError::ActionNotAllowed(e) => {
                                    *ptr8.add(4).cast::<u8>() = (1i32) as u8;
                                    let ActionNotAllowedError {
                                        message: message11,
                                        status: status11,
                                    } = e;
                                    let vec12 = (message11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr8.add(12).cast::<usize>() = len12;
                                    *ptr8.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    *ptr8.add(16).cast::<u8>() = (status11.clone() as i32)
                                        as u8;
                                }
                            }
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_shipping_address<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn add_item(
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> Result<(), AddItemError>;
                    fn cancel_order() -> Result<(), CancelOrderError>;
                    fn get() -> Option<Order>;
                    fn initialize_order(data: CreateOrder) -> Result<(), InitOrderError>;
                    fn remove_item(
                        product_id: _rt::String,
                    ) -> Result<(), RemoveItemError>;
                    fn ship_order() -> Result<(), ShipOrderError>;
                    fn update_billing_address(
                        address: Address,
                    ) -> Result<(), UpdateAddressError>;
                    fn update_email(email: _rt::String) -> Result<(), UpdateEmailError>;
                    fn update_item_quantity(
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> Result<(), UpdateItemQuantityError>;
                    fn update_shipping_address(
                        address: Address,
                    ) -> Result<(), UpdateAddressError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_order_exports_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:order-exports/api#add-item"] unsafe extern "C" fn
                        export_add_item(arg0 : * mut u8, arg1 : usize, arg2 : i32,) -> *
                        mut u8 { $($path_to_types)*:: _export_add_item_cabi::<$ty >
                        (arg0, arg1, arg2) } #[export_name =
                        "cabi_post_golem:order-exports/api#add-item"] unsafe extern "C"
                        fn _post_return_add_item(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_add_item::<$ty > (arg0) } #[export_name =
                        "golem:order-exports/api#cancel-order"] unsafe extern "C" fn
                        export_cancel_order() -> * mut u8 { $($path_to_types)*::
                        _export_cancel_order_cabi::<$ty > () } #[export_name =
                        "cabi_post_golem:order-exports/api#cancel-order"] unsafe extern
                        "C" fn _post_return_cancel_order(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_cancel_order::<$ty > (arg0) }
                        #[export_name = "golem:order-exports/api#get"] unsafe extern "C"
                        fn export_get() -> * mut u8 { $($path_to_types)*::
                        _export_get_cabi::<$ty > () } #[export_name =
                        "cabi_post_golem:order-exports/api#get"] unsafe extern "C" fn
                        _post_return_get(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_get::<$ty > (arg0) } #[export_name =
                        "golem:order-exports/api#initialize-order"] unsafe extern "C" fn
                        export_initialize_order(arg0 : * mut u8,) -> * mut u8 {
                        $($path_to_types)*:: _export_initialize_order_cabi::<$ty > (arg0)
                        } #[export_name =
                        "cabi_post_golem:order-exports/api#initialize-order"] unsafe
                        extern "C" fn _post_return_initialize_order(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_initialize_order::<$ty >
                        (arg0) } #[export_name = "golem:order-exports/api#remove-item"]
                        unsafe extern "C" fn export_remove_item(arg0 : * mut u8, arg1 :
                        usize,) -> * mut u8 { $($path_to_types)*::
                        _export_remove_item_cabi::<$ty > (arg0, arg1) } #[export_name =
                        "cabi_post_golem:order-exports/api#remove-item"] unsafe extern
                        "C" fn _post_return_remove_item(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_remove_item::<$ty > (arg0) }
                        #[export_name = "golem:order-exports/api#ship-order"] unsafe
                        extern "C" fn export_ship_order() -> * mut u8 {
                        $($path_to_types)*:: _export_ship_order_cabi::<$ty > () }
                        #[export_name = "cabi_post_golem:order-exports/api#ship-order"]
                        unsafe extern "C" fn _post_return_ship_order(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_ship_order::<$ty > (arg0) }
                        #[export_name = "golem:order-exports/api#update-billing-address"]
                        unsafe extern "C" fn export_update_billing_address(arg0 : * mut
                        u8, arg1 : usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8,
                        arg5 : usize, arg6 : * mut u8, arg7 : usize, arg8 : * mut u8,
                        arg9 : usize, arg10 : i32, arg11 : * mut u8, arg12 : usize, arg13
                        : i32, arg14 : * mut u8, arg15 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_update_billing_address_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                        arg10, arg11, arg12, arg13, arg14, arg15) } #[export_name =
                        "cabi_post_golem:order-exports/api#update-billing-address"]
                        unsafe extern "C" fn _post_return_update_billing_address(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_update_billing_address::<$ty > (arg0) }
                        #[export_name = "golem:order-exports/api#update-email"] unsafe
                        extern "C" fn export_update_email(arg0 : * mut u8, arg1 : usize,)
                        -> * mut u8 { $($path_to_types)*::
                        _export_update_email_cabi::<$ty > (arg0, arg1) } #[export_name =
                        "cabi_post_golem:order-exports/api#update-email"] unsafe extern
                        "C" fn _post_return_update_email(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_update_email::<$ty > (arg0) }
                        #[export_name = "golem:order-exports/api#update-item-quantity"]
                        unsafe extern "C" fn export_update_item_quantity(arg0 : * mut u8,
                        arg1 : usize, arg2 : i32,) -> * mut u8 { $($path_to_types)*::
                        _export_update_item_quantity_cabi::<$ty > (arg0, arg1, arg2) }
                        #[export_name =
                        "cabi_post_golem:order-exports/api#update-item-quantity"] unsafe
                        extern "C" fn _post_return_update_item_quantity(arg0 : * mut u8,)
                        { $($path_to_types)*:: __post_return_update_item_quantity::<$ty >
                        (arg0) } #[export_name =
                        "golem:order-exports/api#update-shipping-address"] unsafe extern
                        "C" fn export_update_shipping_address(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 :
                        usize, arg6 : * mut u8, arg7 : usize, arg8 : * mut u8, arg9 :
                        usize, arg10 : i32, arg11 : * mut u8, arg12 : usize, arg13 : i32,
                        arg14 : * mut u8, arg15 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_update_shipping_address_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                        arg10, arg11, arg12, arg13, arg14, arg15) } #[export_name =
                        "cabi_post_golem:order-exports/api#update-shipping-address"]
                        unsafe extern "C" fn _post_return_update_shipping_address(arg0 :
                        * mut u8,) { $($path_to_types)*::
                        __post_return_update_shipping_address::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_order_exports_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 232]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 232],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_order_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::api::load_snapshot::__export_golem_api_load_snapshot_1_1_6_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::load_snapshot);
        $($path_to_types_root)*::
        exports::golem::api::save_snapshot::__export_golem_api_save_snapshot_1_1_6_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::save_snapshot);
        $($path_to_types_root)*::
        exports::golem::order_exports::api::__export_golem_order_exports_api_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::order_exports::api);
    };
}
#[doc(inline)]
pub(crate) use __export_order_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:order:order:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 9083] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xffE\x01A\x02\x01A\x1f\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\0\x12wasi:io/poll@0.2.0\x05\0\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\
\0\x08datetime\x03\0\0\x01@\0\0\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\
\x02\x03\0\x1cwasi:clocks/wall-clock@0.2.0\x05\x01\x02\x03\0\x01\x08datetime\x02\
\x03\0\0\x08pollable\x01BX\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\
\x02\x01\x03\x04\0\x08pollable\x03\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\
\0\x04uuid\x03\0\x04\x01r\x01\x04uuid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\
\x0ccomponent-id\x07\x0bworker-names\x04\0\x09worker-id\x03\0\x08\x01z\x04\0\x0a\
node-index\x03\0\x0a\x01w\x04\0\x0bresource-id\x03\0\x0c\x01m\x02\x05owned\x08bo\
rrowed\x04\0\x0dresource-mode\x03\0\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02\
s\x12\x01p\x13\x01ps\x01p\x0b\x01o\x02\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0breco\
rd-type\x01\x11\0\x0cvariant-type\x01\x14\0\x09enum-type\x01\x15\0\x0aflags-type\
\x01\x15\0\x0atuple-type\x01\x16\0\x09list-type\x01\x0b\0\x0boption-type\x01\x0b\
\0\x0bresult-type\x01\x17\0\x0cprim-u8-type\0\0\x0dprim-u16-type\0\0\x0dprim-u32\
-type\0\0\x0dprim-u64-type\0\0\x0cprim-s8-type\0\0\x0dprim-s16-type\0\0\x0dprim-\
s32-type\0\0\x0dprim-s64-type\0\0\x0dprim-f32-type\0\0\x0dprim-f64-type\0\0\x0ep\
rim-char-type\0\0\x0eprim-bool-type\0\0\x10prim-string-type\0\0\x0bhandle-type\x01\
\x18\0\x04\0\x0dwit-type-node\x03\0\x19\x01p\x1a\x01r\x01\x05nodes\x1b\x04\0\x08\
wit-type\x03\0\x1c\x01r\x01\x05values\x04\0\x03uri\x03\0\x1e\x01o\x02y\x12\x01p\x7f\
\x01j\x01\x12\x01\x12\x01o\x02\x1fw\x01q\x16\x0crecord-value\x01\x16\0\x0dvarian\
t-value\x01\x20\0\x0aenum-value\x01y\0\x0bflags-value\x01!\0\x0btuple-value\x01\x16\
\0\x0alist-value\x01\x16\0\x0coption-value\x01\x12\0\x0cresult-value\x01\"\0\x07\
prim-u8\x01}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-\
s8\x01~\0\x08prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float\
32\x01v\0\x0cprim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bp\
rim-string\x01s\0\x06handle\x01#\0\x04\0\x08wit-node\x03\0$\x01p%\x01r\x01\x05no\
des&\x04\0\x09wit-value\x03\0'\x01r\x02\x05value(\x03typ\x1d\x04\0\x0evalue-and-\
type\x03\0)\x01q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\x09not-found\x01s\
\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\x03\0+\x04\0\x08wasm-rpc\x03\
\x01\x04\0\x14future-invoke-result\x03\x01\x04\0\x12cancellation-token\x03\x01\x01\
i-\x01@\x01\x09worker-id\x09\00\x04\0\x15[constructor]wasm-rpc\x011\x01@\x01\x0c\
component-id\x07\00\x04\0\x1a[static]wasm-rpc.ephemeral\x012\x01h-\x01p(\x01j\x01\
(\x01,\x01@\x03\x04self3\x0dfunction-names\x0ffunction-params4\05\x04\0![method]\
wasm-rpc.invoke-and-await\x016\x01j\0\x01,\x01@\x03\x04self3\x0dfunction-names\x0f\
function-params4\07\x04\0\x17[method]wasm-rpc.invoke\x018\x01i.\x01@\x03\x04self\
3\x0dfunction-names\x0ffunction-params4\09\x04\0'[method]wasm-rpc.async-invoke-a\
nd-await\x01:\x01@\x04\x04self3\x0escheduled-time\x01\x0dfunction-names\x0ffunct\
ion-params4\x01\0\x04\0$[method]wasm-rpc.schedule-invocation\x01;\x01i/\x01@\x04\
\x04self3\x0escheduled-time\x01\x0dfunction-names\x0ffunction-params4\0<\x04\0/[\
method]wasm-rpc.schedule-cancelable-invocation\x01=\x01h.\x01i\x03\x01@\x01\x04s\
elf>\0?\x04\0&[method]future-invoke-result.subscribe\x01@\x01k5\x01@\x01\x04self\
>\0\xc1\0\x04\0\x20[method]future-invoke-result.get\x01B\x01h/\x01@\x01\x04self\xc3\
\0\x01\0\x04\0![method]cancellation-token.cancel\x01D\x01j\x01\x05\x01s\x01@\x01\
\x04uuids\0\xc5\0\x04\0\x0aparse-uuid\x01F\x01@\x01\x04uuid\x05\0s\x04\0\x0euuid\
-to-string\x01G\x01@\x01\x03vnt*\0(\x04\0\x0dextract-value\x01H\x01@\x01\x03vnt*\
\0\x1d\x04\0\x0cextract-type\x01I\x03\0\x15golem:rpc/types@0.2.0\x05\x04\x01B\x14\
\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x01r\x03\x05pricev\x08currencys\x04\
zones\x04\0\x0cpricing-item\x03\0\x02\x01k\x01\x01r\x05\x05pricev\x08currencys\x04\
zones\x05start\x04\x03end\x04\x04\0\x11sale-pricing-item\x03\0\x05\x01p\x03\x01p\
\x06\x01r\x06\x0aproduct-ids\x0bmsrp-prices\x07\x0blist-prices\x07\x0bsale-price\
s\x08\x0acreated-at\x01\x0aupdated-at\x01\x04\0\x07pricing\x03\0\x09\x01k\x0a\x01\
@\0\0\x0b\x04\0\x03get\x01\x0c\x01k\x03\x01@\x02\x08currencys\x04zones\0\x0d\x04\
\0\x09get-price\x01\x0e\x01@\x03\x0bmsrp-prices\x07\x0blist-prices\x07\x0bsale-p\
rices\x08\x01\0\x04\0\x12initialize-pricing\x01\x0f\x04\0\x0eupdate-pricing\x01\x0f\
\x03\0\x19golem:pricing-exports/api\x05\x05\x02\x03\0\x02\x0ccomponent-id\x02\x03\
\0\x02\x09worker-id\x02\x03\0\x02\x12cancellation-token\x02\x03\0\x03\x08datetim\
e\x02\x03\0\x03\x07pricing\x02\x03\0\x03\x0cpricing-item\x02\x03\0\x03\x11sale-p\
ricing-item\x01Bo\x02\x03\x02\x01\x03\x04\0\x10wasi-io-pollable\x03\0\0\x02\x03\x02\
\x01\x02\x04\0\x14wasi-clocks-datetime\x03\0\x02\x02\x03\x02\x01\x06\x04\0\x16go\
lem-rpc-component-id\x03\0\x04\x02\x03\x02\x01\x07\x04\0\x13golem-rpc-worker-id\x03\
\0\x06\x02\x03\x02\x01\x08\x04\0\x1cgolem-rpc-cancellation-token\x03\0\x08\x02\x03\
\x02\x01\x09\x04\0\x08datetime\x03\0\x0a\x02\x03\x02\x01\x0a\x04\0\x07pricing\x03\
\0\x0c\x02\x03\x02\x01\x0b\x04\0\x0cpricing-item\x03\0\x0e\x02\x03\x02\x01\x0c\x04\
\0\x11sale-pricing-item\x03\0\x10\x04\0\x11future-get-result\x03\x01\x04\0\x17fu\
ture-get-price-result\x03\x01\x04\0\x12future-load-result\x03\x01\x04\0\x12futur\
e-save-result\x03\x01\x04\0\x03api\x03\x01\x04\0\x0dload-snapshot\x03\x01\x04\0\x0d\
save-snapshot\x03\x01\x01h\x12\x01i\x01\x01@\x01\x04self\x19\0\x1a\x04\0#[method\
]future-get-result.subscribe\x01\x1b\x01k\x0d\x01k\x1c\x01@\x01\x04self\x19\0\x1d\
\x04\0\x1d[method]future-get-result.get\x01\x1e\x01h\x13\x01@\x01\x04self\x1f\0\x1a\
\x04\0)[method]future-get-price-result.subscribe\x01\x20\x01k\x0f\x01k!\x01@\x01\
\x04self\x1f\0\"\x04\0#[method]future-get-price-result.get\x01#\x01h\x14\x01@\x01\
\x04self$\0\x1a\x04\0$[method]future-load-result.subscribe\x01%\x01j\0\x01s\x01k\
&\x01@\x01\x04self$\0'\x04\0\x1e[method]future-load-result.get\x01(\x01h\x15\x01\
@\x01\x04self)\0\x1a\x04\0$[method]future-save-result.subscribe\x01*\x01p}\x01k+\
\x01@\x01\x04self)\0,\x04\0\x1e[method]future-save-result.get\x01-\x01i\x16\x01@\
\x01\x0bworker-names\0.\x04\0\x10[constructor]api\x01/\x01@\x01\x09worker-id\x07\
\0.\x04\0\x12[static]api.custom\x010\x01h\x16\x01@\x01\x04self1\0\x1c\x04\0\x18[\
method]api.blocking-get\x012\x01i\x12\x01@\x01\x04self1\03\x04\0\x0f[method]api.\
get\x014\x01i\x09\x01@\x02\x04self1\x0dscheduled-for\x03\05\x04\0\x18[method]api\
.schedule-get\x016\x01@\x03\x04self1\x08currencys\x04zones\0!\x04\0\x1e[method]a\
pi.blocking-get-price\x017\x01i\x13\x01@\x03\x04self1\x08currencys\x04zones\08\x04\
\0\x15[method]api.get-price\x019\x01@\x04\x04self1\x08currencys\x04zones\x0dsche\
duled-for\x03\05\x04\0\x1e[method]api.schedule-get-price\x01:\x01p\x0f\x01p\x11\x01\
@\x04\x04self1\x0bmsrp-prices;\x0blist-prices;\x0bsale-prices<\x01\0\x04\0'[meth\
od]api.blocking-initialize-pricing\x01=\x04\0\x1e[method]api.initialize-pricing\x01\
=\x01@\x05\x04self1\x0bmsrp-prices;\x0blist-prices;\x0bsale-prices<\x0dscheduled\
-for\x03\05\x04\0'[method]api.schedule-initialize-pricing\x01>\x04\0#[method]api\
.blocking-update-pricing\x01=\x04\0\x1a[method]api.update-pricing\x01=\x04\0#[me\
thod]api.schedule-update-pricing\x01>\x01i\x17\x01@\x01\x0bworker-names\0?\x04\0\
\x1a[constructor]load-snapshot\x01@\x01@\x01\x09worker-id\x07\0?\x04\0\x1c[stati\
c]load-snapshot.custom\x01A\x01h\x17\x01@\x02\x04self\xc2\0\x05bytes+\0&\x04\0#[\
method]load-snapshot.blocking-load\x01C\x01i\x14\x01@\x02\x04self\xc2\0\x05bytes\
+\0\xc4\0\x04\0\x1a[method]load-snapshot.load\x01E\x01@\x03\x04self\xc2\0\x05byt\
es+\x0dscheduled-for\x03\05\x04\0#[method]load-snapshot.schedule-load\x01F\x01i\x18\
\x01@\x01\x0bworker-names\0\xc7\0\x04\0\x1a[constructor]save-snapshot\x01H\x01@\x01\
\x09worker-id\x07\0\xc7\0\x04\0\x1c[static]save-snapshot.custom\x01I\x01h\x18\x01\
@\x01\x04self\xca\0\0+\x04\0#[method]save-snapshot.blocking-save\x01K\x01i\x15\x01\
@\x01\x04self\xca\0\0\xcc\0\x04\0\x1a[method]save-snapshot.save\x01M\x01@\x02\x04\
self\xca\0\x0dscheduled-for\x03\05\x04\0#[method]save-snapshot.schedule-save\x01\
N\x03\0#golem:pricing-client/pricing-client\x05\x0d\x01B\x0a\x02\x03\x02\x01\x02\
\x04\0\x08datetime\x03\0\0\x01ps\x01r\x07\x0aproduct-ids\x04names\x05brands\x0bd\
escriptions\x04tags\x02\x0acreated-at\x01\x0aupdated-at\x01\x04\0\x07product\x03\
\0\x03\x01k\x04\x01@\0\0\x05\x04\0\x03get\x01\x06\x01@\x04\x04names\x05brands\x0b\
descriptions\x04tags\x02\x01\0\x04\0\x12initialize-product\x01\x07\x03\0\x19gole\
m:product-exports/api\x05\x0e\x02\x03\0\x05\x08datetime\x02\x03\0\x05\x07product\
\x01BX\x02\x03\x02\x01\x03\x04\0\x10wasi-io-pollable\x03\0\0\x02\x03\x02\x01\x02\
\x04\0\x14wasi-clocks-datetime\x03\0\x02\x02\x03\x02\x01\x06\x04\0\x16golem-rpc-\
component-id\x03\0\x04\x02\x03\x02\x01\x07\x04\0\x13golem-rpc-worker-id\x03\0\x06\
\x02\x03\x02\x01\x08\x04\0\x1cgolem-rpc-cancellation-token\x03\0\x08\x02\x03\x02\
\x01\x0f\x04\0\x08datetime\x03\0\x0a\x02\x03\x02\x01\x10\x04\0\x07product\x03\0\x0c\
\x04\0\x11future-get-result\x03\x01\x04\0\x12future-load-result\x03\x01\x04\0\x12\
future-save-result\x03\x01\x04\0\x03api\x03\x01\x04\0\x0dload-snapshot\x03\x01\x04\
\0\x0dsave-snapshot\x03\x01\x01h\x0e\x01i\x01\x01@\x01\x04self\x14\0\x15\x04\0#[\
method]future-get-result.subscribe\x01\x16\x01k\x0d\x01k\x17\x01@\x01\x04self\x14\
\0\x18\x04\0\x1d[method]future-get-result.get\x01\x19\x01h\x0f\x01@\x01\x04self\x1a\
\0\x15\x04\0$[method]future-load-result.subscribe\x01\x1b\x01j\0\x01s\x01k\x1c\x01\
@\x01\x04self\x1a\0\x1d\x04\0\x1e[method]future-load-result.get\x01\x1e\x01h\x10\
\x01@\x01\x04self\x1f\0\x15\x04\0$[method]future-save-result.subscribe\x01\x20\x01\
p}\x01k!\x01@\x01\x04self\x1f\0\"\x04\0\x1e[method]future-save-result.get\x01#\x01\
i\x11\x01@\x01\x0bworker-names\0$\x04\0\x10[constructor]api\x01%\x01@\x01\x09wor\
ker-id\x07\0$\x04\0\x12[static]api.custom\x01&\x01h\x11\x01@\x01\x04self'\0\x17\x04\
\0\x18[method]api.blocking-get\x01(\x01i\x0e\x01@\x01\x04self'\0)\x04\0\x0f[meth\
od]api.get\x01*\x01i\x09\x01@\x02\x04self'\x0dscheduled-for\x03\0+\x04\0\x18[met\
hod]api.schedule-get\x01,\x01ps\x01@\x05\x04self'\x04names\x05brands\x0bdescript\
ions\x04tags-\x01\0\x04\0'[method]api.blocking-initialize-product\x01.\x04\0\x1e\
[method]api.initialize-product\x01.\x01@\x06\x04self'\x04names\x05brands\x0bdesc\
riptions\x04tags-\x0dscheduled-for\x03\0+\x04\0'[method]api.schedule-initialize-\
product\x01/\x01i\x12\x01@\x01\x0bworker-names\00\x04\0\x1a[constructor]load-sna\
pshot\x011\x01@\x01\x09worker-id\x07\00\x04\0\x1c[static]load-snapshot.custom\x01\
2\x01h\x12\x01@\x02\x04self3\x05bytes!\0\x1c\x04\0#[method]load-snapshot.blockin\
g-load\x014\x01i\x0f\x01@\x02\x04self3\x05bytes!\05\x04\0\x1a[method]load-snapsh\
ot.load\x016\x01@\x03\x04self3\x05bytes!\x0dscheduled-for\x03\0+\x04\0#[method]l\
oad-snapshot.schedule-load\x017\x01i\x13\x01@\x01\x0bworker-names\08\x04\0\x1a[c\
onstructor]save-snapshot\x019\x01@\x01\x09worker-id\x07\08\x04\0\x1c[static]save\
-snapshot.custom\x01:\x01h\x13\x01@\x01\x04self;\0!\x04\0#[method]save-snapshot.\
blocking-save\x01<\x01i\x10\x01@\x01\x04self;\0=\x04\0\x1a[method]save-snapshot.\
save\x01>\x01@\x02\x04self;\x0dscheduled-for\x03\0+\x04\0#[method]save-snapshot.\
schedule-save\x01?\x03\0#golem:product-client/product-client\x05\x11\x01B\x04\x01\
p}\x01j\0\x01s\x01@\x01\x05bytes\0\0\x01\x04\0\x04load\x01\x02\x04\0\x1dgolem:ap\
i/load-snapshot@1.1.6\x05\x12\x01B\x03\x01p}\x01@\0\0\0\x04\0\x04save\x01\x01\x04\
\0\x1dgolem:api/save-snapshot@1.1.6\x05\x13\x01BM\x02\x03\x02\x01\x02\x04\0\x08d\
atetime\x03\0\0\x01ks\x01r\x07\x06streets\x04citys\x0fstate-or-regions\x07countr\
ys\x0bpostal-codes\x04name\x02\x0cphone-number\x02\x04\0\x07address\x03\0\x03\x01\
r\x01\x07messages\x04\0\x17address-not-valid-error\x03\0\x05\x01r\x01\x07message\
s\x04\0\x1dbilling-address-not-set-error\x03\0\x07\x01r\x01\x07messages\x04\0\x15\
email-not-valid-error\x03\0\x09\x01r\x01\x07messages\x04\0\x11empty-email-error\x03\
\0\x0b\x01r\x01\x07messages\x04\0\x11empty-items-error\x03\0\x0d\x01r\x02\x07mes\
sages\x0aproduct-ids\x04\0\x14item-not-found-error\x03\0\x0f\x01r\x05\x0aproduct\
-ids\x0cproduct-names\x0dproduct-brands\x05pricev\x08quantityy\x04\0\x0aorder-it\
em\x03\0\x11\x01p\x12\x01k\x04\x01r\x07\x07user-ids\x05emails\x05items\x13\x0fbi\
lling-address\x14\x10shipping-address\x14\x05totalv\x08currencys\x04\0\x0ccreate\
-order\x03\0\x15\x01m\x03\x03new\x07shipped\x09cancelled\x04\0\x0corder-status\x03\
\0\x17\x01r\x02\x07messages\x06status\x18\x04\0\x18action-not-allowed-error\x03\0\
\x19\x01q\x01\x12action-not-allowed\x01\x1a\0\x04\0\x12cancel-order-error\x03\0\x1b\
\x01q\x01\x12action-not-allowed\x01\x1a\0\x04\0\x10init-order-error\x03\0\x1d\x01\
r\x0b\x08order-ids\x07user-ids\x0corder-status\x18\x05email\x02\x05items\x13\x0f\
billing-address\x14\x10shipping-address\x14\x05totalv\x08currencys\x0acreated-at\
\x01\x0aupdated-at\x01\x04\0\x05order\x03\0\x1f\x01r\x02\x07messages\x0aproduct-\
ids\x04\0\x17pricing-not-found-error\x03\0!\x01r\x02\x07messages\x0aproduct-ids\x04\
\0\x17product-not-found-error\x03\0#\x01q\x03\x11product-not-found\x01$\0\x11pri\
cing-not-found\x01\"\0\x12action-not-allowed\x01\x1a\0\x04\0\x0eadd-item-error\x03\
\0%\x01q\x02\x0eitem-not-found\x01\x10\0\x12action-not-allowed\x01\x1a\0\x04\0\x11\
remove-item-error\x03\0'\x01q\x04\x0bempty-items\x01\x0e\0\x0bempty-email\x01\x0c\
\0\x17billing-address-not-set\x01\x08\0\x12action-not-allowed\x01\x1a\0\x04\0\x10\
ship-order-error\x03\0)\x01q\x02\x11address-not-valid\x01\x06\0\x12action-not-al\
lowed\x01\x1a\0\x04\0\x14update-address-error\x03\0+\x01q\x02\x0femail-not-valid\
\x01\x0a\0\x12action-not-allowed\x01\x1a\0\x04\0\x12update-email-error\x03\0-\x01\
q\x02\x0eitem-not-found\x01\x10\0\x12action-not-allowed\x01\x1a\0\x04\0\x1aupdat\
e-item-quantity-error\x03\0/\x01j\0\x01&\x01@\x02\x0aproduct-ids\x08quantityy\01\
\x04\0\x08add-item\x012\x01j\0\x01\x1c\x01@\0\03\x04\0\x0ccancel-order\x014\x01k\
\x20\x01@\0\05\x04\0\x03get\x016\x01j\0\x01\x1e\x01@\x01\x04data\x16\07\x04\0\x10\
initialize-order\x018\x01j\0\x01(\x01@\x01\x0aproduct-ids\09\x04\0\x0bremove-ite\
m\x01:\x01j\0\x01*\x01@\0\0;\x04\0\x0aship-order\x01<\x01j\0\x01,\x01@\x01\x07ad\
dress\x04\0=\x04\0\x16update-billing-address\x01>\x01j\0\x01.\x01@\x01\x05emails\
\0?\x04\0\x0cupdate-email\x01@\x01j\0\x010\x01@\x02\x0aproduct-ids\x08quantityy\0\
\xc1\0\x04\0\x14update-item-quantity\x01B\x04\0\x17update-shipping-address\x01>\x04\
\0\x17golem:order-exports/api\x05\x14\x04\0\x11golem:order/order\x04\0\x0b\x0b\x01\
\0\x05order\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
