package golem: order;

interface api {

  enum order-status {
    new,
    shipped,
    cancelled,
  }

  record address {
    street1: string,
    street2: option<string>,
    city: string,
    state-or-region: string,
    country: string,
    postal-code: string,
    name: option<string>,
    business-name: option<string>,
    phone-number: option<string>
  }

  record order-item {
    product-id: string,
    name: string,
    price: float32,
    quantity: u32,
  }

  record order {
    order-id: string,
    user-id: string,
    order-status: order-status,
    items: list<order-item>,
    billing-address: option<address>,
    shipping-address: option<address>,
    total: float32,
    currency: string,
    timestamp: u64,
  }

  record create-order {
    user-id: string,
    items: list<order-item>,
    billing-address: option<address>,
    shipping-address: option<address>,
    total: float32,
    currency: string,
    timestamp: u64,
  }

  initialize-order: func(data: create-order) -> ();

  add-item: func(product-id: string, quantity: u32) -> result<_, string>;

  remove-item: func(product-id: string) -> result<_, string>;

  update-item-quantity: func(product-id: string, quantity: u32) -> result<_, string>;

  update-shipping-address: func(address: address) -> result<_, string>;

  update-billing-address: func(address: address) -> result<_, string>;

  ship-order: func() -> result<_, string>;

  cancel-order: func() -> result<_, string>;

  get: func() -> option<order>;
}

world order {
  import golem: pricing-stub/stub-pricing;
  import golem: product-stub/stub-product;

  import golem: api/host@0.2.0;

  export api;
}