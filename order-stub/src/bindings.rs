// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod golem {
    #[allow(dead_code)]
    pub mod order {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum OrderStatus {
                New,
                Shipped,
                Cancelled,
            }
            impl ::core::fmt::Debug for OrderStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        OrderStatus::New => f.debug_tuple("OrderStatus::New").finish(),
                        OrderStatus::Shipped => f.debug_tuple("OrderStatus::Shipped").finish(),
                        OrderStatus::Cancelled => f.debug_tuple("OrderStatus::Cancelled").finish(),
                    }
                }
            }

            impl OrderStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> OrderStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => OrderStatus::New,
                        1 => OrderStatus::Shipped,
                        2 => OrderStatus::Cancelled,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Address {
                pub street1: _rt::String,
                pub street2: Option<_rt::String>,
                pub city: _rt::String,
                pub state_or_region: _rt::String,
                pub country: _rt::String,
                pub postal_code: _rt::String,
                pub name: Option<_rt::String>,
                pub business_name: Option<_rt::String>,
                pub phone_number: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Address {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Address")
                        .field("street1", &self.street1)
                        .field("street2", &self.street2)
                        .field("city", &self.city)
                        .field("state-or-region", &self.state_or_region)
                        .field("country", &self.country)
                        .field("postal-code", &self.postal_code)
                        .field("name", &self.name)
                        .field("business-name", &self.business_name)
                        .field("phone-number", &self.phone_number)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct OrderItem {
                pub product_id: _rt::String,
                pub name: _rt::String,
                pub price: f32,
                pub quantity: u32,
            }
            impl ::core::fmt::Debug for OrderItem {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("OrderItem")
                        .field("product-id", &self.product_id)
                        .field("name", &self.name)
                        .field("price", &self.price)
                        .field("quantity", &self.quantity)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Order {
                pub order_id: _rt::String,
                pub user_id: _rt::String,
                pub order_status: OrderStatus,
                pub items: _rt::Vec<OrderItem>,
                pub billing_address: Option<Address>,
                pub shipping_address: Option<Address>,
                pub total: f32,
                pub currency: _rt::String,
                pub timestamp: u64,
            }
            impl ::core::fmt::Debug for Order {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Order")
                        .field("order-id", &self.order_id)
                        .field("user-id", &self.user_id)
                        .field("order-status", &self.order_status)
                        .field("items", &self.items)
                        .field("billing-address", &self.billing_address)
                        .field("shipping-address", &self.shipping_address)
                        .field("total", &self.total)
                        .field("currency", &self.currency)
                        .field("timestamp", &self.timestamp)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateOrder {
                pub user_id: _rt::String,
                pub items: _rt::Vec<OrderItem>,
                pub billing_address: Option<Address>,
                pub shipping_address: Option<Address>,
                pub total: f32,
                pub currency: _rt::String,
                pub timestamp: u64,
            }
            impl ::core::fmt::Debug for CreateOrder {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("CreateOrder")
                        .field("user-id", &self.user_id)
                        .field("items", &self.items)
                        .field("billing-address", &self.billing_address)
                        .field("shipping-address", &self.shipping_address)
                        .field("total", &self.total)
                        .field("currency", &self.currency)
                        .field("timestamp", &self.timestamp)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ErrorCode {
                ProductNotFound,
                PricingNotFound,
                AddressNotValid,
                ItemNotFound,
                ActionNotAllowed,
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ErrorCode::ProductNotFound => {
                            f.debug_tuple("ErrorCode::ProductNotFound").finish()
                        }
                        ErrorCode::PricingNotFound => {
                            f.debug_tuple("ErrorCode::PricingNotFound").finish()
                        }
                        ErrorCode::AddressNotValid => {
                            f.debug_tuple("ErrorCode::AddressNotValid").finish()
                        }
                        ErrorCode::ItemNotFound => {
                            f.debug_tuple("ErrorCode::ItemNotFound").finish()
                        }
                        ErrorCode::ActionNotAllowed => {
                            f.debug_tuple("ErrorCode::ActionNotAllowed").finish()
                        }
                    }
                }
            }

            impl ErrorCode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ErrorCode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ErrorCode::ProductNotFound,
                        1 => ErrorCode::PricingNotFound,
                        2 => ErrorCode::AddressNotValid,
                        3 => ErrorCode::ItemNotFound,
                        4 => ErrorCode::ActionNotAllowed,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Error {
                pub code: ErrorCode,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_order(data: &CreateOrder) {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 224]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 224]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let CreateOrder {
                        user_id: user_id1,
                        items: items1,
                        billing_address: billing_address1,
                        shipping_address: shipping_address1,
                        total: total1,
                        currency: currency1,
                        timestamp: timestamp1,
                    } = data;
                    let vec2 = user_id1;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(4).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    let vec6 = items1;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 24, 4);
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6.add(i * 24);
                        {
                            let OrderItem {
                                product_id: product_id3,
                                name: name3,
                                price: price3,
                                quantity: quantity3,
                            } = e;
                            let vec4 = product_id3;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base.add(4).cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = name3;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base.add(12).cast::<usize>() = len5;
                            *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                            *base.add(16).cast::<f32>() = _rt::as_f32(price3);
                            *base.add(20).cast::<i32>() = _rt::as_i32(quantity3);
                        }
                    }
                    *ptr0.add(12).cast::<usize>() = len6;
                    *ptr0.add(8).cast::<*mut u8>() = result6;
                    match billing_address1 {
                        Some(e) => {
                            *ptr0.add(16).cast::<u8>() = (1i32) as u8;
                            let Address {
                                street1: street17,
                                street2: street27,
                                city: city7,
                                state_or_region: state_or_region7,
                                country: country7,
                                postal_code: postal_code7,
                                name: name7,
                                business_name: business_name7,
                                phone_number: phone_number7,
                            } = e;
                            let vec8 = street17;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *ptr0.add(24).cast::<usize>() = len8;
                            *ptr0.add(20).cast::<*mut u8>() = ptr8.cast_mut();
                            match street27 {
                                Some(e) => {
                                    *ptr0.add(28).cast::<u8>() = (1i32) as u8;
                                    let vec9 = e;
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    *ptr0.add(36).cast::<usize>() = len9;
                                    *ptr0.add(32).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr0.add(28).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec10 = city7;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0.add(44).cast::<usize>() = len10;
                            *ptr0.add(40).cast::<*mut u8>() = ptr10.cast_mut();
                            let vec11 = state_or_region7;
                            let ptr11 = vec11.as_ptr().cast::<u8>();
                            let len11 = vec11.len();
                            *ptr0.add(52).cast::<usize>() = len11;
                            *ptr0.add(48).cast::<*mut u8>() = ptr11.cast_mut();
                            let vec12 = country7;
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            *ptr0.add(60).cast::<usize>() = len12;
                            *ptr0.add(56).cast::<*mut u8>() = ptr12.cast_mut();
                            let vec13 = postal_code7;
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            *ptr0.add(68).cast::<usize>() = len13;
                            *ptr0.add(64).cast::<*mut u8>() = ptr13.cast_mut();
                            match name7 {
                                Some(e) => {
                                    *ptr0.add(72).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *ptr0.add(80).cast::<usize>() = len14;
                                    *ptr0.add(76).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *ptr0.add(72).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match business_name7 {
                                Some(e) => {
                                    *ptr0.add(84).cast::<u8>() = (1i32) as u8;
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *ptr0.add(92).cast::<usize>() = len15;
                                    *ptr0.add(88).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                None => {
                                    *ptr0.add(84).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match phone_number7 {
                                Some(e) => {
                                    *ptr0.add(96).cast::<u8>() = (1i32) as u8;
                                    let vec16 = e;
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    *ptr0.add(104).cast::<usize>() = len16;
                                    *ptr0.add(100).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                None => {
                                    *ptr0.add(96).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(16).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match shipping_address1 {
                        Some(e) => {
                            *ptr0.add(108).cast::<u8>() = (1i32) as u8;
                            let Address {
                                street1: street117,
                                street2: street217,
                                city: city17,
                                state_or_region: state_or_region17,
                                country: country17,
                                postal_code: postal_code17,
                                name: name17,
                                business_name: business_name17,
                                phone_number: phone_number17,
                            } = e;
                            let vec18 = street117;
                            let ptr18 = vec18.as_ptr().cast::<u8>();
                            let len18 = vec18.len();
                            *ptr0.add(116).cast::<usize>() = len18;
                            *ptr0.add(112).cast::<*mut u8>() = ptr18.cast_mut();
                            match street217 {
                                Some(e) => {
                                    *ptr0.add(120).cast::<u8>() = (1i32) as u8;
                                    let vec19 = e;
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    *ptr0.add(128).cast::<usize>() = len19;
                                    *ptr0.add(124).cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                None => {
                                    *ptr0.add(120).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec20 = city17;
                            let ptr20 = vec20.as_ptr().cast::<u8>();
                            let len20 = vec20.len();
                            *ptr0.add(136).cast::<usize>() = len20;
                            *ptr0.add(132).cast::<*mut u8>() = ptr20.cast_mut();
                            let vec21 = state_or_region17;
                            let ptr21 = vec21.as_ptr().cast::<u8>();
                            let len21 = vec21.len();
                            *ptr0.add(144).cast::<usize>() = len21;
                            *ptr0.add(140).cast::<*mut u8>() = ptr21.cast_mut();
                            let vec22 = country17;
                            let ptr22 = vec22.as_ptr().cast::<u8>();
                            let len22 = vec22.len();
                            *ptr0.add(152).cast::<usize>() = len22;
                            *ptr0.add(148).cast::<*mut u8>() = ptr22.cast_mut();
                            let vec23 = postal_code17;
                            let ptr23 = vec23.as_ptr().cast::<u8>();
                            let len23 = vec23.len();
                            *ptr0.add(160).cast::<usize>() = len23;
                            *ptr0.add(156).cast::<*mut u8>() = ptr23.cast_mut();
                            match name17 {
                                Some(e) => {
                                    *ptr0.add(164).cast::<u8>() = (1i32) as u8;
                                    let vec24 = e;
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    *ptr0.add(172).cast::<usize>() = len24;
                                    *ptr0.add(168).cast::<*mut u8>() = ptr24.cast_mut();
                                }
                                None => {
                                    *ptr0.add(164).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match business_name17 {
                                Some(e) => {
                                    *ptr0.add(176).cast::<u8>() = (1i32) as u8;
                                    let vec25 = e;
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    *ptr0.add(184).cast::<usize>() = len25;
                                    *ptr0.add(180).cast::<*mut u8>() = ptr25.cast_mut();
                                }
                                None => {
                                    *ptr0.add(176).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match phone_number17 {
                                Some(e) => {
                                    *ptr0.add(188).cast::<u8>() = (1i32) as u8;
                                    let vec26 = e;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *ptr0.add(196).cast::<usize>() = len26;
                                    *ptr0.add(192).cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                None => {
                                    *ptr0.add(188).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(108).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    *ptr0.add(200).cast::<f32>() = _rt::as_f32(total1);
                    let vec27 = currency1;
                    let ptr27 = vec27.as_ptr().cast::<u8>();
                    let len27 = vec27.len();
                    *ptr0.add(208).cast::<usize>() = len27;
                    *ptr0.add(204).cast::<*mut u8>() = ptr27.cast_mut();
                    *ptr0.add(216).cast::<i64>() = _rt::as_i64(timestamp1);

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "initialize-order"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_item(product_id: &str, quantity: u32) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = product_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "add-item"]
                        fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, _rt::as_i32(&quantity), ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                let l5 = *ptr1.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                Error {
                                    code: ErrorCode::_lift(l3 as u8),
                                    message: _rt::string_lift(bytes6),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_item(product_id: &str) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = product_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "remove-item"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                let l5 = *ptr1.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                Error {
                                    code: ErrorCode::_lift(l3 as u8),
                                    message: _rt::string_lift(bytes6),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_item_quantity(product_id: &str, quantity: u32) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = product_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "update-item-quantity"]
                        fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: i32, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, _rt::as_i32(&quantity), ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                let l5 = *ptr1.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                Error {
                                    code: ErrorCode::_lift(l3 as u8),
                                    message: _rt::string_lift(bytes6),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_shipping_address(address: &Address) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 88]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 88]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let Address {
                        street1: street11,
                        street2: street21,
                        city: city1,
                        state_or_region: state_or_region1,
                        country: country1,
                        postal_code: postal_code1,
                        name: name1,
                        business_name: business_name1,
                        phone_number: phone_number1,
                    } = address;
                    let vec2 = street11;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(4).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match street21 {
                        Some(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0.add(16).cast::<usize>() = len3;
                            *ptr0.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec4 = city1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    *ptr0.add(24).cast::<usize>() = len4;
                    *ptr0.add(20).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec5 = state_or_region1;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    *ptr0.add(32).cast::<usize>() = len5;
                    *ptr0.add(28).cast::<*mut u8>() = ptr5.cast_mut();
                    let vec6 = country1;
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    *ptr0.add(40).cast::<usize>() = len6;
                    *ptr0.add(36).cast::<*mut u8>() = ptr6.cast_mut();
                    let vec7 = postal_code1;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    *ptr0.add(48).cast::<usize>() = len7;
                    *ptr0.add(44).cast::<*mut u8>() = ptr7.cast_mut();
                    match name1 {
                        Some(e) => {
                            *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                            let vec8 = e;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *ptr0.add(60).cast::<usize>() = len8;
                            *ptr0.add(56).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match business_name1 {
                        Some(e) => {
                            *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                            let vec9 = e;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *ptr0.add(72).cast::<usize>() = len9;
                            *ptr0.add(68).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                        None => {
                            *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match phone_number1 {
                        Some(e) => {
                            *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                            let vec10 = e;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0.add(84).cast::<usize>() = len10;
                            *ptr0.add(80).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "update-shipping-address"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr11);
                    let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                    match l12 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l13 = i32::from(*ptr11.add(4).cast::<u8>());
                                let l14 = *ptr11.add(8).cast::<*mut u8>();
                                let l15 = *ptr11.add(12).cast::<usize>();
                                let len16 = l15;
                                let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                Error {
                                    code: ErrorCode::_lift(l13 as u8),
                                    message: _rt::string_lift(bytes16),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn update_billing_address(address: &Address) -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 88]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 88]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let Address {
                        street1: street11,
                        street2: street21,
                        city: city1,
                        state_or_region: state_or_region1,
                        country: country1,
                        postal_code: postal_code1,
                        name: name1,
                        business_name: business_name1,
                        phone_number: phone_number1,
                    } = address;
                    let vec2 = street11;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    *ptr0.add(4).cast::<usize>() = len2;
                    *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    match street21 {
                        Some(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            let vec3 = e;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *ptr0.add(16).cast::<usize>() = len3;
                            *ptr0.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        None => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec4 = city1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    *ptr0.add(24).cast::<usize>() = len4;
                    *ptr0.add(20).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec5 = state_or_region1;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    *ptr0.add(32).cast::<usize>() = len5;
                    *ptr0.add(28).cast::<*mut u8>() = ptr5.cast_mut();
                    let vec6 = country1;
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    *ptr0.add(40).cast::<usize>() = len6;
                    *ptr0.add(36).cast::<*mut u8>() = ptr6.cast_mut();
                    let vec7 = postal_code1;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    *ptr0.add(48).cast::<usize>() = len7;
                    *ptr0.add(44).cast::<*mut u8>() = ptr7.cast_mut();
                    match name1 {
                        Some(e) => {
                            *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                            let vec8 = e;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *ptr0.add(60).cast::<usize>() = len8;
                            *ptr0.add(56).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match business_name1 {
                        Some(e) => {
                            *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                            let vec9 = e;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *ptr0.add(72).cast::<usize>() = len9;
                            *ptr0.add(68).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                        None => {
                            *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match phone_number1 {
                        Some(e) => {
                            *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                            let vec10 = e;
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            *ptr0.add(84).cast::<usize>() = len10;
                            *ptr0.add(80).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                        None => {
                            *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "update-billing-address"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr11);
                    let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                    match l12 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l13 = i32::from(*ptr11.add(4).cast::<u8>());
                                let l14 = *ptr11.add(8).cast::<*mut u8>();
                                let l15 = *ptr11.add(12).cast::<usize>();
                                let len16 = l15;
                                let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                Error {
                                    code: ErrorCode::_lift(l13 as u8),
                                    message: _rt::string_lift(bytes16),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn ship_order() -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "ship-order"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                let l4 = *ptr0.add(12).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                Error {
                                    code: ErrorCode::_lift(l2 as u8),
                                    message: _rt::string_lift(bytes5),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn cancel_order() -> Result<(), Error> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "cancel-order"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                let l4 = *ptr0.add(12).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                Error {
                                    code: ErrorCode::_lift(l2 as u8),
                                    message: _rt::string_lift(bytes5),
                                }
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get() -> Option<Order> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 240]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 240]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:order/api")]
                    extern "C" {
                        #[link_name = "get"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => None,
                        1 => {
                            let e = {
                                let l2 = *ptr0.add(8).cast::<*mut u8>();
                                let l3 = *ptr0.add(12).cast::<usize>();
                                let len4 = l3;
                                let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                                let l5 = *ptr0.add(16).cast::<*mut u8>();
                                let l6 = *ptr0.add(20).cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                                let l8 = i32::from(*ptr0.add(24).cast::<u8>());
                                let l9 = *ptr0.add(28).cast::<*mut u8>();
                                let l10 = *ptr0.add(32).cast::<usize>();
                                let base19 = l9;
                                let len19 = l10;
                                let mut result19 = _rt::Vec::with_capacity(len19);
                                for i in 0..len19 {
                                    let base = base19.add(i * 24);
                                    let e19 = {
                                        let l11 = *base.add(0).cast::<*mut u8>();
                                        let l12 = *base.add(4).cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 =
                                            _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                                        let l14 = *base.add(8).cast::<*mut u8>();
                                        let l15 = *base.add(12).cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 =
                                            _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                                        let l17 = *base.add(16).cast::<f32>();
                                        let l18 = *base.add(20).cast::<i32>();

                                        OrderItem {
                                            product_id: _rt::string_lift(bytes13),
                                            name: _rt::string_lift(bytes16),
                                            price: l17,
                                            quantity: l18 as u32,
                                        }
                                    };
                                    result19.push(e19);
                                }
                                _rt::cabi_dealloc(base19, len19 * 24, 4);
                                let l20 = i32::from(*ptr0.add(36).cast::<u8>());
                                let l52 = i32::from(*ptr0.add(128).cast::<u8>());
                                let l84 = *ptr0.add(220).cast::<f32>();
                                let l85 = *ptr0.add(224).cast::<*mut u8>();
                                let l86 = *ptr0.add(228).cast::<usize>();
                                let len87 = l86;
                                let bytes87 = _rt::Vec::from_raw_parts(l85.cast(), len87, len87);
                                let l88 = *ptr0.add(232).cast::<i64>();

                                Order {
                                    order_id: _rt::string_lift(bytes4),
                                    user_id: _rt::string_lift(bytes7),
                                    order_status: OrderStatus::_lift(l8 as u8),
                                    items: result19,
                                    billing_address: match l20 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l21 = *ptr0.add(40).cast::<*mut u8>();
                                                let l22 = *ptr0.add(44).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                let l24 = i32::from(*ptr0.add(48).cast::<u8>());
                                                let l28 = *ptr0.add(60).cast::<*mut u8>();
                                                let l29 = *ptr0.add(64).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                let l31 = *ptr0.add(68).cast::<*mut u8>();
                                                let l32 = *ptr0.add(72).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                let l34 = *ptr0.add(76).cast::<*mut u8>();
                                                let l35 = *ptr0.add(80).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                let l37 = *ptr0.add(84).cast::<*mut u8>();
                                                let l38 = *ptr0.add(88).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                let l40 = i32::from(*ptr0.add(92).cast::<u8>());
                                                let l44 = i32::from(*ptr0.add(104).cast::<u8>());
                                                let l48 = i32::from(*ptr0.add(116).cast::<u8>());

                                                Address {
                                                    street1: _rt::string_lift(bytes23),
                                                    street2: match l24 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l25 =
                                                                    *ptr0.add(52).cast::<*mut u8>();
                                                                let l26 =
                                                                    *ptr0.add(56).cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l25.cast(),
                                                                        len27,
                                                                        len27,
                                                                    );

                                                                _rt::string_lift(bytes27)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    city: _rt::string_lift(bytes30),
                                                    state_or_region: _rt::string_lift(bytes33),
                                                    country: _rt::string_lift(bytes36),
                                                    postal_code: _rt::string_lift(bytes39),
                                                    name: match l40 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l41 =
                                                                    *ptr0.add(96).cast::<*mut u8>();
                                                                let l42 =
                                                                    *ptr0.add(100).cast::<usize>();
                                                                let len43 = l42;
                                                                let bytes43 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l41.cast(),
                                                                        len43,
                                                                        len43,
                                                                    );

                                                                _rt::string_lift(bytes43)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    business_name: match l44 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l45 = *ptr0
                                                                    .add(108)
                                                                    .cast::<*mut u8>();
                                                                let l46 =
                                                                    *ptr0.add(112).cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );

                                                                _rt::string_lift(bytes47)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    phone_number: match l48 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l49 = *ptr0
                                                                    .add(120)
                                                                    .cast::<*mut u8>();
                                                                let l50 =
                                                                    *ptr0.add(124).cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l49.cast(),
                                                                        len51,
                                                                        len51,
                                                                    );

                                                                _rt::string_lift(bytes51)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    shipping_address: match l52 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l53 = *ptr0.add(132).cast::<*mut u8>();
                                                let l54 = *ptr0.add(136).cast::<usize>();
                                                let len55 = l54;
                                                let bytes55 = _rt::Vec::from_raw_parts(
                                                    l53.cast(),
                                                    len55,
                                                    len55,
                                                );
                                                let l56 = i32::from(*ptr0.add(140).cast::<u8>());
                                                let l60 = *ptr0.add(152).cast::<*mut u8>();
                                                let l61 = *ptr0.add(156).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                let l63 = *ptr0.add(160).cast::<*mut u8>();
                                                let l64 = *ptr0.add(164).cast::<usize>();
                                                let len65 = l64;
                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                    l63.cast(),
                                                    len65,
                                                    len65,
                                                );
                                                let l66 = *ptr0.add(168).cast::<*mut u8>();
                                                let l67 = *ptr0.add(172).cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                let l69 = *ptr0.add(176).cast::<*mut u8>();
                                                let l70 = *ptr0.add(180).cast::<usize>();
                                                let len71 = l70;
                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                    l69.cast(),
                                                    len71,
                                                    len71,
                                                );
                                                let l72 = i32::from(*ptr0.add(184).cast::<u8>());
                                                let l76 = i32::from(*ptr0.add(196).cast::<u8>());
                                                let l80 = i32::from(*ptr0.add(208).cast::<u8>());

                                                Address {
                                                    street1: _rt::string_lift(bytes55),
                                                    street2: match l56 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l57 = *ptr0
                                                                    .add(144)
                                                                    .cast::<*mut u8>();
                                                                let l58 =
                                                                    *ptr0.add(148).cast::<usize>();
                                                                let len59 = l58;
                                                                let bytes59 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l57.cast(),
                                                                        len59,
                                                                        len59,
                                                                    );

                                                                _rt::string_lift(bytes59)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    city: _rt::string_lift(bytes62),
                                                    state_or_region: _rt::string_lift(bytes65),
                                                    country: _rt::string_lift(bytes68),
                                                    postal_code: _rt::string_lift(bytes71),
                                                    name: match l72 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l73 = *ptr0
                                                                    .add(188)
                                                                    .cast::<*mut u8>();
                                                                let l74 =
                                                                    *ptr0.add(192).cast::<usize>();
                                                                let len75 = l74;
                                                                let bytes75 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l73.cast(),
                                                                        len75,
                                                                        len75,
                                                                    );

                                                                _rt::string_lift(bytes75)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    business_name: match l76 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l77 = *ptr0
                                                                    .add(200)
                                                                    .cast::<*mut u8>();
                                                                let l78 =
                                                                    *ptr0.add(204).cast::<usize>();
                                                                let len79 = l78;
                                                                let bytes79 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l77.cast(),
                                                                        len79,
                                                                        len79,
                                                                    );

                                                                _rt::string_lift(bytes79)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    phone_number: match l80 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l81 = *ptr0
                                                                    .add(212)
                                                                    .cast::<*mut u8>();
                                                                let l82 =
                                                                    *ptr0.add(216).cast::<usize>();
                                                                let len83 = l82;
                                                                let bytes83 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l81.cast(),
                                                                        len83,
                                                                        len83,
                                                                    );

                                                                _rt::string_lift(bytes83)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    total: l84,
                                    currency: _rt::string_lift(bytes87),
                                    timestamp: l88 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => f.debug_tuple("WitNode::PrimU8").field(e).finish(),
                        WitNode::PrimU16(e) => f.debug_tuple("WitNode::PrimU16").field(e).finish(),
                        WitNode::PrimU32(e) => f.debug_tuple("WitNode::PrimU32").field(e).finish(),
                        WitNode::PrimU64(e) => f.debug_tuple("WitNode::PrimU64").field(e).finish(),
                        WitNode::PrimS8(e) => f.debug_tuple("WitNode::PrimS8").field(e).finish(),
                        WitNode::PrimS16(e) => f.debug_tuple("WitNode::PrimS16").field(e).finish(),
                        WitNode::PrimS32(e) => f.debug_tuple("WitNode::PrimS32").field(e).finish(),
                        WitNode::PrimS64(e) => f.debug_tuple("WitNode::PrimS64").field(e).finish(),
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => f.debug_tuple("WitNode::Handle").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => f.debug_tuple("RpcError::Denied").field(e).finish(),
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for RpcError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }

            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }

            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;

                                                        _rt::Vec::from_raw_parts(
                                                            l18.cast(),
                                                            len20,
                                                            len20,
                                                        )
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 =
                                                        {
                                                            let l21 = *base.add(8).cast::<i32>();
                                                            let l22 = i32::from(
                                                                *base.add(12).cast::<u8>(),
                                                            );

                                                            (l21 as u32, match l22 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l23 = *base.add(16).cast::<i32>();

                                                l23
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                        };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();

                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 =
                                                            _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);

                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;

                                                        _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        )
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;

                                                        _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        )
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 =
                                                                        *base.add(12).cast::<i32>();

                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l38 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l39 = *base.add(16).cast::<i32>();

                                                      l39
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l40 {
                                                  0 => None,
                                                  1 => {
                                                    let e = {
                                                      let l41 = *base.add(16).cast::<i32>();

                                                      l41
                                                    };
                                                    Some(e)
                                                  }
                                                  _ => _rt::invalid_enum_discriminant(),
                                                }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 =
                                                            i32::from(*base.add(8).cast::<u16>());

                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();

                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();

                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 =
                                                            i32::from(*base.add(8).cast::<i8>());

                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 =
                                                            i32::from(*base.add(8).cast::<i16>());

                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();

                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();

                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();

                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();

                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );

                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 21,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();

                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };

                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);

                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );

                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );

                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );

                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );

                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };

                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };

                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 =
                                                            i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l7 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len8 = l7;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l6.cast(),
                                                                        len8,
                                                                        len8,
                                                                    )
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 =
                                                                        *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    (l9 as u32, match l10 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l11 = *base.add(16).cast::<i32>();

                                                                          l11
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    })
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l14 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 =
                                                                        _rt::Vec::with_capacity(
                                                                            len16,
                                                                        );
                                                                    for i in 0..len16 {
                                                                        let base =
                                                                            base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(
                                                                                *base
                                                                                    .add(0)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l15 as u8,
                                                                            )
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base16,
                                                                        len16 * 1,
                                                                        1,
                                                                    );

                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len19 = l18;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l17.cast(),
                                                                        len19,
                                                                        len19,
                                                                    )
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len22 = l21;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    )
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l23 {
                                                                      0 => None,
                                                                      1 => {
                                                                        let e = {
                                                                          let l24 = *base.add(12).cast::<i32>();

                                                                          l24
                                                                        };
                                                                        Some(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l25 {
                                                                      0 => {
                                                                        let e = {
                                                                          let l26 = i32::from(*base.add(12).cast::<u8>());

                                                                          match l26 {
                                                                            0 => None,
                                                                            1 => {
                                                                              let e = {
                                                                                let l27 = *base.add(16).cast::<i32>();

                                                                                l27
                                                                              };
                                                                              Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                          }
                                                                        };
                                                                        Ok(e)
                                                                      }
                                                                      1 => {
                                                                        let e = {
                                                                          let l28 = i32::from(*base.add(12).cast::<u8>());

                                                                          match l28 {
                                                                            0 => None,
                                                                            1 => {
                                                                              let e = {
                                                                                let l29 = *base.add(16).cast::<i32>();

                                                                                l29
                                                                              };
                                                                              Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                          }
                                                                        };
                                                                        Err(e)
                                                                      }
                                                                      _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(
                                                                        *base.add(8).cast::<u16>(),
                                                                    );

                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(
                                                                        *base.add(8).cast::<i8>(),
                                                                    );

                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(
                                                                        *base.add(8).cast::<i16>(),
                                                                    );

                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 =
                                                                        *base.add(8).cast::<f32>();

                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 =
                                                                        *base.add(8).cast::<f64>();

                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 =
                                                                        *base.add(8).cast::<i32>();

                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l43 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l42.cast(),
                                                                            len44,
                                                                            len44,
                                                                        );

                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 21,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e49 = {
                                                                    let l45 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l45.cast(),
                                                                            len47,
                                                                            len47,
                                                                        );
                                                                    let l48 =
                                                                        *base.add(16).cast::<i64>();

                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(
                                                                                bytes47,
                                                                            ),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };

                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);

                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );

                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );

                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );

                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 3,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e64 = {
                                                            let l61 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );

                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };

                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod io {
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }

            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod order_stub {
            #[allow(dead_code, clippy::all)]
            pub mod stub_order {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type GolemRpcUri = super::super::super::super::golem::rpc::types::Uri;
                pub type WasiIoPollable = super::super::super::super::wasi::io::poll::Pollable;
                pub type Address = super::super::super::super::golem::order::api::Address;
                pub type Order = super::super::super::super::golem::order::api::Order;
                pub type CreateOrder = super::super::super::super::golem::order::api::CreateOrder;
                pub type Error = super::super::super::super::golem::order::api::Error;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureAddItemResult {
                    handle: _rt::Resource<FutureAddItemResult>,
                }

                type _FutureAddItemResultRep<T> = Option<T>;

                impl FutureAddItemResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureAddItemResult`.
                    pub fn new<T: GuestFutureAddItemResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureAddItemResultRep<T> = Some(val);
                        let ptr: *mut _FutureAddItemResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureAddItemResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureAddItemResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureAddItemResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureAddItemResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureAddItemResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureAddItemResult>(
                        &self,
                    ) -> *mut _FutureAddItemResultRep<T> {
                        FutureAddItemResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureAddItemResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureAddItemResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureAddItemResult>,
                }

                impl<'a> FutureAddItemResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureAddItemResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureAddItemResultRep<T> {
                        FutureAddItemResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureAddItemResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-add-item-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureRemoveItemResult {
                    handle: _rt::Resource<FutureRemoveItemResult>,
                }

                type _FutureRemoveItemResultRep<T> = Option<T>;

                impl FutureRemoveItemResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureRemoveItemResult`.
                    pub fn new<T: GuestFutureRemoveItemResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureRemoveItemResultRep<T> = Some(val);
                        let ptr: *mut _FutureRemoveItemResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureRemoveItemResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureRemoveItemResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureRemoveItemResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureRemoveItemResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureRemoveItemResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureRemoveItemResult>(
                        &self,
                    ) -> *mut _FutureRemoveItemResultRep<T> {
                        FutureRemoveItemResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureRemoveItemResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureRemoveItemResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureRemoveItemResult>,
                }

                impl<'a> FutureRemoveItemResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureRemoveItemResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureRemoveItemResultRep<T> {
                        FutureRemoveItemResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureRemoveItemResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-remove-item-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureUpdateItemQuantityResult {
                    handle: _rt::Resource<FutureUpdateItemQuantityResult>,
                }

                type _FutureUpdateItemQuantityResultRep<T> = Option<T>;

                impl FutureUpdateItemQuantityResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureUpdateItemQuantityResult`.
                    pub fn new<T: GuestFutureUpdateItemQuantityResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureUpdateItemQuantityResultRep<T> = Some(val);
                        let ptr: *mut _FutureUpdateItemQuantityResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureUpdateItemQuantityResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureUpdateItemQuantityResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureUpdateItemQuantityResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureUpdateItemQuantityResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureUpdateItemQuantityResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureUpdateItemQuantityResult>(
                        &self,
                    ) -> *mut _FutureUpdateItemQuantityResultRep<T> {
                        FutureUpdateItemQuantityResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureUpdateItemQuantityResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureUpdateItemQuantityResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureUpdateItemQuantityResult>,
                }

                impl<'a> FutureUpdateItemQuantityResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureUpdateItemQuantityResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureUpdateItemQuantityResultRep<T> {
                        FutureUpdateItemQuantityResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureUpdateItemQuantityResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-update-item-quantity-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureUpdateShippingAddressResult {
                    handle: _rt::Resource<FutureUpdateShippingAddressResult>,
                }

                type _FutureUpdateShippingAddressResultRep<T> = Option<T>;

                impl FutureUpdateShippingAddressResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureUpdateShippingAddressResult`.
                    pub fn new<T: GuestFutureUpdateShippingAddressResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureUpdateShippingAddressResultRep<T> = Some(val);
                        let ptr: *mut _FutureUpdateShippingAddressResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureUpdateShippingAddressResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureUpdateShippingAddressResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureUpdateShippingAddressResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureUpdateShippingAddressResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureUpdateShippingAddressResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureUpdateShippingAddressResult>(
                        &self,
                    ) -> *mut _FutureUpdateShippingAddressResultRep<T> {
                        FutureUpdateShippingAddressResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureUpdateShippingAddressResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureUpdateShippingAddressResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureUpdateShippingAddressResult>,
                }

                impl<'a> FutureUpdateShippingAddressResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureUpdateShippingAddressResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureUpdateShippingAddressResultRep<T> {
                        FutureUpdateShippingAddressResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureUpdateShippingAddressResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-update-shipping-address-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureUpdateBillingAddressResult {
                    handle: _rt::Resource<FutureUpdateBillingAddressResult>,
                }

                type _FutureUpdateBillingAddressResultRep<T> = Option<T>;

                impl FutureUpdateBillingAddressResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureUpdateBillingAddressResult`.
                    pub fn new<T: GuestFutureUpdateBillingAddressResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureUpdateBillingAddressResultRep<T> = Some(val);
                        let ptr: *mut _FutureUpdateBillingAddressResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureUpdateBillingAddressResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureUpdateBillingAddressResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureUpdateBillingAddressResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureUpdateBillingAddressResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureUpdateBillingAddressResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureUpdateBillingAddressResult>(
                        &self,
                    ) -> *mut _FutureUpdateBillingAddressResultRep<T> {
                        FutureUpdateBillingAddressResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureUpdateBillingAddressResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureUpdateBillingAddressResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureUpdateBillingAddressResult>,
                }

                impl<'a> FutureUpdateBillingAddressResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureUpdateBillingAddressResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureUpdateBillingAddressResultRep<T> {
                        FutureUpdateBillingAddressResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureUpdateBillingAddressResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-update-billing-address-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureShipOrderResult {
                    handle: _rt::Resource<FutureShipOrderResult>,
                }

                type _FutureShipOrderResultRep<T> = Option<T>;

                impl FutureShipOrderResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureShipOrderResult`.
                    pub fn new<T: GuestFutureShipOrderResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureShipOrderResultRep<T> = Some(val);
                        let ptr: *mut _FutureShipOrderResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureShipOrderResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureShipOrderResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureShipOrderResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureShipOrderResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureShipOrderResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureShipOrderResult>(
                        &self,
                    ) -> *mut _FutureShipOrderResultRep<T> {
                        FutureShipOrderResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureShipOrderResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureShipOrderResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureShipOrderResult>,
                }

                impl<'a> FutureShipOrderResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureShipOrderResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureShipOrderResultRep<T> {
                        FutureShipOrderResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureShipOrderResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-ship-order-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureCancelOrderResult {
                    handle: _rt::Resource<FutureCancelOrderResult>,
                }

                type _FutureCancelOrderResultRep<T> = Option<T>;

                impl FutureCancelOrderResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureCancelOrderResult`.
                    pub fn new<T: GuestFutureCancelOrderResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureCancelOrderResultRep<T> = Some(val);
                        let ptr: *mut _FutureCancelOrderResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureCancelOrderResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureCancelOrderResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureCancelOrderResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureCancelOrderResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureCancelOrderResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureCancelOrderResult>(
                        &self,
                    ) -> *mut _FutureCancelOrderResultRep<T> {
                        FutureCancelOrderResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureCancelOrderResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureCancelOrderResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureCancelOrderResult>,
                }

                impl<'a> FutureCancelOrderResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureCancelOrderResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureCancelOrderResultRep<T> {
                        FutureCancelOrderResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureCancelOrderResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-cancel-order-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureGetResult {
                    handle: _rt::Resource<FutureGetResult>,
                }

                type _FutureGetResultRep<T> = Option<T>;

                impl FutureGetResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureGetResult`.
                    pub fn new<T: GuestFutureGetResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureGetResultRep<T> = Some(val);
                        let ptr: *mut _FutureGetResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureGetResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureGetResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureGetResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureGetResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureGetResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureGetResult>(&self) -> *mut _FutureGetResultRep<T> {
                        FutureGetResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureGetResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureGetResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureGetResult>,
                }

                impl<'a> FutureGetResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureGetResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureGetResultRep<T> {
                        FutureGetResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureGetResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]future-get-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Api {
                    handle: _rt::Resource<Api>,
                }

                type _ApiRep<T> = Option<T>;

                impl Api {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Api`.
                    pub fn new<T: GuestApi>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ApiRep<T> = Some(val);
                        let ptr: *mut _ApiRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestApi>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestApi>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestApi>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestApi` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ApiRep<T>);
                    }

                    fn as_ptr<T: GuestApi>(&self) -> *mut _ApiRep<T> {
                        Api::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Api`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ApiBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Api>,
                }

                impl<'a> ApiBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestApi>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ApiRep<T> {
                        Api::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Api {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-drop]api"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_add_item_result_subscribe_cabi<
                    T: GuestFutureAddItemResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::subscribe(FutureAddItemResultBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_add_item_result_get_cabi<
                    T: GuestFutureAddItemResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get(FutureAddItemResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_add_item_result_get<
                    T: GuestFutureAddItemResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_remove_item_result_subscribe_cabi<
                    T: GuestFutureRemoveItemResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureRemoveItemResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_remove_item_result_get_cabi<
                    T: GuestFutureRemoveItemResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get(FutureRemoveItemResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_remove_item_result_get<
                    T: GuestFutureRemoveItemResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_update_item_quantity_result_subscribe_cabi<
                    T: GuestFutureUpdateItemQuantityResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureUpdateItemQuantityResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_update_item_quantity_result_get_cabi<
                    T: GuestFutureUpdateItemQuantityResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureUpdateItemQuantityResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_update_item_quantity_result_get<
                    T: GuestFutureUpdateItemQuantityResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_update_shipping_address_result_subscribe_cabi<
                    T: GuestFutureUpdateShippingAddressResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureUpdateShippingAddressResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_update_shipping_address_result_get_cabi<
                    T: GuestFutureUpdateShippingAddressResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureUpdateShippingAddressResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_update_shipping_address_result_get<
                    T: GuestFutureUpdateShippingAddressResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_update_billing_address_result_subscribe_cabi<
                    T: GuestFutureUpdateBillingAddressResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureUpdateBillingAddressResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_update_billing_address_result_get_cabi<
                    T: GuestFutureUpdateBillingAddressResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureUpdateBillingAddressResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_update_billing_address_result_get<
                    T: GuestFutureUpdateBillingAddressResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_ship_order_result_subscribe_cabi<
                    T: GuestFutureShipOrderResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::subscribe(FutureShipOrderResultBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_ship_order_result_get_cabi<
                    T: GuestFutureShipOrderResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get(FutureShipOrderResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_ship_order_result_get<
                    T: GuestFutureShipOrderResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_cancel_order_result_subscribe_cabi<
                    T: GuestFutureCancelOrderResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureCancelOrderResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_cancel_order_result_get_cabi<
                    T: GuestFutureCancelOrderResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get(FutureCancelOrderResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(_) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Error {
                                        code: code2,
                                        message: message2,
                                    } = e;
                                    *ptr1.add(8).cast::<u8>() = (code2.clone() as i32) as u8;
                                    let vec3 = (message2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(16).cast::<usize>() = len3;
                                    *ptr1.add(12).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_cancel_order_result_get<
                    T: GuestFutureCancelOrderResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_get_result_subscribe_cabi<
                    T: GuestFutureGetResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::subscribe(FutureGetResultBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_get_result_get_cabi<T: GuestFutureGetResult>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(FutureGetResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Order {
                                        order_id: order_id2,
                                        user_id: user_id2,
                                        order_status: order_status2,
                                        items: items2,
                                        billing_address: billing_address2,
                                        shipping_address: shipping_address2,
                                        total: total2,
                                        currency: currency2,
                                        timestamp: timestamp2,
                                    } = e;
                                    let vec3 = (order_id2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(20).cast::<usize>() = len3;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = (user_id2.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1.add(28).cast::<usize>() = len4;
                                    *ptr1.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                                    *ptr1.add(32).cast::<u8>() =
                                        (order_status2.clone() as i32) as u8;
                                    let vec8 = items2;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * 24,
                                        4,
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8.add(i * 24);
                                        {
                                            let super::super::super::super::golem::order::api::OrderItem{ product_id:product_id5, name:name5, price:price5, quantity:quantity5, } = e;
                                            let vec6 =
                                                (product_id5.into_bytes()).into_boxed_slice();
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            ::core::mem::forget(vec6);
                                            *base.add(4).cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                            let vec7 = (name5.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base.add(12).cast::<usize>() = len7;
                                            *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            *base.add(16).cast::<f32>() = _rt::as_f32(price5);
                                            *base.add(20).cast::<i32>() = _rt::as_i32(quantity5);
                                        }
                                    }
                                    *ptr1.add(40).cast::<usize>() = len8;
                                    *ptr1.add(36).cast::<*mut u8>() = result8;
                                    match billing_address2 {
                                        Some(e) => {
                                            *ptr1.add(44).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::order::api::Address{ street1:street19, street2:street29, city:city9, state_or_region:state_or_region9, country:country9, postal_code:postal_code9, name:name9, business_name:business_name9, phone_number:phone_number9, } = e;
                                            let vec10 = (street19.into_bytes()).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *ptr1.add(52).cast::<usize>() = len10;
                                            *ptr1.add(48).cast::<*mut u8>() = ptr10.cast_mut();
                                            match street29 {
                                                Some(e) => {
                                                    *ptr1.add(56).cast::<u8>() = (1i32) as u8;
                                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                                    let len11 = vec11.len();
                                                    ::core::mem::forget(vec11);
                                                    *ptr1.add(64).cast::<usize>() = len11;
                                                    *ptr1.add(60).cast::<*mut u8>() =
                                                        ptr11.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(56).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            let vec12 = (city9.into_bytes()).into_boxed_slice();
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();
                                            ::core::mem::forget(vec12);
                                            *ptr1.add(72).cast::<usize>() = len12;
                                            *ptr1.add(68).cast::<*mut u8>() = ptr12.cast_mut();
                                            let vec13 =
                                                (state_or_region9.into_bytes()).into_boxed_slice();
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            ::core::mem::forget(vec13);
                                            *ptr1.add(80).cast::<usize>() = len13;
                                            *ptr1.add(76).cast::<*mut u8>() = ptr13.cast_mut();
                                            let vec14 = (country9.into_bytes()).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *ptr1.add(88).cast::<usize>() = len14;
                                            *ptr1.add(84).cast::<*mut u8>() = ptr14.cast_mut();
                                            let vec15 =
                                                (postal_code9.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *ptr1.add(96).cast::<usize>() = len15;
                                            *ptr1.add(92).cast::<*mut u8>() = ptr15.cast_mut();
                                            match name9 {
                                                Some(e) => {
                                                    *ptr1.add(100).cast::<u8>() = (1i32) as u8;
                                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *ptr1.add(108).cast::<usize>() = len16;
                                                    *ptr1.add(104).cast::<*mut u8>() =
                                                        ptr16.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(100).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match business_name9 {
                                                Some(e) => {
                                                    *ptr1.add(112).cast::<u8>() = (1i32) as u8;
                                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *ptr1.add(120).cast::<usize>() = len17;
                                                    *ptr1.add(116).cast::<*mut u8>() =
                                                        ptr17.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(112).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match phone_number9 {
                                                Some(e) => {
                                                    *ptr1.add(124).cast::<u8>() = (1i32) as u8;
                                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *ptr1.add(132).cast::<usize>() = len18;
                                                    *ptr1.add(128).cast::<*mut u8>() =
                                                        ptr18.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(124).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *ptr1.add(44).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match shipping_address2 {
                                        Some(e) => {
                                            *ptr1.add(136).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::order::api::Address{ street1:street119, street2:street219, city:city19, state_or_region:state_or_region19, country:country19, postal_code:postal_code19, name:name19, business_name:business_name19, phone_number:phone_number19, } = e;
                                            let vec20 = (street119.into_bytes()).into_boxed_slice();
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            ::core::mem::forget(vec20);
                                            *ptr1.add(144).cast::<usize>() = len20;
                                            *ptr1.add(140).cast::<*mut u8>() = ptr20.cast_mut();
                                            match street219 {
                                                Some(e) => {
                                                    *ptr1.add(148).cast::<u8>() = (1i32) as u8;
                                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    ::core::mem::forget(vec21);
                                                    *ptr1.add(156).cast::<usize>() = len21;
                                                    *ptr1.add(152).cast::<*mut u8>() =
                                                        ptr21.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(148).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            let vec22 = (city19.into_bytes()).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *ptr1.add(164).cast::<usize>() = len22;
                                            *ptr1.add(160).cast::<*mut u8>() = ptr22.cast_mut();
                                            let vec23 =
                                                (state_or_region19.into_bytes()).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *ptr1.add(172).cast::<usize>() = len23;
                                            *ptr1.add(168).cast::<*mut u8>() = ptr23.cast_mut();
                                            let vec24 = (country19.into_bytes()).into_boxed_slice();
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            ::core::mem::forget(vec24);
                                            *ptr1.add(180).cast::<usize>() = len24;
                                            *ptr1.add(176).cast::<*mut u8>() = ptr24.cast_mut();
                                            let vec25 =
                                                (postal_code19.into_bytes()).into_boxed_slice();
                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                            let len25 = vec25.len();
                                            ::core::mem::forget(vec25);
                                            *ptr1.add(188).cast::<usize>() = len25;
                                            *ptr1.add(184).cast::<*mut u8>() = ptr25.cast_mut();
                                            match name19 {
                                                Some(e) => {
                                                    *ptr1.add(192).cast::<u8>() = (1i32) as u8;
                                                    let vec26 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *ptr1.add(200).cast::<usize>() = len26;
                                                    *ptr1.add(196).cast::<*mut u8>() =
                                                        ptr26.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(192).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match business_name19 {
                                                Some(e) => {
                                                    *ptr1.add(204).cast::<u8>() = (1i32) as u8;
                                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *ptr1.add(212).cast::<usize>() = len27;
                                                    *ptr1.add(208).cast::<*mut u8>() =
                                                        ptr27.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(204).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match phone_number19 {
                                                Some(e) => {
                                                    *ptr1.add(216).cast::<u8>() = (1i32) as u8;
                                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();
                                                    ::core::mem::forget(vec28);
                                                    *ptr1.add(224).cast::<usize>() = len28;
                                                    *ptr1.add(220).cast::<*mut u8>() =
                                                        ptr28.cast_mut();
                                                }
                                                None => {
                                                    *ptr1.add(216).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        None => {
                                            *ptr1.add(136).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    *ptr1.add(228).cast::<f32>() = _rt::as_f32(total2);
                                    let vec29 = (currency2.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr1.add(236).cast::<usize>() = len29;
                                    *ptr1.add(232).cast::<*mut u8>() = ptr29.cast_mut();
                                    *ptr1.add(240).cast::<i64>() = _rt::as_i64(timestamp2);
                                }
                                None => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_get_result_get<
                    T: GuestFutureGetResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(8).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(16).cast::<*mut u8>();
                                    let l3 = *arg0.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0.add(24).cast::<*mut u8>();
                                    let l5 = *arg0.add(28).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                    let l10 = *arg0.add(36).cast::<*mut u8>();
                                    let l11 = *arg0.add(40).cast::<usize>();
                                    let base12 = l10;
                                    let len12 = l11;
                                    for i in 0..len12 {
                                        let base = base12.add(i * 24);
                                        {
                                            let l6 = *base.add(0).cast::<*mut u8>();
                                            let l7 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                            let l8 = *base.add(8).cast::<*mut u8>();
                                            let l9 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base12, len12 * 24, 4);
                                    let l13 = i32::from(*arg0.add(44).cast::<u8>());
                                    match l13 {
                                        0 => (),
                                        _ => {
                                            let l14 = *arg0.add(48).cast::<*mut u8>();
                                            let l15 = *arg0.add(52).cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                            let l16 = i32::from(*arg0.add(56).cast::<u8>());
                                            match l16 {
                                                0 => (),
                                                _ => {
                                                    let l17 = *arg0.add(60).cast::<*mut u8>();
                                                    let l18 = *arg0.add(64).cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                            }
                                            let l19 = *arg0.add(68).cast::<*mut u8>();
                                            let l20 = *arg0.add(72).cast::<usize>();
                                            _rt::cabi_dealloc(l19, l20, 1);
                                            let l21 = *arg0.add(76).cast::<*mut u8>();
                                            let l22 = *arg0.add(80).cast::<usize>();
                                            _rt::cabi_dealloc(l21, l22, 1);
                                            let l23 = *arg0.add(84).cast::<*mut u8>();
                                            let l24 = *arg0.add(88).cast::<usize>();
                                            _rt::cabi_dealloc(l23, l24, 1);
                                            let l25 = *arg0.add(92).cast::<*mut u8>();
                                            let l26 = *arg0.add(96).cast::<usize>();
                                            _rt::cabi_dealloc(l25, l26, 1);
                                            let l27 = i32::from(*arg0.add(100).cast::<u8>());
                                            match l27 {
                                                0 => (),
                                                _ => {
                                                    let l28 = *arg0.add(104).cast::<*mut u8>();
                                                    let l29 = *arg0.add(108).cast::<usize>();
                                                    _rt::cabi_dealloc(l28, l29, 1);
                                                }
                                            }
                                            let l30 = i32::from(*arg0.add(112).cast::<u8>());
                                            match l30 {
                                                0 => (),
                                                _ => {
                                                    let l31 = *arg0.add(116).cast::<*mut u8>();
                                                    let l32 = *arg0.add(120).cast::<usize>();
                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                }
                                            }
                                            let l33 = i32::from(*arg0.add(124).cast::<u8>());
                                            match l33 {
                                                0 => (),
                                                _ => {
                                                    let l34 = *arg0.add(128).cast::<*mut u8>();
                                                    let l35 = *arg0.add(132).cast::<usize>();
                                                    _rt::cabi_dealloc(l34, l35, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l36 = i32::from(*arg0.add(136).cast::<u8>());
                                    match l36 {
                                        0 => (),
                                        _ => {
                                            let l37 = *arg0.add(140).cast::<*mut u8>();
                                            let l38 = *arg0.add(144).cast::<usize>();
                                            _rt::cabi_dealloc(l37, l38, 1);
                                            let l39 = i32::from(*arg0.add(148).cast::<u8>());
                                            match l39 {
                                                0 => (),
                                                _ => {
                                                    let l40 = *arg0.add(152).cast::<*mut u8>();
                                                    let l41 = *arg0.add(156).cast::<usize>();
                                                    _rt::cabi_dealloc(l40, l41, 1);
                                                }
                                            }
                                            let l42 = *arg0.add(160).cast::<*mut u8>();
                                            let l43 = *arg0.add(164).cast::<usize>();
                                            _rt::cabi_dealloc(l42, l43, 1);
                                            let l44 = *arg0.add(168).cast::<*mut u8>();
                                            let l45 = *arg0.add(172).cast::<usize>();
                                            _rt::cabi_dealloc(l44, l45, 1);
                                            let l46 = *arg0.add(176).cast::<*mut u8>();
                                            let l47 = *arg0.add(180).cast::<usize>();
                                            _rt::cabi_dealloc(l46, l47, 1);
                                            let l48 = *arg0.add(184).cast::<*mut u8>();
                                            let l49 = *arg0.add(188).cast::<usize>();
                                            _rt::cabi_dealloc(l48, l49, 1);
                                            let l50 = i32::from(*arg0.add(192).cast::<u8>());
                                            match l50 {
                                                0 => (),
                                                _ => {
                                                    let l51 = *arg0.add(196).cast::<*mut u8>();
                                                    let l52 = *arg0.add(200).cast::<usize>();
                                                    _rt::cabi_dealloc(l51, l52, 1);
                                                }
                                            }
                                            let l53 = i32::from(*arg0.add(204).cast::<u8>());
                                            match l53 {
                                                0 => (),
                                                _ => {
                                                    let l54 = *arg0.add(208).cast::<*mut u8>();
                                                    let l55 = *arg0.add(212).cast::<usize>();
                                                    _rt::cabi_dealloc(l54, l55, 1);
                                                }
                                            }
                                            let l56 = i32::from(*arg0.add(216).cast::<u8>());
                                            match l56 {
                                                0 => (),
                                                _ => {
                                                    let l57 = *arg0.add(220).cast::<*mut u8>();
                                                    let l58 = *arg0.add(224).cast::<usize>();
                                                    _rt::cabi_dealloc(l57, l58, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l59 = *arg0.add(232).cast::<*mut u8>();
                                    let l60 = *arg0.add(236).cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_api_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 =
                        Api::new(T::new(super::super::super::super::golem::rpc::types::Uri {
                            value: _rt::string_lift(bytes0),
                        }));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_initialize_order_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(8).cast::<*mut u8>();
                    let l2 = *arg0.add(12).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = *arg0.add(16).cast::<*mut u8>();
                    let l5 = *arg0.add(20).cast::<usize>();
                    let base14 = l4;
                    let len14 = l5;
                    let mut result14 = _rt::Vec::with_capacity(len14);
                    for i in 0..len14 {
                        let base = base14.add(i * 24);
                        let e14 = {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base.add(4).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base.add(8).cast::<*mut u8>();
                            let l10 = *base.add(12).cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                            let l12 = *base.add(16).cast::<f32>();
                            let l13 = *base.add(20).cast::<i32>();

                            super::super::super::super::golem::order::api::OrderItem {
                                product_id: _rt::string_lift(bytes8),
                                name: _rt::string_lift(bytes11),
                                price: l12,
                                quantity: l13 as u32,
                            }
                        };
                        result14.push(e14);
                    }
                    _rt::cabi_dealloc(base14, len14 * 24, 4);
                    let l15 = i32::from(*arg0.add(24).cast::<u8>());
                    let l47 = i32::from(*arg0.add(116).cast::<u8>());
                    let l79 = *arg0.add(208).cast::<f32>();
                    let l80 = *arg0.add(212).cast::<*mut u8>();
                    let l81 = *arg0.add(216).cast::<usize>();
                    let len82 = l81;
                    let bytes82 = _rt::Vec::from_raw_parts(l80.cast(), len82, len82);
                    let l83 = *arg0.add(224).cast::<i64>();
                    T::blocking_initialize_order(
                        ApiBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::order::api::CreateOrder {
                            user_id: _rt::string_lift(bytes3),
                            items: result14,
                            billing_address: match l15 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l16 = *arg0.add(28).cast::<*mut u8>();
                                        let l17 = *arg0.add(32).cast::<usize>();
                                        let len18 = l17;
                                        let bytes18 =
                                            _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                                        let l19 = i32::from(*arg0.add(36).cast::<u8>());
                                        let l23 = *arg0.add(48).cast::<*mut u8>();
                                        let l24 = *arg0.add(52).cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 =
                                            _rt::Vec::from_raw_parts(l23.cast(), len25, len25);
                                        let l26 = *arg0.add(56).cast::<*mut u8>();
                                        let l27 = *arg0.add(60).cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 =
                                            _rt::Vec::from_raw_parts(l26.cast(), len28, len28);
                                        let l29 = *arg0.add(64).cast::<*mut u8>();
                                        let l30 = *arg0.add(68).cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 =
                                            _rt::Vec::from_raw_parts(l29.cast(), len31, len31);
                                        let l32 = *arg0.add(72).cast::<*mut u8>();
                                        let l33 = *arg0.add(76).cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 =
                                            _rt::Vec::from_raw_parts(l32.cast(), len34, len34);
                                        let l35 = i32::from(*arg0.add(80).cast::<u8>());
                                        let l39 = i32::from(*arg0.add(92).cast::<u8>());
                                        let l43 = i32::from(*arg0.add(104).cast::<u8>());

                                        super::super::super::super::golem::order::api::Address {
                                            street1: _rt::string_lift(bytes18),
                                            street2: match l19 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l20 = *arg0.add(40).cast::<*mut u8>();
                                                        let l21 = *arg0.add(44).cast::<usize>();
                                                        let len22 = l21;
                                                        let bytes22 = _rt::Vec::from_raw_parts(
                                                            l20.cast(),
                                                            len22,
                                                            len22,
                                                        );

                                                        _rt::string_lift(bytes22)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            city: _rt::string_lift(bytes25),
                                            state_or_region: _rt::string_lift(bytes28),
                                            country: _rt::string_lift(bytes31),
                                            postal_code: _rt::string_lift(bytes34),
                                            name: match l35 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l36 = *arg0.add(84).cast::<*mut u8>();
                                                        let l37 = *arg0.add(88).cast::<usize>();
                                                        let len38 = l37;
                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                            l36.cast(),
                                                            len38,
                                                            len38,
                                                        );

                                                        _rt::string_lift(bytes38)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            business_name: match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *arg0.add(96).cast::<*mut u8>();
                                                        let l41 = *arg0.add(100).cast::<usize>();
                                                        let len42 = l41;
                                                        let bytes42 = _rt::Vec::from_raw_parts(
                                                            l40.cast(),
                                                            len42,
                                                            len42,
                                                        );

                                                        _rt::string_lift(bytes42)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            phone_number: match l43 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l44 = *arg0.add(108).cast::<*mut u8>();
                                                        let l45 = *arg0.add(112).cast::<usize>();
                                                        let len46 = l45;
                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                            l44.cast(),
                                                            len46,
                                                            len46,
                                                        );

                                                        _rt::string_lift(bytes46)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            shipping_address: match l47 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l48 = *arg0.add(120).cast::<*mut u8>();
                                        let l49 = *arg0.add(124).cast::<usize>();
                                        let len50 = l49;
                                        let bytes50 =
                                            _rt::Vec::from_raw_parts(l48.cast(), len50, len50);
                                        let l51 = i32::from(*arg0.add(128).cast::<u8>());
                                        let l55 = *arg0.add(140).cast::<*mut u8>();
                                        let l56 = *arg0.add(144).cast::<usize>();
                                        let len57 = l56;
                                        let bytes57 =
                                            _rt::Vec::from_raw_parts(l55.cast(), len57, len57);
                                        let l58 = *arg0.add(148).cast::<*mut u8>();
                                        let l59 = *arg0.add(152).cast::<usize>();
                                        let len60 = l59;
                                        let bytes60 =
                                            _rt::Vec::from_raw_parts(l58.cast(), len60, len60);
                                        let l61 = *arg0.add(156).cast::<*mut u8>();
                                        let l62 = *arg0.add(160).cast::<usize>();
                                        let len63 = l62;
                                        let bytes63 =
                                            _rt::Vec::from_raw_parts(l61.cast(), len63, len63);
                                        let l64 = *arg0.add(164).cast::<*mut u8>();
                                        let l65 = *arg0.add(168).cast::<usize>();
                                        let len66 = l65;
                                        let bytes66 =
                                            _rt::Vec::from_raw_parts(l64.cast(), len66, len66);
                                        let l67 = i32::from(*arg0.add(172).cast::<u8>());
                                        let l71 = i32::from(*arg0.add(184).cast::<u8>());
                                        let l75 = i32::from(*arg0.add(196).cast::<u8>());

                                        super::super::super::super::golem::order::api::Address {
                                            street1: _rt::string_lift(bytes50),
                                            street2: match l51 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l52 = *arg0.add(132).cast::<*mut u8>();
                                                        let l53 = *arg0.add(136).cast::<usize>();
                                                        let len54 = l53;
                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                            l52.cast(),
                                                            len54,
                                                            len54,
                                                        );

                                                        _rt::string_lift(bytes54)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            city: _rt::string_lift(bytes57),
                                            state_or_region: _rt::string_lift(bytes60),
                                            country: _rt::string_lift(bytes63),
                                            postal_code: _rt::string_lift(bytes66),
                                            name: match l67 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l68 = *arg0.add(176).cast::<*mut u8>();
                                                        let l69 = *arg0.add(180).cast::<usize>();
                                                        let len70 = l69;
                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                            l68.cast(),
                                                            len70,
                                                            len70,
                                                        );

                                                        _rt::string_lift(bytes70)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            business_name: match l71 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l72 = *arg0.add(188).cast::<*mut u8>();
                                                        let l73 = *arg0.add(192).cast::<usize>();
                                                        let len74 = l73;
                                                        let bytes74 = _rt::Vec::from_raw_parts(
                                                            l72.cast(),
                                                            len74,
                                                            len74,
                                                        );

                                                        _rt::string_lift(bytes74)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            phone_number: match l75 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l76 = *arg0.add(200).cast::<*mut u8>();
                                                        let l77 = *arg0.add(204).cast::<usize>();
                                                        let len78 = l77;
                                                        let bytes78 = _rt::Vec::from_raw_parts(
                                                            l76.cast(),
                                                            len78,
                                                            len78,
                                                        );

                                                        _rt::string_lift(bytes78)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            total: l79,
                            currency: _rt::string_lift(bytes82),
                            timestamp: l83 as u64,
                        },
                    );
                    _rt::cabi_dealloc(arg0, 232, 8);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_initialize_order_cabi<T: GuestApi>(arg0: *mut u8) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(8).cast::<*mut u8>();
                    let l2 = *arg0.add(12).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = *arg0.add(16).cast::<*mut u8>();
                    let l5 = *arg0.add(20).cast::<usize>();
                    let base14 = l4;
                    let len14 = l5;
                    let mut result14 = _rt::Vec::with_capacity(len14);
                    for i in 0..len14 {
                        let base = base14.add(i * 24);
                        let e14 = {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base.add(4).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base.add(8).cast::<*mut u8>();
                            let l10 = *base.add(12).cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                            let l12 = *base.add(16).cast::<f32>();
                            let l13 = *base.add(20).cast::<i32>();

                            super::super::super::super::golem::order::api::OrderItem {
                                product_id: _rt::string_lift(bytes8),
                                name: _rt::string_lift(bytes11),
                                price: l12,
                                quantity: l13 as u32,
                            }
                        };
                        result14.push(e14);
                    }
                    _rt::cabi_dealloc(base14, len14 * 24, 4);
                    let l15 = i32::from(*arg0.add(24).cast::<u8>());
                    let l47 = i32::from(*arg0.add(116).cast::<u8>());
                    let l79 = *arg0.add(208).cast::<f32>();
                    let l80 = *arg0.add(212).cast::<*mut u8>();
                    let l81 = *arg0.add(216).cast::<usize>();
                    let len82 = l81;
                    let bytes82 = _rt::Vec::from_raw_parts(l80.cast(), len82, len82);
                    let l83 = *arg0.add(224).cast::<i64>();
                    T::initialize_order(
                        ApiBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::order::api::CreateOrder {
                            user_id: _rt::string_lift(bytes3),
                            items: result14,
                            billing_address: match l15 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l16 = *arg0.add(28).cast::<*mut u8>();
                                        let l17 = *arg0.add(32).cast::<usize>();
                                        let len18 = l17;
                                        let bytes18 =
                                            _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                                        let l19 = i32::from(*arg0.add(36).cast::<u8>());
                                        let l23 = *arg0.add(48).cast::<*mut u8>();
                                        let l24 = *arg0.add(52).cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 =
                                            _rt::Vec::from_raw_parts(l23.cast(), len25, len25);
                                        let l26 = *arg0.add(56).cast::<*mut u8>();
                                        let l27 = *arg0.add(60).cast::<usize>();
                                        let len28 = l27;
                                        let bytes28 =
                                            _rt::Vec::from_raw_parts(l26.cast(), len28, len28);
                                        let l29 = *arg0.add(64).cast::<*mut u8>();
                                        let l30 = *arg0.add(68).cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 =
                                            _rt::Vec::from_raw_parts(l29.cast(), len31, len31);
                                        let l32 = *arg0.add(72).cast::<*mut u8>();
                                        let l33 = *arg0.add(76).cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 =
                                            _rt::Vec::from_raw_parts(l32.cast(), len34, len34);
                                        let l35 = i32::from(*arg0.add(80).cast::<u8>());
                                        let l39 = i32::from(*arg0.add(92).cast::<u8>());
                                        let l43 = i32::from(*arg0.add(104).cast::<u8>());

                                        super::super::super::super::golem::order::api::Address {
                                            street1: _rt::string_lift(bytes18),
                                            street2: match l19 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l20 = *arg0.add(40).cast::<*mut u8>();
                                                        let l21 = *arg0.add(44).cast::<usize>();
                                                        let len22 = l21;
                                                        let bytes22 = _rt::Vec::from_raw_parts(
                                                            l20.cast(),
                                                            len22,
                                                            len22,
                                                        );

                                                        _rt::string_lift(bytes22)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            city: _rt::string_lift(bytes25),
                                            state_or_region: _rt::string_lift(bytes28),
                                            country: _rt::string_lift(bytes31),
                                            postal_code: _rt::string_lift(bytes34),
                                            name: match l35 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l36 = *arg0.add(84).cast::<*mut u8>();
                                                        let l37 = *arg0.add(88).cast::<usize>();
                                                        let len38 = l37;
                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                            l36.cast(),
                                                            len38,
                                                            len38,
                                                        );

                                                        _rt::string_lift(bytes38)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            business_name: match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *arg0.add(96).cast::<*mut u8>();
                                                        let l41 = *arg0.add(100).cast::<usize>();
                                                        let len42 = l41;
                                                        let bytes42 = _rt::Vec::from_raw_parts(
                                                            l40.cast(),
                                                            len42,
                                                            len42,
                                                        );

                                                        _rt::string_lift(bytes42)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            phone_number: match l43 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l44 = *arg0.add(108).cast::<*mut u8>();
                                                        let l45 = *arg0.add(112).cast::<usize>();
                                                        let len46 = l45;
                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                            l44.cast(),
                                                            len46,
                                                            len46,
                                                        );

                                                        _rt::string_lift(bytes46)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            shipping_address: match l47 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l48 = *arg0.add(120).cast::<*mut u8>();
                                        let l49 = *arg0.add(124).cast::<usize>();
                                        let len50 = l49;
                                        let bytes50 =
                                            _rt::Vec::from_raw_parts(l48.cast(), len50, len50);
                                        let l51 = i32::from(*arg0.add(128).cast::<u8>());
                                        let l55 = *arg0.add(140).cast::<*mut u8>();
                                        let l56 = *arg0.add(144).cast::<usize>();
                                        let len57 = l56;
                                        let bytes57 =
                                            _rt::Vec::from_raw_parts(l55.cast(), len57, len57);
                                        let l58 = *arg0.add(148).cast::<*mut u8>();
                                        let l59 = *arg0.add(152).cast::<usize>();
                                        let len60 = l59;
                                        let bytes60 =
                                            _rt::Vec::from_raw_parts(l58.cast(), len60, len60);
                                        let l61 = *arg0.add(156).cast::<*mut u8>();
                                        let l62 = *arg0.add(160).cast::<usize>();
                                        let len63 = l62;
                                        let bytes63 =
                                            _rt::Vec::from_raw_parts(l61.cast(), len63, len63);
                                        let l64 = *arg0.add(164).cast::<*mut u8>();
                                        let l65 = *arg0.add(168).cast::<usize>();
                                        let len66 = l65;
                                        let bytes66 =
                                            _rt::Vec::from_raw_parts(l64.cast(), len66, len66);
                                        let l67 = i32::from(*arg0.add(172).cast::<u8>());
                                        let l71 = i32::from(*arg0.add(184).cast::<u8>());
                                        let l75 = i32::from(*arg0.add(196).cast::<u8>());

                                        super::super::super::super::golem::order::api::Address {
                                            street1: _rt::string_lift(bytes50),
                                            street2: match l51 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l52 = *arg0.add(132).cast::<*mut u8>();
                                                        let l53 = *arg0.add(136).cast::<usize>();
                                                        let len54 = l53;
                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                            l52.cast(),
                                                            len54,
                                                            len54,
                                                        );

                                                        _rt::string_lift(bytes54)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            city: _rt::string_lift(bytes57),
                                            state_or_region: _rt::string_lift(bytes60),
                                            country: _rt::string_lift(bytes63),
                                            postal_code: _rt::string_lift(bytes66),
                                            name: match l67 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l68 = *arg0.add(176).cast::<*mut u8>();
                                                        let l69 = *arg0.add(180).cast::<usize>();
                                                        let len70 = l69;
                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                            l68.cast(),
                                                            len70,
                                                            len70,
                                                        );

                                                        _rt::string_lift(bytes70)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            business_name: match l71 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l72 = *arg0.add(188).cast::<*mut u8>();
                                                        let l73 = *arg0.add(192).cast::<usize>();
                                                        let len74 = l73;
                                                        let bytes74 = _rt::Vec::from_raw_parts(
                                                            l72.cast(),
                                                            len74,
                                                            len74,
                                                        );

                                                        _rt::string_lift(bytes74)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            phone_number: match l75 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l76 = *arg0.add(200).cast::<*mut u8>();
                                                        let l77 = *arg0.add(204).cast::<usize>();
                                                        let len78 = l77;
                                                        let bytes78 = _rt::Vec::from_raw_parts(
                                                            l76.cast(),
                                                            len78,
                                                            len78,
                                                        );

                                                        _rt::string_lift(bytes78)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            total: l79,
                            currency: _rt::string_lift(bytes82),
                            timestamp: l83 as u64,
                        },
                    );
                    _rt::cabi_dealloc(arg0, 232, 8);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_add_item_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::blocking_add_item(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        arg3 as u32,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code3,
                                message: message3,
                            } = e;
                            *ptr2.add(4).cast::<u8>() = (code3.clone() as i32) as u8;
                            let vec4 = (message3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(12).cast::<usize>() = len4;
                            *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_add_item<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_add_item_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::add_item(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        arg3 as u32,
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_remove_item_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::blocking_remove_item(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code3,
                                message: message3,
                            } = e;
                            *ptr2.add(4).cast::<u8>() = (code3.clone() as i32) as u8;
                            let vec4 = (message3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(12).cast::<usize>() = len4;
                            *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_remove_item<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_remove_item_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::remove_item(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_update_item_quantity_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::blocking_update_item_quantity(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        arg3 as u32,
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code3,
                                message: message3,
                            } = e;
                            *ptr2.add(4).cast::<u8>() = (code3.clone() as i32) as u8;
                            let vec4 = (message3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(12).cast::<usize>() = len4;
                            *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_update_item_quantity<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_update_item_quantity_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::update_item_quantity(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        arg3 as u32,
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_update_shipping_address_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(4).cast::<*mut u8>();
                    let l2 = *arg0.add(8).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = i32::from(*arg0.add(12).cast::<u8>());
                    let l8 = *arg0.add(24).cast::<*mut u8>();
                    let l9 = *arg0.add(28).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *arg0.add(32).cast::<*mut u8>();
                    let l12 = *arg0.add(36).cast::<usize>();
                    let len13 = l12;
                    let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                    let l14 = *arg0.add(40).cast::<*mut u8>();
                    let l15 = *arg0.add(44).cast::<usize>();
                    let len16 = l15;
                    let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                    let l17 = *arg0.add(48).cast::<*mut u8>();
                    let l18 = *arg0.add(52).cast::<usize>();
                    let len19 = l18;
                    let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);
                    let l20 = i32::from(*arg0.add(56).cast::<u8>());
                    let l24 = i32::from(*arg0.add(68).cast::<u8>());
                    let l28 = i32::from(*arg0.add(80).cast::<u8>());
                    let result32 = T::blocking_update_shipping_address(
                        ApiBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::order::api::Address {
                            street1: _rt::string_lift(bytes3),
                            street2: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *arg0.add(16).cast::<*mut u8>();
                                        let l6 = *arg0.add(20).cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 =
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                        _rt::string_lift(bytes7)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            city: _rt::string_lift(bytes10),
                            state_or_region: _rt::string_lift(bytes13),
                            country: _rt::string_lift(bytes16),
                            postal_code: _rt::string_lift(bytes19),
                            name: match l20 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l21 = *arg0.add(60).cast::<*mut u8>();
                                        let l22 = *arg0.add(64).cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 =
                                            _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                        _rt::string_lift(bytes23)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            business_name: match l24 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l25 = *arg0.add(72).cast::<*mut u8>();
                                        let l26 = *arg0.add(76).cast::<usize>();
                                        let len27 = l26;
                                        let bytes27 =
                                            _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                        _rt::string_lift(bytes27)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            phone_number: match l28 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l29 = *arg0.add(84).cast::<*mut u8>();
                                        let l30 = *arg0.add(88).cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 =
                                            _rt::Vec::from_raw_parts(l29.cast(), len31, len31);

                                        _rt::string_lift(bytes31)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(arg0, 92, 4);
                    let ptr33 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result32 {
                        Ok(_) => {
                            *ptr33.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr33.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code34,
                                message: message34,
                            } = e;
                            *ptr33.add(4).cast::<u8>() = (code34.clone() as i32) as u8;
                            let vec35 = (message34.into_bytes()).into_boxed_slice();
                            let ptr35 = vec35.as_ptr().cast::<u8>();
                            let len35 = vec35.len();
                            ::core::mem::forget(vec35);
                            *ptr33.add(12).cast::<usize>() = len35;
                            *ptr33.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                        }
                    };
                    ptr33
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_update_shipping_address<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_update_shipping_address_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(4).cast::<*mut u8>();
                    let l2 = *arg0.add(8).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = i32::from(*arg0.add(12).cast::<u8>());
                    let l8 = *arg0.add(24).cast::<*mut u8>();
                    let l9 = *arg0.add(28).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *arg0.add(32).cast::<*mut u8>();
                    let l12 = *arg0.add(36).cast::<usize>();
                    let len13 = l12;
                    let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                    let l14 = *arg0.add(40).cast::<*mut u8>();
                    let l15 = *arg0.add(44).cast::<usize>();
                    let len16 = l15;
                    let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                    let l17 = *arg0.add(48).cast::<*mut u8>();
                    let l18 = *arg0.add(52).cast::<usize>();
                    let len19 = l18;
                    let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);
                    let l20 = i32::from(*arg0.add(56).cast::<u8>());
                    let l24 = i32::from(*arg0.add(68).cast::<u8>());
                    let l28 = i32::from(*arg0.add(80).cast::<u8>());
                    let result32 = T::update_shipping_address(
                        ApiBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::order::api::Address {
                            street1: _rt::string_lift(bytes3),
                            street2: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *arg0.add(16).cast::<*mut u8>();
                                        let l6 = *arg0.add(20).cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 =
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                        _rt::string_lift(bytes7)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            city: _rt::string_lift(bytes10),
                            state_or_region: _rt::string_lift(bytes13),
                            country: _rt::string_lift(bytes16),
                            postal_code: _rt::string_lift(bytes19),
                            name: match l20 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l21 = *arg0.add(60).cast::<*mut u8>();
                                        let l22 = *arg0.add(64).cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 =
                                            _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                        _rt::string_lift(bytes23)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            business_name: match l24 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l25 = *arg0.add(72).cast::<*mut u8>();
                                        let l26 = *arg0.add(76).cast::<usize>();
                                        let len27 = l26;
                                        let bytes27 =
                                            _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                        _rt::string_lift(bytes27)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            phone_number: match l28 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l29 = *arg0.add(84).cast::<*mut u8>();
                                        let l30 = *arg0.add(88).cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 =
                                            _rt::Vec::from_raw_parts(l29.cast(), len31, len31);

                                        _rt::string_lift(bytes31)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(arg0, 92, 4);
                    (result32).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_update_billing_address_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(4).cast::<*mut u8>();
                    let l2 = *arg0.add(8).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = i32::from(*arg0.add(12).cast::<u8>());
                    let l8 = *arg0.add(24).cast::<*mut u8>();
                    let l9 = *arg0.add(28).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *arg0.add(32).cast::<*mut u8>();
                    let l12 = *arg0.add(36).cast::<usize>();
                    let len13 = l12;
                    let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                    let l14 = *arg0.add(40).cast::<*mut u8>();
                    let l15 = *arg0.add(44).cast::<usize>();
                    let len16 = l15;
                    let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                    let l17 = *arg0.add(48).cast::<*mut u8>();
                    let l18 = *arg0.add(52).cast::<usize>();
                    let len19 = l18;
                    let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);
                    let l20 = i32::from(*arg0.add(56).cast::<u8>());
                    let l24 = i32::from(*arg0.add(68).cast::<u8>());
                    let l28 = i32::from(*arg0.add(80).cast::<u8>());
                    let result32 = T::blocking_update_billing_address(
                        ApiBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::order::api::Address {
                            street1: _rt::string_lift(bytes3),
                            street2: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *arg0.add(16).cast::<*mut u8>();
                                        let l6 = *arg0.add(20).cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 =
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                        _rt::string_lift(bytes7)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            city: _rt::string_lift(bytes10),
                            state_or_region: _rt::string_lift(bytes13),
                            country: _rt::string_lift(bytes16),
                            postal_code: _rt::string_lift(bytes19),
                            name: match l20 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l21 = *arg0.add(60).cast::<*mut u8>();
                                        let l22 = *arg0.add(64).cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 =
                                            _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                        _rt::string_lift(bytes23)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            business_name: match l24 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l25 = *arg0.add(72).cast::<*mut u8>();
                                        let l26 = *arg0.add(76).cast::<usize>();
                                        let len27 = l26;
                                        let bytes27 =
                                            _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                        _rt::string_lift(bytes27)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            phone_number: match l28 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l29 = *arg0.add(84).cast::<*mut u8>();
                                        let l30 = *arg0.add(88).cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 =
                                            _rt::Vec::from_raw_parts(l29.cast(), len31, len31);

                                        _rt::string_lift(bytes31)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(arg0, 92, 4);
                    let ptr33 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result32 {
                        Ok(_) => {
                            *ptr33.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr33.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code34,
                                message: message34,
                            } = e;
                            *ptr33.add(4).cast::<u8>() = (code34.clone() as i32) as u8;
                            let vec35 = (message34.into_bytes()).into_boxed_slice();
                            let ptr35 = vec35.as_ptr().cast::<u8>();
                            let len35 = vec35.len();
                            ::core::mem::forget(vec35);
                            *ptr33.add(12).cast::<usize>() = len35;
                            *ptr33.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                        }
                    };
                    ptr33
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_update_billing_address<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_update_billing_address_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(4).cast::<*mut u8>();
                    let l2 = *arg0.add(8).cast::<usize>();
                    let len3 = l2;
                    let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                    let l4 = i32::from(*arg0.add(12).cast::<u8>());
                    let l8 = *arg0.add(24).cast::<*mut u8>();
                    let l9 = *arg0.add(28).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *arg0.add(32).cast::<*mut u8>();
                    let l12 = *arg0.add(36).cast::<usize>();
                    let len13 = l12;
                    let bytes13 = _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                    let l14 = *arg0.add(40).cast::<*mut u8>();
                    let l15 = *arg0.add(44).cast::<usize>();
                    let len16 = l15;
                    let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);
                    let l17 = *arg0.add(48).cast::<*mut u8>();
                    let l18 = *arg0.add(52).cast::<usize>();
                    let len19 = l18;
                    let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);
                    let l20 = i32::from(*arg0.add(56).cast::<u8>());
                    let l24 = i32::from(*arg0.add(68).cast::<u8>());
                    let l28 = i32::from(*arg0.add(80).cast::<u8>());
                    let result32 = T::update_billing_address(
                        ApiBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::order::api::Address {
                            street1: _rt::string_lift(bytes3),
                            street2: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *arg0.add(16).cast::<*mut u8>();
                                        let l6 = *arg0.add(20).cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 =
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                        _rt::string_lift(bytes7)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            city: _rt::string_lift(bytes10),
                            state_or_region: _rt::string_lift(bytes13),
                            country: _rt::string_lift(bytes16),
                            postal_code: _rt::string_lift(bytes19),
                            name: match l20 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l21 = *arg0.add(60).cast::<*mut u8>();
                                        let l22 = *arg0.add(64).cast::<usize>();
                                        let len23 = l22;
                                        let bytes23 =
                                            _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                        _rt::string_lift(bytes23)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            business_name: match l24 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l25 = *arg0.add(72).cast::<*mut u8>();
                                        let l26 = *arg0.add(76).cast::<usize>();
                                        let len27 = l26;
                                        let bytes27 =
                                            _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                        _rt::string_lift(bytes27)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            phone_number: match l28 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l29 = *arg0.add(84).cast::<*mut u8>();
                                        let l30 = *arg0.add(88).cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 =
                                            _rt::Vec::from_raw_parts(l29.cast(), len31, len31);

                                        _rt::string_lift(bytes31)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    _rt::cabi_dealloc(arg0, 92, 4);
                    (result32).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_ship_order_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::blocking_ship_order(ApiBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code2,
                                message: message2,
                            } = e;
                            *ptr1.add(4).cast::<u8>() = (code2.clone() as i32) as u8;
                            let vec3 = (message2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(12).cast::<usize>() = len3;
                            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_ship_order<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_ship_order_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::ship_order(ApiBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_cancel_order_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::blocking_cancel_order(ApiBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Error {
                                code: code2,
                                message: message2,
                            } = e;
                            *ptr1.add(4).cast::<u8>() = (code2.clone() as i32) as u8;
                            let vec3 = (message2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(12).cast::<usize>() = len3;
                            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_cancel_order<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_cancel_order_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::cancel_order(ApiBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_get_cabi<T: GuestApi>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::blocking_get(ApiBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::order::api::Order {
                                order_id: order_id2,
                                user_id: user_id2,
                                order_status: order_status2,
                                items: items2,
                                billing_address: billing_address2,
                                shipping_address: shipping_address2,
                                total: total2,
                                currency: currency2,
                                timestamp: timestamp2,
                            } = e;
                            let vec3 = (order_id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1.add(12).cast::<usize>() = len3;
                            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (user_id2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1.add(20).cast::<usize>() = len4;
                            *ptr1.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                            *ptr1.add(24).cast::<u8>() = (order_status2.clone() as i32) as u8;
                            let vec8 = items2;
                            let len8 = vec8.len();
                            let layout8 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec8.len() * 24, 4);
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8.add(i * 24);
                                {
                                    let super::super::super::super::golem::order::api::OrderItem {
                                        product_id: product_id5,
                                        name: name5,
                                        price: price5,
                                        quantity: quantity5,
                                    } = e;
                                    let vec6 = (product_id5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(4).cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = (name5.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base.add(12).cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    *base.add(16).cast::<f32>() = _rt::as_f32(price5);
                                    *base.add(20).cast::<i32>() = _rt::as_i32(quantity5);
                                }
                            }
                            *ptr1.add(32).cast::<usize>() = len8;
                            *ptr1.add(28).cast::<*mut u8>() = result8;
                            match billing_address2 {
                                Some(e) => {
                                    *ptr1.add(36).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Address {
                                        street1: street19,
                                        street2: street29,
                                        city: city9,
                                        state_or_region: state_or_region9,
                                        country: country9,
                                        postal_code: postal_code9,
                                        name: name9,
                                        business_name: business_name9,
                                        phone_number: phone_number9,
                                    } = e;
                                    let vec10 = (street19.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1.add(44).cast::<usize>() = len10;
                                    *ptr1.add(40).cast::<*mut u8>() = ptr10.cast_mut();
                                    match street29 {
                                        Some(e) => {
                                            *ptr1.add(48).cast::<u8>() = (1i32) as u8;
                                            let vec11 = (e.into_bytes()).into_boxed_slice();
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            ::core::mem::forget(vec11);
                                            *ptr1.add(56).cast::<usize>() = len11;
                                            *ptr1.add(52).cast::<*mut u8>() = ptr11.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(48).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec12 = (city9.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1.add(64).cast::<usize>() = len12;
                                    *ptr1.add(60).cast::<*mut u8>() = ptr12.cast_mut();
                                    let vec13 = (state_or_region9.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1.add(72).cast::<usize>() = len13;
                                    *ptr1.add(68).cast::<*mut u8>() = ptr13.cast_mut();
                                    let vec14 = (country9.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1.add(80).cast::<usize>() = len14;
                                    *ptr1.add(76).cast::<*mut u8>() = ptr14.cast_mut();
                                    let vec15 = (postal_code9.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr1.add(88).cast::<usize>() = len15;
                                    *ptr1.add(84).cast::<*mut u8>() = ptr15.cast_mut();
                                    match name9 {
                                        Some(e) => {
                                            *ptr1.add(92).cast::<u8>() = (1i32) as u8;
                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            ::core::mem::forget(vec16);
                                            *ptr1.add(100).cast::<usize>() = len16;
                                            *ptr1.add(96).cast::<*mut u8>() = ptr16.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(92).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match business_name9 {
                                        Some(e) => {
                                            *ptr1.add(104).cast::<u8>() = (1i32) as u8;
                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *ptr1.add(112).cast::<usize>() = len17;
                                            *ptr1.add(108).cast::<*mut u8>() = ptr17.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(104).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match phone_number9 {
                                        Some(e) => {
                                            *ptr1.add(116).cast::<u8>() = (1i32) as u8;
                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();
                                            ::core::mem::forget(vec18);
                                            *ptr1.add(124).cast::<usize>() = len18;
                                            *ptr1.add(120).cast::<*mut u8>() = ptr18.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(116).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr1.add(36).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match shipping_address2 {
                                Some(e) => {
                                    *ptr1.add(128).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::order::api::Address {
                                        street1: street119,
                                        street2: street219,
                                        city: city19,
                                        state_or_region: state_or_region19,
                                        country: country19,
                                        postal_code: postal_code19,
                                        name: name19,
                                        business_name: business_name19,
                                        phone_number: phone_number19,
                                    } = e;
                                    let vec20 = (street119.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr1.add(136).cast::<usize>() = len20;
                                    *ptr1.add(132).cast::<*mut u8>() = ptr20.cast_mut();
                                    match street219 {
                                        Some(e) => {
                                            *ptr1.add(140).cast::<u8>() = (1i32) as u8;
                                            let vec21 = (e.into_bytes()).into_boxed_slice();
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            ::core::mem::forget(vec21);
                                            *ptr1.add(148).cast::<usize>() = len21;
                                            *ptr1.add(144).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(140).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec22 = (city19.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *ptr1.add(156).cast::<usize>() = len22;
                                    *ptr1.add(152).cast::<*mut u8>() = ptr22.cast_mut();
                                    let vec23 = (state_or_region19.into_bytes()).into_boxed_slice();
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    ::core::mem::forget(vec23);
                                    *ptr1.add(164).cast::<usize>() = len23;
                                    *ptr1.add(160).cast::<*mut u8>() = ptr23.cast_mut();
                                    let vec24 = (country19.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *ptr1.add(172).cast::<usize>() = len24;
                                    *ptr1.add(168).cast::<*mut u8>() = ptr24.cast_mut();
                                    let vec25 = (postal_code19.into_bytes()).into_boxed_slice();
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    ::core::mem::forget(vec25);
                                    *ptr1.add(180).cast::<usize>() = len25;
                                    *ptr1.add(176).cast::<*mut u8>() = ptr25.cast_mut();
                                    match name19 {
                                        Some(e) => {
                                            *ptr1.add(184).cast::<u8>() = (1i32) as u8;
                                            let vec26 = (e.into_bytes()).into_boxed_slice();
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            ::core::mem::forget(vec26);
                                            *ptr1.add(192).cast::<usize>() = len26;
                                            *ptr1.add(188).cast::<*mut u8>() = ptr26.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(184).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match business_name19 {
                                        Some(e) => {
                                            *ptr1.add(196).cast::<u8>() = (1i32) as u8;
                                            let vec27 = (e.into_bytes()).into_boxed_slice();
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();
                                            ::core::mem::forget(vec27);
                                            *ptr1.add(204).cast::<usize>() = len27;
                                            *ptr1.add(200).cast::<*mut u8>() = ptr27.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(196).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match phone_number19 {
                                        Some(e) => {
                                            *ptr1.add(208).cast::<u8>() = (1i32) as u8;
                                            let vec28 = (e.into_bytes()).into_boxed_slice();
                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                            let len28 = vec28.len();
                                            ::core::mem::forget(vec28);
                                            *ptr1.add(216).cast::<usize>() = len28;
                                            *ptr1.add(212).cast::<*mut u8>() = ptr28.cast_mut();
                                        }
                                        None => {
                                            *ptr1.add(208).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr1.add(128).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr1.add(220).cast::<f32>() = _rt::as_f32(total2);
                            let vec29 = (currency2.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr1.add(228).cast::<usize>() = len29;
                            *ptr1.add(224).cast::<*mut u8>() = ptr29.cast_mut();
                            *ptr1.add(232).cast::<i64>() = _rt::as_i64(timestamp2);
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_get<T: GuestApi>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0.add(16).cast::<*mut u8>();
                            let l4 = *arg0.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l9 = *arg0.add(28).cast::<*mut u8>();
                            let l10 = *arg0.add(32).cast::<usize>();
                            let base11 = l9;
                            let len11 = l10;
                            for i in 0..len11 {
                                let base = base11.add(i * 24);
                                {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base.add(8).cast::<*mut u8>();
                                    let l8 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            _rt::cabi_dealloc(base11, len11 * 24, 4);
                            let l12 = i32::from(*arg0.add(36).cast::<u8>());
                            match l12 {
                                0 => (),
                                _ => {
                                    let l13 = *arg0.add(40).cast::<*mut u8>();
                                    let l14 = *arg0.add(44).cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                    let l15 = i32::from(*arg0.add(48).cast::<u8>());
                                    match l15 {
                                        0 => (),
                                        _ => {
                                            let l16 = *arg0.add(52).cast::<*mut u8>();
                                            let l17 = *arg0.add(56).cast::<usize>();
                                            _rt::cabi_dealloc(l16, l17, 1);
                                        }
                                    }
                                    let l18 = *arg0.add(60).cast::<*mut u8>();
                                    let l19 = *arg0.add(64).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                    let l20 = *arg0.add(68).cast::<*mut u8>();
                                    let l21 = *arg0.add(72).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                    let l22 = *arg0.add(76).cast::<*mut u8>();
                                    let l23 = *arg0.add(80).cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                    let l24 = *arg0.add(84).cast::<*mut u8>();
                                    let l25 = *arg0.add(88).cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                    let l26 = i32::from(*arg0.add(92).cast::<u8>());
                                    match l26 {
                                        0 => (),
                                        _ => {
                                            let l27 = *arg0.add(96).cast::<*mut u8>();
                                            let l28 = *arg0.add(100).cast::<usize>();
                                            _rt::cabi_dealloc(l27, l28, 1);
                                        }
                                    }
                                    let l29 = i32::from(*arg0.add(104).cast::<u8>());
                                    match l29 {
                                        0 => (),
                                        _ => {
                                            let l30 = *arg0.add(108).cast::<*mut u8>();
                                            let l31 = *arg0.add(112).cast::<usize>();
                                            _rt::cabi_dealloc(l30, l31, 1);
                                        }
                                    }
                                    let l32 = i32::from(*arg0.add(116).cast::<u8>());
                                    match l32 {
                                        0 => (),
                                        _ => {
                                            let l33 = *arg0.add(120).cast::<*mut u8>();
                                            let l34 = *arg0.add(124).cast::<usize>();
                                            _rt::cabi_dealloc(l33, l34, 1);
                                        }
                                    }
                                }
                            }
                            let l35 = i32::from(*arg0.add(128).cast::<u8>());
                            match l35 {
                                0 => (),
                                _ => {
                                    let l36 = *arg0.add(132).cast::<*mut u8>();
                                    let l37 = *arg0.add(136).cast::<usize>();
                                    _rt::cabi_dealloc(l36, l37, 1);
                                    let l38 = i32::from(*arg0.add(140).cast::<u8>());
                                    match l38 {
                                        0 => (),
                                        _ => {
                                            let l39 = *arg0.add(144).cast::<*mut u8>();
                                            let l40 = *arg0.add(148).cast::<usize>();
                                            _rt::cabi_dealloc(l39, l40, 1);
                                        }
                                    }
                                    let l41 = *arg0.add(152).cast::<*mut u8>();
                                    let l42 = *arg0.add(156).cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                    let l43 = *arg0.add(160).cast::<*mut u8>();
                                    let l44 = *arg0.add(164).cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                    let l45 = *arg0.add(168).cast::<*mut u8>();
                                    let l46 = *arg0.add(172).cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                    let l47 = *arg0.add(176).cast::<*mut u8>();
                                    let l48 = *arg0.add(180).cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                    let l49 = i32::from(*arg0.add(184).cast::<u8>());
                                    match l49 {
                                        0 => (),
                                        _ => {
                                            let l50 = *arg0.add(188).cast::<*mut u8>();
                                            let l51 = *arg0.add(192).cast::<usize>();
                                            _rt::cabi_dealloc(l50, l51, 1);
                                        }
                                    }
                                    let l52 = i32::from(*arg0.add(196).cast::<u8>());
                                    match l52 {
                                        0 => (),
                                        _ => {
                                            let l53 = *arg0.add(200).cast::<*mut u8>();
                                            let l54 = *arg0.add(204).cast::<usize>();
                                            _rt::cabi_dealloc(l53, l54, 1);
                                        }
                                    }
                                    let l55 = i32::from(*arg0.add(208).cast::<u8>());
                                    match l55 {
                                        0 => (),
                                        _ => {
                                            let l56 = *arg0.add(212).cast::<*mut u8>();
                                            let l57 = *arg0.add(216).cast::<usize>();
                                            _rt::cabi_dealloc(l56, l57, 1);
                                        }
                                    }
                                }
                            }
                            let l58 = *arg0.add(224).cast::<*mut u8>();
                            let l59 = *arg0.add(228).cast::<usize>();
                            _rt::cabi_dealloc(l58, l59, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_get_cabi<T: GuestApi>(arg0: *mut u8) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(ApiBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type FutureAddItemResult: GuestFutureAddItemResult;
                    type FutureRemoveItemResult: GuestFutureRemoveItemResult;
                    type FutureUpdateItemQuantityResult: GuestFutureUpdateItemQuantityResult;
                    type FutureUpdateShippingAddressResult: GuestFutureUpdateShippingAddressResult;
                    type FutureUpdateBillingAddressResult: GuestFutureUpdateBillingAddressResult;
                    type FutureShipOrderResult: GuestFutureShipOrderResult;
                    type FutureCancelOrderResult: GuestFutureCancelOrderResult;
                    type FutureGetResult: GuestFutureGetResult;
                    type Api: GuestApi;
                }
                pub trait GuestFutureAddItemResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-add-item-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-add-item-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureRemoveItemResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-remove-item-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-remove-item-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureUpdateItemQuantityResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-update-item-quantity-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-update-item-quantity-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureUpdateShippingAddressResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-update-shipping-address-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-update-shipping-address-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureUpdateBillingAddressResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-update-billing-address-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-update-billing-address-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureShipOrderResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-ship-order-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-ship-order-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureCancelOrderResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-cancel-order-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-cancel-order-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<(), Error>>;
                }
                pub trait GuestFutureGetResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]future-get-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]future-get-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Option<Order>>;
                }
                pub trait GuestApi: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-new]api"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:order-stub/stub-order")]
                            extern "C" {
                                #[link_name = "[resource-rep]api"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(location: GolemRpcUri) -> Self;
                    fn blocking_initialize_order(&self, data: CreateOrder);
                    fn initialize_order(&self, data: CreateOrder);
                    fn blocking_add_item(
                        &self,
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> Result<(), Error>;
                    fn add_item(
                        &self,
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> FutureAddItemResult;
                    fn blocking_remove_item(&self, product_id: _rt::String) -> Result<(), Error>;
                    fn remove_item(&self, product_id: _rt::String) -> FutureRemoveItemResult;
                    fn blocking_update_item_quantity(
                        &self,
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> Result<(), Error>;
                    fn update_item_quantity(
                        &self,
                        product_id: _rt::String,
                        quantity: u32,
                    ) -> FutureUpdateItemQuantityResult;
                    fn blocking_update_shipping_address(
                        &self,
                        address: Address,
                    ) -> Result<(), Error>;
                    fn update_shipping_address(
                        &self,
                        address: Address,
                    ) -> FutureUpdateShippingAddressResult;
                    fn blocking_update_billing_address(
                        &self,
                        address: Address,
                    ) -> Result<(), Error>;
                    fn update_billing_address(
                        &self,
                        address: Address,
                    ) -> FutureUpdateBillingAddressResult;
                    fn blocking_ship_order(&self) -> Result<(), Error>;
                    fn ship_order(&self) -> FutureShipOrderResult;
                    fn blocking_cancel_order(&self) -> Result<(), Error>;
                    fn cancel_order(&self) -> FutureCancelOrderResult;
                    fn blocking_get(&self) -> Option<Order>;
                    fn get(&self) -> FutureGetResult;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_order_stub_stub_order_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "golem:order-stub/stub-order#[method]future-add-item-result.subscribe"]
    unsafe extern "C" fn export_method_future_add_item_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_add_item_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureAddItemResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-add-item-result.get"]
    unsafe extern "C" fn export_method_future_add_item_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_add_item_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureAddItemResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-add-item-result.get"]
    unsafe extern "C" fn _post_return_method_future_add_item_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_add_item_result_get::<<$ty as $($path_to_types)*::Guest>::FutureAddItemResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-remove-item-result.subscribe"]
    unsafe extern "C" fn export_method_future_remove_item_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_remove_item_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureRemoveItemResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-remove-item-result.get"]
    unsafe extern "C" fn export_method_future_remove_item_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_remove_item_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureRemoveItemResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-remove-item-result.get"]
    unsafe extern "C" fn _post_return_method_future_remove_item_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_remove_item_result_get::<<$ty as $($path_to_types)*::Guest>::FutureRemoveItemResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-update-item-quantity-result.subscribe"]
    unsafe extern "C" fn export_method_future_update_item_quantity_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_update_item_quantity_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureUpdateItemQuantityResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-update-item-quantity-result.get"]
    unsafe extern "C" fn export_method_future_update_item_quantity_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_update_item_quantity_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureUpdateItemQuantityResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-update-item-quantity-result.get"]
    unsafe extern "C" fn _post_return_method_future_update_item_quantity_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_update_item_quantity_result_get::<<$ty as $($path_to_types)*::Guest>::FutureUpdateItemQuantityResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-update-shipping-address-result.subscribe"]
    unsafe extern "C" fn export_method_future_update_shipping_address_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_update_shipping_address_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureUpdateShippingAddressResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-update-shipping-address-result.get"]
    unsafe extern "C" fn export_method_future_update_shipping_address_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_update_shipping_address_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureUpdateShippingAddressResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-update-shipping-address-result.get"]
    unsafe extern "C" fn _post_return_method_future_update_shipping_address_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_update_shipping_address_result_get::<<$ty as $($path_to_types)*::Guest>::FutureUpdateShippingAddressResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-update-billing-address-result.subscribe"]
    unsafe extern "C" fn export_method_future_update_billing_address_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_update_billing_address_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureUpdateBillingAddressResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-update-billing-address-result.get"]
    unsafe extern "C" fn export_method_future_update_billing_address_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_update_billing_address_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureUpdateBillingAddressResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-update-billing-address-result.get"]
    unsafe extern "C" fn _post_return_method_future_update_billing_address_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_update_billing_address_result_get::<<$ty as $($path_to_types)*::Guest>::FutureUpdateBillingAddressResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-ship-order-result.subscribe"]
    unsafe extern "C" fn export_method_future_ship_order_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_ship_order_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureShipOrderResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-ship-order-result.get"]
    unsafe extern "C" fn export_method_future_ship_order_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_ship_order_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureShipOrderResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-ship-order-result.get"]
    unsafe extern "C" fn _post_return_method_future_ship_order_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_ship_order_result_get::<<$ty as $($path_to_types)*::Guest>::FutureShipOrderResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-cancel-order-result.subscribe"]
    unsafe extern "C" fn export_method_future_cancel_order_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_cancel_order_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureCancelOrderResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-cancel-order-result.get"]
    unsafe extern "C" fn export_method_future_cancel_order_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_cancel_order_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureCancelOrderResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-cancel-order-result.get"]
    unsafe extern "C" fn _post_return_method_future_cancel_order_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_cancel_order_result_get::<<$ty as $($path_to_types)*::Guest>::FutureCancelOrderResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-get-result.subscribe"]
    unsafe extern "C" fn export_method_future_get_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_get_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureGetResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]future-get-result.get"]
    unsafe extern "C" fn export_method_future_get_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_get_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureGetResult>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]future-get-result.get"]
    unsafe extern "C" fn _post_return_method_future_get_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_get_result_get::<<$ty as $($path_to_types)*::Guest>::FutureGetResult>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[constructor]api"]
    unsafe extern "C" fn export_constructor_api(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_api_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-initialize-order"]
    unsafe extern "C" fn export_method_api_blocking_initialize_order(arg0: *mut u8,) {
      $($path_to_types)*::_export_method_api_blocking_initialize_order_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.initialize-order"]
    unsafe extern "C" fn export_method_api_initialize_order(arg0: *mut u8,) {
      $($path_to_types)*::_export_method_api_initialize_order_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-add-item"]
    unsafe extern "C" fn export_method_api_blocking_add_item(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_add_item_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-add-item"]
    unsafe extern "C" fn _post_return_method_api_blocking_add_item(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_add_item::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.add-item"]
    unsafe extern "C" fn export_method_api_add_item(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,) -> i32 {
      $($path_to_types)*::_export_method_api_add_item_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-remove-item"]
    unsafe extern "C" fn export_method_api_blocking_remove_item(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_remove_item_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-remove-item"]
    unsafe extern "C" fn _post_return_method_api_blocking_remove_item(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_remove_item::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.remove-item"]
    unsafe extern "C" fn export_method_api_remove_item(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> i32 {
      $($path_to_types)*::_export_method_api_remove_item_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-update-item-quantity"]
    unsafe extern "C" fn export_method_api_blocking_update_item_quantity(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_update_item_quantity_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-update-item-quantity"]
    unsafe extern "C" fn _post_return_method_api_blocking_update_item_quantity(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_update_item_quantity::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.update-item-quantity"]
    unsafe extern "C" fn export_method_api_update_item_quantity(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,) -> i32 {
      $($path_to_types)*::_export_method_api_update_item_quantity_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-update-shipping-address"]
    unsafe extern "C" fn export_method_api_blocking_update_shipping_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_update_shipping_address_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-update-shipping-address"]
    unsafe extern "C" fn _post_return_method_api_blocking_update_shipping_address(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_update_shipping_address::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.update-shipping-address"]
    unsafe extern "C" fn export_method_api_update_shipping_address(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_api_update_shipping_address_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-update-billing-address"]
    unsafe extern "C" fn export_method_api_blocking_update_billing_address(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_update_billing_address_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-update-billing-address"]
    unsafe extern "C" fn _post_return_method_api_blocking_update_billing_address(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_update_billing_address::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.update-billing-address"]
    unsafe extern "C" fn export_method_api_update_billing_address(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_api_update_billing_address_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-ship-order"]
    unsafe extern "C" fn export_method_api_blocking_ship_order(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_ship_order_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-ship-order"]
    unsafe extern "C" fn _post_return_method_api_blocking_ship_order(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_ship_order::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.ship-order"]
    unsafe extern "C" fn export_method_api_ship_order(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_api_ship_order_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-cancel-order"]
    unsafe extern "C" fn export_method_api_blocking_cancel_order(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_cancel_order_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-cancel-order"]
    unsafe extern "C" fn _post_return_method_api_blocking_cancel_order(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_cancel_order::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.cancel-order"]
    unsafe extern "C" fn export_method_api_cancel_order(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_api_cancel_order_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.blocking-get"]
    unsafe extern "C" fn export_method_api_blocking_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_get_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "cabi_post_golem:order-stub/stub-order#[method]api.blocking-get"]
    unsafe extern "C" fn _post_return_method_api_blocking_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_get::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "golem:order-stub/stub-order#[method]api.get"]
    unsafe extern "C" fn export_method_api_get(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_api_get_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-add-item-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureAddItemResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureAddItemResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-remove-item-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureRemoveItemResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureRemoveItemResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-update-item-quantity-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureUpdateItemQuantityResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureUpdateItemQuantityResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-update-shipping-address-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureUpdateShippingAddressResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureUpdateShippingAddressResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-update-billing-address-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureUpdateBillingAddressResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureUpdateBillingAddressResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-ship-order-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureShipOrderResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureShipOrderResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-cancel-order-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureCancelOrderResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureCancelOrderResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]future-get-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureGetResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureGetResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "golem:order-stub/stub-order#[dtor]api"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Api::dtor::<
        <$ty as $($path_to_types)*::Guest>::Api
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_golem_order_stub_stub_order_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 248]);
                static mut _RET_AREA: _RetArea =
                    _RetArea([::core::mem::MaybeUninit::uninit(); 248]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_wasm_rpc_stub_order_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::golem::order_stub::stub_order::__export_golem_order_stub_stub_order_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::order_stub::stub_order);
  )
}
#[doc(inline)]
pub(crate) use __export_wasm_rpc_stub_order_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:wasm-rpc-stub-order:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4747] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x81$\x01A\x02\x01A\x11\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\x01\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B*\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01z\x04\0\x0anode-index\x03\0\x02\x01r\x01\x05values\
\x04\0\x03uri\x03\0\x04\x01p\x03\x01k\x03\x01o\x02y\x07\x01p\x7f\x01j\x01\x07\x01\
\x07\x01o\x02\x05w\x01q\x16\x0crecord-value\x01\x06\0\x0dvariant-value\x01\x08\0\
\x0aenum-value\x01y\0\x0bflags-value\x01\x09\0\x0btuple-value\x01\x06\0\x0alist-\
value\x01\x06\0\x0coption-value\x01\x07\0\x0cresult-value\x01\x0a\0\x07prim-u8\x01\
}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08\
prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0c\
prim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01\x0b\0\x04\0\x08wit-node\x03\0\x0c\x01p\x0d\x01r\x01\x05nodes\x0e\
\x04\0\x09wit-value\x03\0\x0f\x01q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\
\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\x03\0\x11\
\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\x01i\x13\x01@\x01\
\x08location\x05\0\x15\x04\0\x15[constructor]wasm-rpc\x01\x16\x01h\x13\x01p\x10\x01\
j\x01\x10\x01\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-params\x18\0\
\x19\x04\0![method]wasm-rpc.invoke-and-await\x01\x1a\x01j\0\x01\x12\x01@\x03\x04\
self\x17\x0dfunction-names\x0ffunction-params\x18\0\x1b\x04\0\x17[method]wasm-rp\
c.invoke\x01\x1c\x01i\x14\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-par\
ams\x18\0\x1d\x04\0'[method]wasm-rpc.async-invoke-and-await\x01\x1e\x01h\x14\x01\
i\x01\x01@\x01\x04self\x1f\0\x20\x04\0&[method]future-invoke-result.subscribe\x01\
!\x01k\x19\x01@\x01\x04self\x1f\0\"\x04\0\x20[method]future-invoke-result.get\x01\
#\x03\x01\x15golem:rpc/types@0.1.0\x05\x02\x01B\"\x01m\x03\x03new\x07shipped\x09\
cancelled\x04\0\x0corder-status\x03\0\0\x01ks\x01r\x09\x07street1s\x07street2\x02\
\x04citys\x0fstate-or-regions\x07countrys\x0bpostal-codes\x04name\x02\x0dbusines\
s-name\x02\x0cphone-number\x02\x04\0\x07address\x03\0\x03\x01r\x04\x0aproduct-id\
s\x04names\x05pricev\x08quantityy\x04\0\x0aorder-item\x03\0\x05\x01p\x06\x01k\x04\
\x01r\x09\x08order-ids\x07user-ids\x0corder-status\x01\x05items\x07\x0fbilling-a\
ddress\x08\x10shipping-address\x08\x05totalv\x08currencys\x09timestampw\x04\0\x05\
order\x03\0\x09\x01r\x07\x07user-ids\x05items\x07\x0fbilling-address\x08\x10ship\
ping-address\x08\x05totalv\x08currencys\x09timestampw\x04\0\x0ccreate-order\x03\0\
\x0b\x01m\x05\x11product-not-found\x11pricing-not-found\x11address-not-valid\x0e\
item-not-found\x12action-not-allowed\x04\0\x0aerror-code\x03\0\x0d\x01r\x02\x04c\
ode\x0e\x07messages\x04\0\x05error\x03\0\x0f\x01@\x01\x04data\x0c\x01\0\x04\0\x10\
initialize-order\x01\x11\x01j\0\x01\x10\x01@\x02\x0aproduct-ids\x08quantityy\0\x12\
\x04\0\x08add-item\x01\x13\x01@\x01\x0aproduct-ids\0\x12\x04\0\x0bremove-item\x01\
\x14\x04\0\x14update-item-quantity\x01\x13\x01@\x01\x07address\x04\0\x12\x04\0\x17\
update-shipping-address\x01\x15\x04\0\x16update-billing-address\x01\x15\x01@\0\0\
\x12\x04\0\x0aship-order\x01\x16\x04\0\x0ccancel-order\x01\x16\x01k\x0a\x01@\0\0\
\x17\x04\0\x03get\x01\x18\x03\x01\x0fgolem:order/api\x05\x03\x02\x03\0\x01\x03ur\
i\x02\x03\0\x02\x0corder-status\x02\x03\0\x02\x07address\x02\x03\0\x02\x0aorder-\
item\x02\x03\0\x02\x05order\x02\x03\0\x02\x0ccreate-order\x02\x03\0\x02\x0aerror\
-code\x02\x03\0\x02\x05error\x01Bt\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\
\0\0\x02\x03\x02\x01\x01\x04\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x05\
\x04\0\x0corder-status\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x07address\x03\0\x06\x02\
\x03\x02\x01\x07\x04\0\x0aorder-item\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x05orde\
r\x03\0\x0a\x02\x03\x02\x01\x09\x04\0\x0ccreate-order\x03\0\x0c\x02\x03\x02\x01\x0a\
\x04\0\x0aerror-code\x03\0\x0e\x02\x03\x02\x01\x0b\x04\0\x05error\x03\0\x10\x04\0\
\x16future-add-item-result\x03\x01\x04\0\x19future-remove-item-result\x03\x01\x04\
\0\"future-update-item-quantity-result\x03\x01\x04\0%future-update-shipping-addr\
ess-result\x03\x01\x04\0$future-update-billing-address-result\x03\x01\x04\0\x18f\
uture-ship-order-result\x03\x01\x04\0\x1afuture-cancel-order-result\x03\x01\x04\0\
\x11future-get-result\x03\x01\x04\0\x03api\x03\x01\x01h\x12\x01i\x03\x01@\x01\x04\
self\x1b\0\x1c\x04\0([method]future-add-item-result.subscribe\x01\x1d\x01j\0\x01\
\x11\x01k\x1e\x01@\x01\x04self\x1b\0\x1f\x04\0\"[method]future-add-item-result.g\
et\x01\x20\x01h\x13\x01@\x01\x04self!\0\x1c\x04\0+[method]future-remove-item-res\
ult.subscribe\x01\"\x01@\x01\x04self!\0\x1f\x04\0%[method]future-remove-item-res\
ult.get\x01#\x01h\x14\x01@\x01\x04self$\0\x1c\x04\04[method]future-update-item-q\
uantity-result.subscribe\x01%\x01@\x01\x04self$\0\x1f\x04\0.[method]future-updat\
e-item-quantity-result.get\x01&\x01h\x15\x01@\x01\x04self'\0\x1c\x04\07[method]f\
uture-update-shipping-address-result.subscribe\x01(\x01@\x01\x04self'\0\x1f\x04\0\
1[method]future-update-shipping-address-result.get\x01)\x01h\x16\x01@\x01\x04sel\
f*\0\x1c\x04\06[method]future-update-billing-address-result.subscribe\x01+\x01@\x01\
\x04self*\0\x1f\x04\00[method]future-update-billing-address-result.get\x01,\x01h\
\x17\x01@\x01\x04self-\0\x1c\x04\0*[method]future-ship-order-result.subscribe\x01\
.\x01@\x01\x04self-\0\x1f\x04\0$[method]future-ship-order-result.get\x01/\x01h\x18\
\x01@\x01\x04self0\0\x1c\x04\0,[method]future-cancel-order-result.subscribe\x011\
\x01@\x01\x04self0\0\x1f\x04\0&[method]future-cancel-order-result.get\x012\x01h\x19\
\x01@\x01\x04self3\0\x1c\x04\0#[method]future-get-result.subscribe\x014\x01k\x0b\
\x01k5\x01@\x01\x04self3\06\x04\0\x1d[method]future-get-result.get\x017\x01i\x1a\
\x01@\x01\x08location\x01\08\x04\0\x10[constructor]api\x019\x01h\x1a\x01@\x02\x04\
self:\x04data\x0d\x01\0\x04\0%[method]api.blocking-initialize-order\x01;\x04\0\x1c\
[method]api.initialize-order\x01;\x01@\x03\x04self:\x0aproduct-ids\x08quantityy\0\
\x1e\x04\0\x1d[method]api.blocking-add-item\x01<\x01i\x12\x01@\x03\x04self:\x0ap\
roduct-ids\x08quantityy\0=\x04\0\x14[method]api.add-item\x01>\x01@\x02\x04self:\x0a\
product-ids\0\x1e\x04\0\x20[method]api.blocking-remove-item\x01?\x01i\x13\x01@\x02\
\x04self:\x0aproduct-ids\0\xc0\0\x04\0\x17[method]api.remove-item\x01A\x04\0)[me\
thod]api.blocking-update-item-quantity\x01<\x01i\x14\x01@\x03\x04self:\x0aproduc\
t-ids\x08quantityy\0\xc2\0\x04\0\x20[method]api.update-item-quantity\x01C\x01@\x02\
\x04self:\x07address\x07\0\x1e\x04\0,[method]api.blocking-update-shipping-addres\
s\x01D\x01i\x15\x01@\x02\x04self:\x07address\x07\0\xc5\0\x04\0#[method]api.updat\
e-shipping-address\x01F\x04\0+[method]api.blocking-update-billing-address\x01D\x01\
i\x16\x01@\x02\x04self:\x07address\x07\0\xc7\0\x04\0\"[method]api.update-billing\
-address\x01H\x01@\x01\x04self:\0\x1e\x04\0\x1f[method]api.blocking-ship-order\x01\
I\x01i\x17\x01@\x01\x04self:\0\xca\0\x04\0\x16[method]api.ship-order\x01K\x04\0!\
[method]api.blocking-cancel-order\x01I\x01i\x18\x01@\x01\x04self:\0\xcc\0\x04\0\x18\
[method]api.cancel-order\x01M\x01@\x01\x04self:\05\x04\0\x18[method]api.blocking\
-get\x01N\x01i\x19\x01@\x01\x04self:\0\xcf\0\x04\0\x0f[method]api.get\x01P\x04\x01\
\x1bgolem:order-stub/stub-order\x05\x0c\x04\x01$golem:order-stub/wasm-rpc-stub-o\
rder\x04\0\x0b\x19\x01\0\x13wasm-rpc-stub-order\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
