package golem:order-stub;

interface stub-order {
  use golem:rpc/types@0.1.0.{uri as golem-rpc-uri};
  use wasi:io/poll@0.2.0.{pollable as wasi-io-pollable};
  use golem:order/api.{order-status};
  use golem:order/api.{address};
  use golem:order/api.{order-item};
  use golem:order/api.{order};
  use golem:order/api.{create-order};
  use golem:order/api.{product-not-found-error};
  use golem:order/api.{pricing-not-found-error};
  use golem:order/api.{address-not-valid-error};
  use golem:order/api.{item-not-found-error};
  use golem:order/api.{empty-items-error};
  use golem:order/api.{billing-address-not-set-error};
  use golem:order/api.{action-not-allowed-error};
  use golem:order/api.{error};

  resource future-save-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<list<u8>>;
  }
  resource future-load-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, string>>;
  }
  resource future-add-item-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-remove-item-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-update-item-quantity-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-update-shipping-address-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-update-billing-address-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-ship-order-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-cancel-order-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<_, error>>;
  }
  resource future-get-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<option<order>>;
  }
  resource save-snapshot {
    constructor(location: golem-rpc-uri);
    blocking-save: func() -> list<u8>;
    save: func() -> future-save-result;
  }

  resource load-snapshot {
    constructor(location: golem-rpc-uri);
    blocking-load: func(bytes: list<u8>) -> result<_, string>;
    load: func(bytes: list<u8>) -> future-load-result;
  }

  resource api {
    constructor(location: golem-rpc-uri);
    blocking-initialize-order: func(data: create-order);
    initialize-order: func(data: create-order);
    blocking-add-item: func(product-id: string, quantity: u32) -> result<_, error>;
    add-item: func(product-id: string, quantity: u32) -> future-add-item-result;
    blocking-remove-item: func(product-id: string) -> result<_, error>;
    remove-item: func(product-id: string) -> future-remove-item-result;
    blocking-update-item-quantity: func(product-id: string, quantity: u32) -> result<_, error>;
    update-item-quantity: func(product-id: string, quantity: u32) -> future-update-item-quantity-result;
    blocking-update-shipping-address: func(address: address) -> result<_, error>;
    update-shipping-address: func(address: address) -> future-update-shipping-address-result;
    blocking-update-billing-address: func(address: address) -> result<_, error>;
    update-billing-address: func(address: address) -> future-update-billing-address-result;
    blocking-ship-order: func() -> result<_, error>;
    ship-order: func() -> future-ship-order-result;
    blocking-cancel-order: func() -> result<_, error>;
    cancel-order: func() -> future-cancel-order-result;
    blocking-get: func() -> option<order>;
    get: func() -> future-get-result;
  }

}

world wasm-rpc-stub-order {
  export stub-order;
}
